// Code generated by ogen, DO NOT EDIT.

package typesense

// setDefaults set default value of fields.
func (s *CollectionResponse) setDefaults() {
	{
		val := string("")
		s.DefaultSortingField.SetTo(val)
	}
	{
		val := bool(false)
		s.EnableNestedFields.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *CollectionSchema) setDefaults() {
	{
		val := string("")
		s.DefaultSortingField.SetTo(val)
	}
	{
		val := bool(false)
		s.EnableNestedFields.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *Field) setDefaults() {
	{
		val := bool(true)
		s.Index.SetTo(val)
	}
	{
		val := bool(false)
		s.Infix.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *MultiSearchCollectionParameters) setDefaults() {
	{
		val := bool(false)
		s.PreSegmentedQuery.SetTo(val)
	}
	{
		val := bool(false)
		s.EnableOverrides.SetTo(val)
	}
	{
		val := bool(true)
		s.PrioritizeExactMatch.SetTo(val)
	}
	{
		val := bool(false)
		s.PrioritizeTokenPosition.SetTo(val)
	}
	{
		val := bool(true)
		s.PrioritizeNumMatchingFields.SetTo(val)
	}
	{
		val := bool(true)
		s.EnableTyposForNumericalTokens.SetTo(val)
	}
	{
		val := bool(false)
		s.RerankHybridMatches.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *MultiSearchParameters) setDefaults() {
	{
		val := bool(false)
		s.PreSegmentedQuery.SetTo(val)
	}
	{
		val := bool(false)
		s.EnableOverrides.SetTo(val)
	}
	{
		val := bool(true)
		s.PrioritizeExactMatch.SetTo(val)
	}
	{
		val := bool(false)
		s.PrioritizeTokenPosition.SetTo(val)
	}
	{
		val := bool(true)
		s.PrioritizeNumMatchingFields.SetTo(val)
	}
	{
		val := bool(true)
		s.EnableTyposForNumericalTokens.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *MultiSearchSearchesParameter) setDefaults() {
	{
		val := bool(false)
		s.Union.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *SearchParameters) setDefaults() {
	{
		val := bool(true)
		s.EnableHighlightV1.SetTo(val)
	}
	{
		val := bool(false)
		s.EnableOverrides.SetTo(val)
	}
	{
		val := bool(true)
		s.PrioritizeExactMatch.SetTo(val)
	}
	{
		val := bool(false)
		s.PrioritizeTokenPosition.SetTo(val)
	}
	{
		val := bool(true)
		s.PrioritizeNumMatchingFields.SetTo(val)
	}
	{
		val := bool(true)
		s.EnableTyposForNumericalTokens.SetTo(val)
	}
}
