// Code generated by ogen, DO NOT EDIT.

package typesense

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EncodeURI encodes DeleteDocumentsDeleteDocumentsParameters as URI form.
func (s *DeleteDocumentsDeleteDocumentsParameters) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("filter_by", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(s.FilterBy))
	}); err != nil {
		return errors.Wrap(err, "encode field \"filter_by\"")
	}
	if err := e.EncodeField("batch_size", func(e uri.Encoder) error {
		if val, ok := s.BatchSize.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"batch_size\"")
	}
	if err := e.EncodeField("ignore_not_found", func(e uri.Encoder) error {
		if val, ok := s.IgnoreNotFound.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"ignore_not_found\"")
	}
	if err := e.EncodeField("truncate", func(e uri.Encoder) error {
		if val, ok := s.Truncate.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"truncate\"")
	}
	return nil
}

var uriFieldsNameOfDeleteDocumentsDeleteDocumentsParameters = [4]string{
	0: "filter_by",
	1: "batch_size",
	2: "ignore_not_found",
	3: "truncate",
}

// DecodeURI decodes DeleteDocumentsDeleteDocumentsParameters from URI form.
func (s *DeleteDocumentsDeleteDocumentsParameters) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DeleteDocumentsDeleteDocumentsParameters to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "filter_by":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.FilterBy = c
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter_by\"")
			}
		case "batch_size":
			if err := func() error {
				var sDotBatchSizeVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotBatchSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.BatchSize.SetTo(sDotBatchSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"batch_size\"")
			}
		case "ignore_not_found":
			if err := func() error {
				var sDotIgnoreNotFoundVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotIgnoreNotFoundVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.IgnoreNotFound.SetTo(sDotIgnoreNotFoundVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ignore_not_found\"")
			}
		case "truncate":
			if err := func() error {
				var sDotTruncateVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotTruncateVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Truncate.SetTo(sDotTruncateVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"truncate\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DeleteDocumentsDeleteDocumentsParameters")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfDeleteDocumentsDeleteDocumentsParameters) {
					name = uriFieldsNameOfDeleteDocumentsDeleteDocumentsParameters[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// EncodeURI encodes ExportDocumentsExportDocumentsParameters as URI form.
func (s *ExportDocumentsExportDocumentsParameters) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("filter_by", func(e uri.Encoder) error {
		if val, ok := s.FilterBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"filter_by\"")
	}
	if err := e.EncodeField("include_fields", func(e uri.Encoder) error {
		if val, ok := s.IncludeFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"include_fields\"")
	}
	if err := e.EncodeField("exclude_fields", func(e uri.Encoder) error {
		if val, ok := s.ExcludeFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"exclude_fields\"")
	}
	return nil
}

var uriFieldsNameOfExportDocumentsExportDocumentsParameters = [3]string{
	0: "filter_by",
	1: "include_fields",
	2: "exclude_fields",
}

// DecodeURI decodes ExportDocumentsExportDocumentsParameters from URI form.
func (s *ExportDocumentsExportDocumentsParameters) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExportDocumentsExportDocumentsParameters to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "filter_by":
			if err := func() error {
				var sDotFilterByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFilterByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FilterBy.SetTo(sDotFilterByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter_by\"")
			}
		case "include_fields":
			if err := func() error {
				var sDotIncludeFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIncludeFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.IncludeFields.SetTo(sDotIncludeFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_fields\"")
			}
		case "exclude_fields":
			if err := func() error {
				var sDotExcludeFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotExcludeFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ExcludeFields.SetTo(sDotExcludeFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exclude_fields\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExportDocumentsExportDocumentsParameters")
	}

	return nil
}

// EncodeURI encodes GetCollectionsGetCollectionsParameters as URI form.
func (s *GetCollectionsGetCollectionsParameters) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("exclude_fields", func(e uri.Encoder) error {
		if val, ok := s.ExcludeFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"exclude_fields\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("offset", func(e uri.Encoder) error {
		if val, ok := s.Offset.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"offset\"")
	}
	return nil
}

var uriFieldsNameOfGetCollectionsGetCollectionsParameters = [3]string{
	0: "exclude_fields",
	1: "limit",
	2: "offset",
}

// DecodeURI decodes GetCollectionsGetCollectionsParameters from URI form.
func (s *GetCollectionsGetCollectionsParameters) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCollectionsGetCollectionsParameters to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "exclude_fields":
			if err := func() error {
				var sDotExcludeFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotExcludeFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ExcludeFields.SetTo(sDotExcludeFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exclude_fields\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "offset":
			if err := func() error {
				var sDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Offset.SetTo(sDotOffsetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"offset\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCollectionsGetCollectionsParameters")
	}

	return nil
}

// EncodeURI encodes ImportDocumentsImportDocumentsParameters as URI form.
func (s *ImportDocumentsImportDocumentsParameters) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("batch_size", func(e uri.Encoder) error {
		if val, ok := s.BatchSize.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"batch_size\"")
	}
	if err := e.EncodeField("return_id", func(e uri.Encoder) error {
		if val, ok := s.ReturnID.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"return_id\"")
	}
	if err := e.EncodeField("remote_embedding_batch_size", func(e uri.Encoder) error {
		if val, ok := s.RemoteEmbeddingBatchSize.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"remote_embedding_batch_size\"")
	}
	if err := e.EncodeField("return_doc", func(e uri.Encoder) error {
		if val, ok := s.ReturnDoc.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"return_doc\"")
	}
	if err := e.EncodeField("action", func(e uri.Encoder) error {
		if val, ok := s.Action.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"action\"")
	}
	if err := e.EncodeField("dirty_values", func(e uri.Encoder) error {
		if val, ok := s.DirtyValues.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"dirty_values\"")
	}
	return nil
}

var uriFieldsNameOfImportDocumentsImportDocumentsParameters = [6]string{
	0: "batch_size",
	1: "return_id",
	2: "remote_embedding_batch_size",
	3: "return_doc",
	4: "action",
	5: "dirty_values",
}

// DecodeURI decodes ImportDocumentsImportDocumentsParameters from URI form.
func (s *ImportDocumentsImportDocumentsParameters) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ImportDocumentsImportDocumentsParameters to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "batch_size":
			if err := func() error {
				var sDotBatchSizeVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotBatchSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.BatchSize.SetTo(sDotBatchSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"batch_size\"")
			}
		case "return_id":
			if err := func() error {
				var sDotReturnIDVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotReturnIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ReturnID.SetTo(sDotReturnIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_id\"")
			}
		case "remote_embedding_batch_size":
			if err := func() error {
				var sDotRemoteEmbeddingBatchSizeVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotRemoteEmbeddingBatchSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.RemoteEmbeddingBatchSize.SetTo(sDotRemoteEmbeddingBatchSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_embedding_batch_size\"")
			}
		case "return_doc":
			if err := func() error {
				var sDotReturnDocVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotReturnDocVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ReturnDoc.SetTo(sDotReturnDocVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_doc\"")
			}
		case "action":
			if err := func() error {
				var sDotActionVal IndexAction
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotActionVal = IndexAction(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Action.SetTo(sDotActionVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "dirty_values":
			if err := func() error {
				var sDotDirtyValuesVal DirtyValues
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotDirtyValuesVal = DirtyValues(c)
					return nil
				}(); err != nil {
					return err
				}
				s.DirtyValues.SetTo(sDotDirtyValuesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dirty_values\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ImportDocumentsImportDocumentsParameters")
	}

	return nil
}

// EncodeURI encodes MultiSearchParameters as URI form.
func (s *MultiSearchParameters) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("q", func(e uri.Encoder) error {
		if val, ok := s.Q.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"q\"")
	}
	if err := e.EncodeField("query_by", func(e uri.Encoder) error {
		if val, ok := s.QueryBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"query_by\"")
	}
	if err := e.EncodeField("query_by_weights", func(e uri.Encoder) error {
		if val, ok := s.QueryByWeights.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"query_by_weights\"")
	}
	if err := e.EncodeField("text_match_type", func(e uri.Encoder) error {
		if val, ok := s.TextMatchType.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"text_match_type\"")
	}
	if err := e.EncodeField("prefix", func(e uri.Encoder) error {
		if val, ok := s.Prefix.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"prefix\"")
	}
	if err := e.EncodeField("infix", func(e uri.Encoder) error {
		if val, ok := s.Infix.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"infix\"")
	}
	if err := e.EncodeField("max_extra_prefix", func(e uri.Encoder) error {
		if val, ok := s.MaxExtraPrefix.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"max_extra_prefix\"")
	}
	if err := e.EncodeField("max_extra_suffix", func(e uri.Encoder) error {
		if val, ok := s.MaxExtraSuffix.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"max_extra_suffix\"")
	}
	if err := e.EncodeField("filter_by", func(e uri.Encoder) error {
		if val, ok := s.FilterBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"filter_by\"")
	}
	if err := e.EncodeField("sort_by", func(e uri.Encoder) error {
		if val, ok := s.SortBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort_by\"")
	}
	if err := e.EncodeField("facet_by", func(e uri.Encoder) error {
		if val, ok := s.FacetBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"facet_by\"")
	}
	if err := e.EncodeField("max_facet_values", func(e uri.Encoder) error {
		if val, ok := s.MaxFacetValues.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"max_facet_values\"")
	}
	if err := e.EncodeField("facet_query", func(e uri.Encoder) error {
		if val, ok := s.FacetQuery.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"facet_query\"")
	}
	if err := e.EncodeField("num_typos", func(e uri.Encoder) error {
		if val, ok := s.NumTypos.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"num_typos\"")
	}
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("per_page", func(e uri.Encoder) error {
		if val, ok := s.PerPage.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"per_page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("offset", func(e uri.Encoder) error {
		if val, ok := s.Offset.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"offset\"")
	}
	if err := e.EncodeField("group_by", func(e uri.Encoder) error {
		if val, ok := s.GroupBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"group_by\"")
	}
	if err := e.EncodeField("group_limit", func(e uri.Encoder) error {
		if val, ok := s.GroupLimit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"group_limit\"")
	}
	if err := e.EncodeField("group_missing_values", func(e uri.Encoder) error {
		if val, ok := s.GroupMissingValues.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"group_missing_values\"")
	}
	if err := e.EncodeField("include_fields", func(e uri.Encoder) error {
		if val, ok := s.IncludeFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"include_fields\"")
	}
	if err := e.EncodeField("exclude_fields", func(e uri.Encoder) error {
		if val, ok := s.ExcludeFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"exclude_fields\"")
	}
	if err := e.EncodeField("highlight_full_fields", func(e uri.Encoder) error {
		if val, ok := s.HighlightFullFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_full_fields\"")
	}
	if err := e.EncodeField("highlight_affix_num_tokens", func(e uri.Encoder) error {
		if val, ok := s.HighlightAffixNumTokens.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_affix_num_tokens\"")
	}
	if err := e.EncodeField("highlight_start_tag", func(e uri.Encoder) error {
		if val, ok := s.HighlightStartTag.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_start_tag\"")
	}
	if err := e.EncodeField("highlight_end_tag", func(e uri.Encoder) error {
		if val, ok := s.HighlightEndTag.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_end_tag\"")
	}
	if err := e.EncodeField("snippet_threshold", func(e uri.Encoder) error {
		if val, ok := s.SnippetThreshold.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"snippet_threshold\"")
	}
	if err := e.EncodeField("drop_tokens_threshold", func(e uri.Encoder) error {
		if val, ok := s.DropTokensThreshold.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"drop_tokens_threshold\"")
	}
	if err := e.EncodeField("drop_tokens_mode", func(e uri.Encoder) error {
		if val, ok := s.DropTokensMode.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"drop_tokens_mode\"")
	}
	if err := e.EncodeField("typo_tokens_threshold", func(e uri.Encoder) error {
		if val, ok := s.TypoTokensThreshold.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"typo_tokens_threshold\"")
	}
	if err := e.EncodeField("enable_typos_for_alpha_numerical_tokens", func(e uri.Encoder) error {
		if val, ok := s.EnableTyposForAlphaNumericalTokens.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_typos_for_alpha_numerical_tokens\"")
	}
	if err := e.EncodeField("filter_curated_hits", func(e uri.Encoder) error {
		if val, ok := s.FilterCuratedHits.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"filter_curated_hits\"")
	}
	if err := e.EncodeField("enable_synonyms", func(e uri.Encoder) error {
		if val, ok := s.EnableSynonyms.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_synonyms\"")
	}
	if err := e.EncodeField("synonym_prefix", func(e uri.Encoder) error {
		if val, ok := s.SynonymPrefix.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"synonym_prefix\"")
	}
	if err := e.EncodeField("synonym_num_typos", func(e uri.Encoder) error {
		if val, ok := s.SynonymNumTypos.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"synonym_num_typos\"")
	}
	if err := e.EncodeField("pinned_hits", func(e uri.Encoder) error {
		if val, ok := s.PinnedHits.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"pinned_hits\"")
	}
	if err := e.EncodeField("hidden_hits", func(e uri.Encoder) error {
		if val, ok := s.HiddenHits.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"hidden_hits\"")
	}
	if err := e.EncodeField("override_tags", func(e uri.Encoder) error {
		if val, ok := s.OverrideTags.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"override_tags\"")
	}
	if err := e.EncodeField("highlight_fields", func(e uri.Encoder) error {
		if val, ok := s.HighlightFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_fields\"")
	}
	if err := e.EncodeField("pre_segmented_query", func(e uri.Encoder) error {
		if val, ok := s.PreSegmentedQuery.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"pre_segmented_query\"")
	}
	if err := e.EncodeField("preset", func(e uri.Encoder) error {
		if val, ok := s.Preset.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"preset\"")
	}
	if err := e.EncodeField("enable_overrides", func(e uri.Encoder) error {
		if val, ok := s.EnableOverrides.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_overrides\"")
	}
	if err := e.EncodeField("prioritize_exact_match", func(e uri.Encoder) error {
		if val, ok := s.PrioritizeExactMatch.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"prioritize_exact_match\"")
	}
	if err := e.EncodeField("prioritize_token_position", func(e uri.Encoder) error {
		if val, ok := s.PrioritizeTokenPosition.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"prioritize_token_position\"")
	}
	if err := e.EncodeField("prioritize_num_matching_fields", func(e uri.Encoder) error {
		if val, ok := s.PrioritizeNumMatchingFields.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"prioritize_num_matching_fields\"")
	}
	if err := e.EncodeField("enable_typos_for_numerical_tokens", func(e uri.Encoder) error {
		if val, ok := s.EnableTyposForNumericalTokens.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_typos_for_numerical_tokens\"")
	}
	if err := e.EncodeField("exhaustive_search", func(e uri.Encoder) error {
		if val, ok := s.ExhaustiveSearch.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"exhaustive_search\"")
	}
	if err := e.EncodeField("search_cutoff_ms", func(e uri.Encoder) error {
		if val, ok := s.SearchCutoffMs.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"search_cutoff_ms\"")
	}
	if err := e.EncodeField("use_cache", func(e uri.Encoder) error {
		if val, ok := s.UseCache.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"use_cache\"")
	}
	if err := e.EncodeField("cache_ttl", func(e uri.Encoder) error {
		if val, ok := s.CacheTTL.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"cache_ttl\"")
	}
	if err := e.EncodeField("min_len_1typo", func(e uri.Encoder) error {
		if val, ok := s.MinLen1typo.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"min_len_1typo\"")
	}
	if err := e.EncodeField("min_len_2typo", func(e uri.Encoder) error {
		if val, ok := s.MinLen2typo.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"min_len_2typo\"")
	}
	if err := e.EncodeField("vector_query", func(e uri.Encoder) error {
		if val, ok := s.VectorQuery.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"vector_query\"")
	}
	if err := e.EncodeField("remote_embedding_timeout_ms", func(e uri.Encoder) error {
		if val, ok := s.RemoteEmbeddingTimeoutMs.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"remote_embedding_timeout_ms\"")
	}
	if err := e.EncodeField("remote_embedding_num_tries", func(e uri.Encoder) error {
		if val, ok := s.RemoteEmbeddingNumTries.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"remote_embedding_num_tries\"")
	}
	if err := e.EncodeField("facet_strategy", func(e uri.Encoder) error {
		if val, ok := s.FacetStrategy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"facet_strategy\"")
	}
	if err := e.EncodeField("stopwords", func(e uri.Encoder) error {
		if val, ok := s.Stopwords.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"stopwords\"")
	}
	if err := e.EncodeField("facet_return_parent", func(e uri.Encoder) error {
		if val, ok := s.FacetReturnParent.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"facet_return_parent\"")
	}
	if err := e.EncodeField("voice_query", func(e uri.Encoder) error {
		if val, ok := s.VoiceQuery.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"voice_query\"")
	}
	if err := e.EncodeField("conversation", func(e uri.Encoder) error {
		if val, ok := s.Conversation.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"conversation\"")
	}
	if err := e.EncodeField("conversation_model_id", func(e uri.Encoder) error {
		if val, ok := s.ConversationModelID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"conversation_model_id\"")
	}
	if err := e.EncodeField("conversation_id", func(e uri.Encoder) error {
		if val, ok := s.ConversationID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"conversation_id\"")
	}
	return nil
}

var uriFieldsNameOfMultiSearchParameters = [63]string{
	0:  "q",
	1:  "query_by",
	2:  "query_by_weights",
	3:  "text_match_type",
	4:  "prefix",
	5:  "infix",
	6:  "max_extra_prefix",
	7:  "max_extra_suffix",
	8:  "filter_by",
	9:  "sort_by",
	10: "facet_by",
	11: "max_facet_values",
	12: "facet_query",
	13: "num_typos",
	14: "page",
	15: "per_page",
	16: "limit",
	17: "offset",
	18: "group_by",
	19: "group_limit",
	20: "group_missing_values",
	21: "include_fields",
	22: "exclude_fields",
	23: "highlight_full_fields",
	24: "highlight_affix_num_tokens",
	25: "highlight_start_tag",
	26: "highlight_end_tag",
	27: "snippet_threshold",
	28: "drop_tokens_threshold",
	29: "drop_tokens_mode",
	30: "typo_tokens_threshold",
	31: "enable_typos_for_alpha_numerical_tokens",
	32: "filter_curated_hits",
	33: "enable_synonyms",
	34: "synonym_prefix",
	35: "synonym_num_typos",
	36: "pinned_hits",
	37: "hidden_hits",
	38: "override_tags",
	39: "highlight_fields",
	40: "pre_segmented_query",
	41: "preset",
	42: "enable_overrides",
	43: "prioritize_exact_match",
	44: "prioritize_token_position",
	45: "prioritize_num_matching_fields",
	46: "enable_typos_for_numerical_tokens",
	47: "exhaustive_search",
	48: "search_cutoff_ms",
	49: "use_cache",
	50: "cache_ttl",
	51: "min_len_1typo",
	52: "min_len_2typo",
	53: "vector_query",
	54: "remote_embedding_timeout_ms",
	55: "remote_embedding_num_tries",
	56: "facet_strategy",
	57: "stopwords",
	58: "facet_return_parent",
	59: "voice_query",
	60: "conversation",
	61: "conversation_model_id",
	62: "conversation_id",
}

// DecodeURI decodes MultiSearchParameters from URI form.
func (s *MultiSearchParameters) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MultiSearchParameters to nil")
	}
	s.setDefaults()

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "q":
			if err := func() error {
				var sDotQVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotQVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Q.SetTo(sDotQVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"q\"")
			}
		case "query_by":
			if err := func() error {
				var sDotQueryByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotQueryByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.QueryBy.SetTo(sDotQueryByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query_by\"")
			}
		case "query_by_weights":
			if err := func() error {
				var sDotQueryByWeightsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotQueryByWeightsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.QueryByWeights.SetTo(sDotQueryByWeightsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query_by_weights\"")
			}
		case "text_match_type":
			if err := func() error {
				var sDotTextMatchTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotTextMatchTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.TextMatchType.SetTo(sDotTextMatchTypeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"text_match_type\"")
			}
		case "prefix":
			if err := func() error {
				var sDotPrefixVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPrefixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Prefix.SetTo(sDotPrefixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix\"")
			}
		case "infix":
			if err := func() error {
				var sDotInfixVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotInfixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Infix.SetTo(sDotInfixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"infix\"")
			}
		case "max_extra_prefix":
			if err := func() error {
				var sDotMaxExtraPrefixVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMaxExtraPrefixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MaxExtraPrefix.SetTo(sDotMaxExtraPrefixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_extra_prefix\"")
			}
		case "max_extra_suffix":
			if err := func() error {
				var sDotMaxExtraSuffixVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMaxExtraSuffixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MaxExtraSuffix.SetTo(sDotMaxExtraSuffixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_extra_suffix\"")
			}
		case "filter_by":
			if err := func() error {
				var sDotFilterByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFilterByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FilterBy.SetTo(sDotFilterByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter_by\"")
			}
		case "sort_by":
			if err := func() error {
				var sDotSortByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SortBy.SetTo(sDotSortByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort_by\"")
			}
		case "facet_by":
			if err := func() error {
				var sDotFacetByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFacetByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FacetBy.SetTo(sDotFacetByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facet_by\"")
			}
		case "max_facet_values":
			if err := func() error {
				var sDotMaxFacetValuesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMaxFacetValuesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MaxFacetValues.SetTo(sDotMaxFacetValuesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_facet_values\"")
			}
		case "facet_query":
			if err := func() error {
				var sDotFacetQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFacetQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FacetQuery.SetTo(sDotFacetQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facet_query\"")
			}
		case "num_typos":
			if err := func() error {
				var sDotNumTyposVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotNumTyposVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.NumTypos.SetTo(sDotNumTyposVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"num_typos\"")
			}
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "per_page":
			if err := func() error {
				var sDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PerPage.SetTo(sDotPerPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"per_page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "offset":
			if err := func() error {
				var sDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Offset.SetTo(sDotOffsetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"offset\"")
			}
		case "group_by":
			if err := func() error {
				var sDotGroupByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotGroupByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.GroupBy.SetTo(sDotGroupByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_by\"")
			}
		case "group_limit":
			if err := func() error {
				var sDotGroupLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotGroupLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.GroupLimit.SetTo(sDotGroupLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_limit\"")
			}
		case "group_missing_values":
			if err := func() error {
				var sDotGroupMissingValuesVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotGroupMissingValuesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.GroupMissingValues.SetTo(sDotGroupMissingValuesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_missing_values\"")
			}
		case "include_fields":
			if err := func() error {
				var sDotIncludeFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIncludeFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.IncludeFields.SetTo(sDotIncludeFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_fields\"")
			}
		case "exclude_fields":
			if err := func() error {
				var sDotExcludeFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotExcludeFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ExcludeFields.SetTo(sDotExcludeFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exclude_fields\"")
			}
		case "highlight_full_fields":
			if err := func() error {
				var sDotHighlightFullFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHighlightFullFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightFullFields.SetTo(sDotHighlightFullFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_full_fields\"")
			}
		case "highlight_affix_num_tokens":
			if err := func() error {
				var sDotHighlightAffixNumTokensVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotHighlightAffixNumTokensVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightAffixNumTokens.SetTo(sDotHighlightAffixNumTokensVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_affix_num_tokens\"")
			}
		case "highlight_start_tag":
			if err := func() error {
				var sDotHighlightStartTagVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHighlightStartTagVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightStartTag.SetTo(sDotHighlightStartTagVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_start_tag\"")
			}
		case "highlight_end_tag":
			if err := func() error {
				var sDotHighlightEndTagVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHighlightEndTagVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightEndTag.SetTo(sDotHighlightEndTagVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_end_tag\"")
			}
		case "snippet_threshold":
			if err := func() error {
				var sDotSnippetThresholdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotSnippetThresholdVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SnippetThreshold.SetTo(sDotSnippetThresholdVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"snippet_threshold\"")
			}
		case "drop_tokens_threshold":
			if err := func() error {
				var sDotDropTokensThresholdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotDropTokensThresholdVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.DropTokensThreshold.SetTo(sDotDropTokensThresholdVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"drop_tokens_threshold\"")
			}
		case "drop_tokens_mode":
			if err := func() error {
				var sDotDropTokensModeVal DropTokensMode
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotDropTokensModeVal = DropTokensMode(c)
					return nil
				}(); err != nil {
					return err
				}
				s.DropTokensMode.SetTo(sDotDropTokensModeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"drop_tokens_mode\"")
			}
		case "typo_tokens_threshold":
			if err := func() error {
				var sDotTypoTokensThresholdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotTypoTokensThresholdVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.TypoTokensThreshold.SetTo(sDotTypoTokensThresholdVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"typo_tokens_threshold\"")
			}
		case "enable_typos_for_alpha_numerical_tokens":
			if err := func() error {
				var sDotEnableTyposForAlphaNumericalTokensVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableTyposForAlphaNumericalTokensVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableTyposForAlphaNumericalTokens.SetTo(sDotEnableTyposForAlphaNumericalTokensVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_typos_for_alpha_numerical_tokens\"")
			}
		case "filter_curated_hits":
			if err := func() error {
				var sDotFilterCuratedHitsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotFilterCuratedHitsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FilterCuratedHits.SetTo(sDotFilterCuratedHitsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter_curated_hits\"")
			}
		case "enable_synonyms":
			if err := func() error {
				var sDotEnableSynonymsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableSynonymsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableSynonyms.SetTo(sDotEnableSynonymsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_synonyms\"")
			}
		case "synonym_prefix":
			if err := func() error {
				var sDotSynonymPrefixVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotSynonymPrefixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SynonymPrefix.SetTo(sDotSynonymPrefixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"synonym_prefix\"")
			}
		case "synonym_num_typos":
			if err := func() error {
				var sDotSynonymNumTyposVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotSynonymNumTyposVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SynonymNumTypos.SetTo(sDotSynonymNumTyposVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"synonym_num_typos\"")
			}
		case "pinned_hits":
			if err := func() error {
				var sDotPinnedHitsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPinnedHitsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PinnedHits.SetTo(sDotPinnedHitsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pinned_hits\"")
			}
		case "hidden_hits":
			if err := func() error {
				var sDotHiddenHitsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHiddenHitsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HiddenHits.SetTo(sDotHiddenHitsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hidden_hits\"")
			}
		case "override_tags":
			if err := func() error {
				var sDotOverrideTagsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotOverrideTagsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.OverrideTags.SetTo(sDotOverrideTagsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"override_tags\"")
			}
		case "highlight_fields":
			if err := func() error {
				var sDotHighlightFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHighlightFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightFields.SetTo(sDotHighlightFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_fields\"")
			}
		case "pre_segmented_query":
			if err := func() error {
				var sDotPreSegmentedQueryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotPreSegmentedQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PreSegmentedQuery.SetTo(sDotPreSegmentedQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pre_segmented_query\"")
			}
		case "preset":
			if err := func() error {
				var sDotPresetVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPresetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Preset.SetTo(sDotPresetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"preset\"")
			}
		case "enable_overrides":
			if err := func() error {
				var sDotEnableOverridesVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableOverridesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableOverrides.SetTo(sDotEnableOverridesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_overrides\"")
			}
		case "prioritize_exact_match":
			if err := func() error {
				var sDotPrioritizeExactMatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotPrioritizeExactMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PrioritizeExactMatch.SetTo(sDotPrioritizeExactMatchVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prioritize_exact_match\"")
			}
		case "prioritize_token_position":
			if err := func() error {
				var sDotPrioritizeTokenPositionVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotPrioritizeTokenPositionVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PrioritizeTokenPosition.SetTo(sDotPrioritizeTokenPositionVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prioritize_token_position\"")
			}
		case "prioritize_num_matching_fields":
			if err := func() error {
				var sDotPrioritizeNumMatchingFieldsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotPrioritizeNumMatchingFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PrioritizeNumMatchingFields.SetTo(sDotPrioritizeNumMatchingFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prioritize_num_matching_fields\"")
			}
		case "enable_typos_for_numerical_tokens":
			if err := func() error {
				var sDotEnableTyposForNumericalTokensVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableTyposForNumericalTokensVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableTyposForNumericalTokens.SetTo(sDotEnableTyposForNumericalTokensVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_typos_for_numerical_tokens\"")
			}
		case "exhaustive_search":
			if err := func() error {
				var sDotExhaustiveSearchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotExhaustiveSearchVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ExhaustiveSearch.SetTo(sDotExhaustiveSearchVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exhaustive_search\"")
			}
		case "search_cutoff_ms":
			if err := func() error {
				var sDotSearchCutoffMsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotSearchCutoffMsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SearchCutoffMs.SetTo(sDotSearchCutoffMsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"search_cutoff_ms\"")
			}
		case "use_cache":
			if err := func() error {
				var sDotUseCacheVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotUseCacheVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.UseCache.SetTo(sDotUseCacheVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_cache\"")
			}
		case "cache_ttl":
			if err := func() error {
				var sDotCacheTTLVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotCacheTTLVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CacheTTL.SetTo(sDotCacheTTLVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cache_ttl\"")
			}
		case "min_len_1typo":
			if err := func() error {
				var sDotMinLen1typoVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMinLen1typoVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MinLen1typo.SetTo(sDotMinLen1typoVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min_len_1typo\"")
			}
		case "min_len_2typo":
			if err := func() error {
				var sDotMinLen2typoVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMinLen2typoVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MinLen2typo.SetTo(sDotMinLen2typoVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min_len_2typo\"")
			}
		case "vector_query":
			if err := func() error {
				var sDotVectorQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotVectorQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.VectorQuery.SetTo(sDotVectorQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vector_query\"")
			}
		case "remote_embedding_timeout_ms":
			if err := func() error {
				var sDotRemoteEmbeddingTimeoutMsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotRemoteEmbeddingTimeoutMsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.RemoteEmbeddingTimeoutMs.SetTo(sDotRemoteEmbeddingTimeoutMsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_embedding_timeout_ms\"")
			}
		case "remote_embedding_num_tries":
			if err := func() error {
				var sDotRemoteEmbeddingNumTriesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotRemoteEmbeddingNumTriesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.RemoteEmbeddingNumTries.SetTo(sDotRemoteEmbeddingNumTriesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_embedding_num_tries\"")
			}
		case "facet_strategy":
			if err := func() error {
				var sDotFacetStrategyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFacetStrategyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FacetStrategy.SetTo(sDotFacetStrategyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facet_strategy\"")
			}
		case "stopwords":
			if err := func() error {
				var sDotStopwordsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStopwordsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Stopwords.SetTo(sDotStopwordsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stopwords\"")
			}
		case "facet_return_parent":
			if err := func() error {
				var sDotFacetReturnParentVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFacetReturnParentVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FacetReturnParent.SetTo(sDotFacetReturnParentVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facet_return_parent\"")
			}
		case "voice_query":
			if err := func() error {
				var sDotVoiceQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotVoiceQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.VoiceQuery.SetTo(sDotVoiceQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_query\"")
			}
		case "conversation":
			if err := func() error {
				var sDotConversationVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotConversationVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Conversation.SetTo(sDotConversationVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"conversation\"")
			}
		case "conversation_model_id":
			if err := func() error {
				var sDotConversationModelIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotConversationModelIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ConversationModelID.SetTo(sDotConversationModelIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"conversation_model_id\"")
			}
		case "conversation_id":
			if err := func() error {
				var sDotConversationIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotConversationIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ConversationID.SetTo(sDotConversationIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"conversation_id\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MultiSearchParameters")
	}

	return nil
}

// EncodeURI encodes SearchParameters as URI form.
func (s *SearchParameters) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("q", func(e uri.Encoder) error {
		if val, ok := s.Q.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"q\"")
	}
	if err := e.EncodeField("query_by", func(e uri.Encoder) error {
		if val, ok := s.QueryBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"query_by\"")
	}
	if err := e.EncodeField("nl_query", func(e uri.Encoder) error {
		if val, ok := s.NlQuery.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"nl_query\"")
	}
	if err := e.EncodeField("nl_model_id", func(e uri.Encoder) error {
		if val, ok := s.NlModelID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"nl_model_id\"")
	}
	if err := e.EncodeField("query_by_weights", func(e uri.Encoder) error {
		if val, ok := s.QueryByWeights.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"query_by_weights\"")
	}
	if err := e.EncodeField("text_match_type", func(e uri.Encoder) error {
		if val, ok := s.TextMatchType.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"text_match_type\"")
	}
	if err := e.EncodeField("prefix", func(e uri.Encoder) error {
		if val, ok := s.Prefix.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"prefix\"")
	}
	if err := e.EncodeField("infix", func(e uri.Encoder) error {
		if val, ok := s.Infix.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"infix\"")
	}
	if err := e.EncodeField("max_extra_prefix", func(e uri.Encoder) error {
		if val, ok := s.MaxExtraPrefix.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"max_extra_prefix\"")
	}
	if err := e.EncodeField("max_extra_suffix", func(e uri.Encoder) error {
		if val, ok := s.MaxExtraSuffix.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"max_extra_suffix\"")
	}
	if err := e.EncodeField("filter_by", func(e uri.Encoder) error {
		if val, ok := s.FilterBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"filter_by\"")
	}
	if err := e.EncodeField("max_filter_by_candidates", func(e uri.Encoder) error {
		if val, ok := s.MaxFilterByCandidates.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"max_filter_by_candidates\"")
	}
	if err := e.EncodeField("sort_by", func(e uri.Encoder) error {
		if val, ok := s.SortBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort_by\"")
	}
	if err := e.EncodeField("facet_by", func(e uri.Encoder) error {
		if val, ok := s.FacetBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"facet_by\"")
	}
	if err := e.EncodeField("max_facet_values", func(e uri.Encoder) error {
		if val, ok := s.MaxFacetValues.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"max_facet_values\"")
	}
	if err := e.EncodeField("facet_query", func(e uri.Encoder) error {
		if val, ok := s.FacetQuery.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"facet_query\"")
	}
	if err := e.EncodeField("num_typos", func(e uri.Encoder) error {
		if val, ok := s.NumTypos.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"num_typos\"")
	}
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("per_page", func(e uri.Encoder) error {
		if val, ok := s.PerPage.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"per_page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("offset", func(e uri.Encoder) error {
		if val, ok := s.Offset.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"offset\"")
	}
	if err := e.EncodeField("group_by", func(e uri.Encoder) error {
		if val, ok := s.GroupBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"group_by\"")
	}
	if err := e.EncodeField("group_limit", func(e uri.Encoder) error {
		if val, ok := s.GroupLimit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"group_limit\"")
	}
	if err := e.EncodeField("group_missing_values", func(e uri.Encoder) error {
		if val, ok := s.GroupMissingValues.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"group_missing_values\"")
	}
	if err := e.EncodeField("include_fields", func(e uri.Encoder) error {
		if val, ok := s.IncludeFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"include_fields\"")
	}
	if err := e.EncodeField("exclude_fields", func(e uri.Encoder) error {
		if val, ok := s.ExcludeFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"exclude_fields\"")
	}
	if err := e.EncodeField("highlight_full_fields", func(e uri.Encoder) error {
		if val, ok := s.HighlightFullFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_full_fields\"")
	}
	if err := e.EncodeField("highlight_affix_num_tokens", func(e uri.Encoder) error {
		if val, ok := s.HighlightAffixNumTokens.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_affix_num_tokens\"")
	}
	if err := e.EncodeField("highlight_start_tag", func(e uri.Encoder) error {
		if val, ok := s.HighlightStartTag.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_start_tag\"")
	}
	if err := e.EncodeField("highlight_end_tag", func(e uri.Encoder) error {
		if val, ok := s.HighlightEndTag.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_end_tag\"")
	}
	if err := e.EncodeField("enable_highlight_v1", func(e uri.Encoder) error {
		if val, ok := s.EnableHighlightV1.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_highlight_v1\"")
	}
	if err := e.EncodeField("snippet_threshold", func(e uri.Encoder) error {
		if val, ok := s.SnippetThreshold.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"snippet_threshold\"")
	}
	if err := e.EncodeField("drop_tokens_threshold", func(e uri.Encoder) error {
		if val, ok := s.DropTokensThreshold.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"drop_tokens_threshold\"")
	}
	if err := e.EncodeField("drop_tokens_mode", func(e uri.Encoder) error {
		if val, ok := s.DropTokensMode.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"drop_tokens_mode\"")
	}
	if err := e.EncodeField("typo_tokens_threshold", func(e uri.Encoder) error {
		if val, ok := s.TypoTokensThreshold.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"typo_tokens_threshold\"")
	}
	if err := e.EncodeField("enable_typos_for_alpha_numerical_tokens", func(e uri.Encoder) error {
		if val, ok := s.EnableTyposForAlphaNumericalTokens.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_typos_for_alpha_numerical_tokens\"")
	}
	if err := e.EncodeField("filter_curated_hits", func(e uri.Encoder) error {
		if val, ok := s.FilterCuratedHits.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"filter_curated_hits\"")
	}
	if err := e.EncodeField("enable_synonyms", func(e uri.Encoder) error {
		if val, ok := s.EnableSynonyms.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_synonyms\"")
	}
	if err := e.EncodeField("synonym_prefix", func(e uri.Encoder) error {
		if val, ok := s.SynonymPrefix.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"synonym_prefix\"")
	}
	if err := e.EncodeField("synonym_num_typos", func(e uri.Encoder) error {
		if val, ok := s.SynonymNumTypos.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"synonym_num_typos\"")
	}
	if err := e.EncodeField("pinned_hits", func(e uri.Encoder) error {
		if val, ok := s.PinnedHits.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"pinned_hits\"")
	}
	if err := e.EncodeField("hidden_hits", func(e uri.Encoder) error {
		if val, ok := s.HiddenHits.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"hidden_hits\"")
	}
	if err := e.EncodeField("override_tags", func(e uri.Encoder) error {
		if val, ok := s.OverrideTags.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"override_tags\"")
	}
	if err := e.EncodeField("highlight_fields", func(e uri.Encoder) error {
		if val, ok := s.HighlightFields.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"highlight_fields\"")
	}
	if err := e.EncodeField("split_join_tokens", func(e uri.Encoder) error {
		if val, ok := s.SplitJoinTokens.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"split_join_tokens\"")
	}
	if err := e.EncodeField("pre_segmented_query", func(e uri.Encoder) error {
		if val, ok := s.PreSegmentedQuery.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"pre_segmented_query\"")
	}
	if err := e.EncodeField("preset", func(e uri.Encoder) error {
		if val, ok := s.Preset.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"preset\"")
	}
	if err := e.EncodeField("enable_overrides", func(e uri.Encoder) error {
		if val, ok := s.EnableOverrides.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_overrides\"")
	}
	if err := e.EncodeField("prioritize_exact_match", func(e uri.Encoder) error {
		if val, ok := s.PrioritizeExactMatch.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"prioritize_exact_match\"")
	}
	if err := e.EncodeField("max_candidates", func(e uri.Encoder) error {
		if val, ok := s.MaxCandidates.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"max_candidates\"")
	}
	if err := e.EncodeField("prioritize_token_position", func(e uri.Encoder) error {
		if val, ok := s.PrioritizeTokenPosition.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"prioritize_token_position\"")
	}
	if err := e.EncodeField("prioritize_num_matching_fields", func(e uri.Encoder) error {
		if val, ok := s.PrioritizeNumMatchingFields.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"prioritize_num_matching_fields\"")
	}
	if err := e.EncodeField("enable_typos_for_numerical_tokens", func(e uri.Encoder) error {
		if val, ok := s.EnableTyposForNumericalTokens.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"enable_typos_for_numerical_tokens\"")
	}
	if err := e.EncodeField("exhaustive_search", func(e uri.Encoder) error {
		if val, ok := s.ExhaustiveSearch.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"exhaustive_search\"")
	}
	if err := e.EncodeField("search_cutoff_ms", func(e uri.Encoder) error {
		if val, ok := s.SearchCutoffMs.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"search_cutoff_ms\"")
	}
	if err := e.EncodeField("use_cache", func(e uri.Encoder) error {
		if val, ok := s.UseCache.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"use_cache\"")
	}
	if err := e.EncodeField("cache_ttl", func(e uri.Encoder) error {
		if val, ok := s.CacheTTL.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"cache_ttl\"")
	}
	if err := e.EncodeField("min_len_1typo", func(e uri.Encoder) error {
		if val, ok := s.MinLen1typo.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"min_len_1typo\"")
	}
	if err := e.EncodeField("min_len_2typo", func(e uri.Encoder) error {
		if val, ok := s.MinLen2typo.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"min_len_2typo\"")
	}
	if err := e.EncodeField("vector_query", func(e uri.Encoder) error {
		if val, ok := s.VectorQuery.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"vector_query\"")
	}
	if err := e.EncodeField("remote_embedding_timeout_ms", func(e uri.Encoder) error {
		if val, ok := s.RemoteEmbeddingTimeoutMs.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"remote_embedding_timeout_ms\"")
	}
	if err := e.EncodeField("remote_embedding_num_tries", func(e uri.Encoder) error {
		if val, ok := s.RemoteEmbeddingNumTries.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"remote_embedding_num_tries\"")
	}
	if err := e.EncodeField("facet_strategy", func(e uri.Encoder) error {
		if val, ok := s.FacetStrategy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"facet_strategy\"")
	}
	if err := e.EncodeField("stopwords", func(e uri.Encoder) error {
		if val, ok := s.Stopwords.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"stopwords\"")
	}
	if err := e.EncodeField("facet_return_parent", func(e uri.Encoder) error {
		if val, ok := s.FacetReturnParent.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"facet_return_parent\"")
	}
	if err := e.EncodeField("voice_query", func(e uri.Encoder) error {
		if val, ok := s.VoiceQuery.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"voice_query\"")
	}
	if err := e.EncodeField("conversation", func(e uri.Encoder) error {
		if val, ok := s.Conversation.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"conversation\"")
	}
	if err := e.EncodeField("conversation_model_id", func(e uri.Encoder) error {
		if val, ok := s.ConversationModelID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"conversation_model_id\"")
	}
	if err := e.EncodeField("conversation_id", func(e uri.Encoder) error {
		if val, ok := s.ConversationID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"conversation_id\"")
	}
	return nil
}

var uriFieldsNameOfSearchParameters = [69]string{
	0:  "q",
	1:  "query_by",
	2:  "nl_query",
	3:  "nl_model_id",
	4:  "query_by_weights",
	5:  "text_match_type",
	6:  "prefix",
	7:  "infix",
	8:  "max_extra_prefix",
	9:  "max_extra_suffix",
	10: "filter_by",
	11: "max_filter_by_candidates",
	12: "sort_by",
	13: "facet_by",
	14: "max_facet_values",
	15: "facet_query",
	16: "num_typos",
	17: "page",
	18: "per_page",
	19: "limit",
	20: "offset",
	21: "group_by",
	22: "group_limit",
	23: "group_missing_values",
	24: "include_fields",
	25: "exclude_fields",
	26: "highlight_full_fields",
	27: "highlight_affix_num_tokens",
	28: "highlight_start_tag",
	29: "highlight_end_tag",
	30: "enable_highlight_v1",
	31: "snippet_threshold",
	32: "drop_tokens_threshold",
	33: "drop_tokens_mode",
	34: "typo_tokens_threshold",
	35: "enable_typos_for_alpha_numerical_tokens",
	36: "filter_curated_hits",
	37: "enable_synonyms",
	38: "synonym_prefix",
	39: "synonym_num_typos",
	40: "pinned_hits",
	41: "hidden_hits",
	42: "override_tags",
	43: "highlight_fields",
	44: "split_join_tokens",
	45: "pre_segmented_query",
	46: "preset",
	47: "enable_overrides",
	48: "prioritize_exact_match",
	49: "max_candidates",
	50: "prioritize_token_position",
	51: "prioritize_num_matching_fields",
	52: "enable_typos_for_numerical_tokens",
	53: "exhaustive_search",
	54: "search_cutoff_ms",
	55: "use_cache",
	56: "cache_ttl",
	57: "min_len_1typo",
	58: "min_len_2typo",
	59: "vector_query",
	60: "remote_embedding_timeout_ms",
	61: "remote_embedding_num_tries",
	62: "facet_strategy",
	63: "stopwords",
	64: "facet_return_parent",
	65: "voice_query",
	66: "conversation",
	67: "conversation_model_id",
	68: "conversation_id",
}

// DecodeURI decodes SearchParameters from URI form.
func (s *SearchParameters) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchParameters to nil")
	}
	s.setDefaults()

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "q":
			if err := func() error {
				var sDotQVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotQVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Q.SetTo(sDotQVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"q\"")
			}
		case "query_by":
			if err := func() error {
				var sDotQueryByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotQueryByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.QueryBy.SetTo(sDotQueryByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query_by\"")
			}
		case "nl_query":
			if err := func() error {
				var sDotNlQueryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotNlQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.NlQuery.SetTo(sDotNlQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nl_query\"")
			}
		case "nl_model_id":
			if err := func() error {
				var sDotNlModelIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotNlModelIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.NlModelID.SetTo(sDotNlModelIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nl_model_id\"")
			}
		case "query_by_weights":
			if err := func() error {
				var sDotQueryByWeightsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotQueryByWeightsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.QueryByWeights.SetTo(sDotQueryByWeightsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query_by_weights\"")
			}
		case "text_match_type":
			if err := func() error {
				var sDotTextMatchTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotTextMatchTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.TextMatchType.SetTo(sDotTextMatchTypeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"text_match_type\"")
			}
		case "prefix":
			if err := func() error {
				var sDotPrefixVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPrefixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Prefix.SetTo(sDotPrefixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix\"")
			}
		case "infix":
			if err := func() error {
				var sDotInfixVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotInfixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Infix.SetTo(sDotInfixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"infix\"")
			}
		case "max_extra_prefix":
			if err := func() error {
				var sDotMaxExtraPrefixVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMaxExtraPrefixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MaxExtraPrefix.SetTo(sDotMaxExtraPrefixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_extra_prefix\"")
			}
		case "max_extra_suffix":
			if err := func() error {
				var sDotMaxExtraSuffixVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMaxExtraSuffixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MaxExtraSuffix.SetTo(sDotMaxExtraSuffixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_extra_suffix\"")
			}
		case "filter_by":
			if err := func() error {
				var sDotFilterByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFilterByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FilterBy.SetTo(sDotFilterByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter_by\"")
			}
		case "max_filter_by_candidates":
			if err := func() error {
				var sDotMaxFilterByCandidatesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMaxFilterByCandidatesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MaxFilterByCandidates.SetTo(sDotMaxFilterByCandidatesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_filter_by_candidates\"")
			}
		case "sort_by":
			if err := func() error {
				var sDotSortByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SortBy.SetTo(sDotSortByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort_by\"")
			}
		case "facet_by":
			if err := func() error {
				var sDotFacetByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFacetByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FacetBy.SetTo(sDotFacetByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facet_by\"")
			}
		case "max_facet_values":
			if err := func() error {
				var sDotMaxFacetValuesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMaxFacetValuesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MaxFacetValues.SetTo(sDotMaxFacetValuesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_facet_values\"")
			}
		case "facet_query":
			if err := func() error {
				var sDotFacetQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFacetQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FacetQuery.SetTo(sDotFacetQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facet_query\"")
			}
		case "num_typos":
			if err := func() error {
				var sDotNumTyposVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotNumTyposVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.NumTypos.SetTo(sDotNumTyposVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"num_typos\"")
			}
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "per_page":
			if err := func() error {
				var sDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PerPage.SetTo(sDotPerPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"per_page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "offset":
			if err := func() error {
				var sDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Offset.SetTo(sDotOffsetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"offset\"")
			}
		case "group_by":
			if err := func() error {
				var sDotGroupByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotGroupByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.GroupBy.SetTo(sDotGroupByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_by\"")
			}
		case "group_limit":
			if err := func() error {
				var sDotGroupLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotGroupLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.GroupLimit.SetTo(sDotGroupLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_limit\"")
			}
		case "group_missing_values":
			if err := func() error {
				var sDotGroupMissingValuesVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotGroupMissingValuesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.GroupMissingValues.SetTo(sDotGroupMissingValuesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_missing_values\"")
			}
		case "include_fields":
			if err := func() error {
				var sDotIncludeFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIncludeFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.IncludeFields.SetTo(sDotIncludeFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_fields\"")
			}
		case "exclude_fields":
			if err := func() error {
				var sDotExcludeFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotExcludeFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ExcludeFields.SetTo(sDotExcludeFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exclude_fields\"")
			}
		case "highlight_full_fields":
			if err := func() error {
				var sDotHighlightFullFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHighlightFullFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightFullFields.SetTo(sDotHighlightFullFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_full_fields\"")
			}
		case "highlight_affix_num_tokens":
			if err := func() error {
				var sDotHighlightAffixNumTokensVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotHighlightAffixNumTokensVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightAffixNumTokens.SetTo(sDotHighlightAffixNumTokensVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_affix_num_tokens\"")
			}
		case "highlight_start_tag":
			if err := func() error {
				var sDotHighlightStartTagVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHighlightStartTagVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightStartTag.SetTo(sDotHighlightStartTagVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_start_tag\"")
			}
		case "highlight_end_tag":
			if err := func() error {
				var sDotHighlightEndTagVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHighlightEndTagVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightEndTag.SetTo(sDotHighlightEndTagVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_end_tag\"")
			}
		case "enable_highlight_v1":
			if err := func() error {
				var sDotEnableHighlightV1Val bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableHighlightV1Val = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableHighlightV1.SetTo(sDotEnableHighlightV1Val)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_highlight_v1\"")
			}
		case "snippet_threshold":
			if err := func() error {
				var sDotSnippetThresholdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotSnippetThresholdVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SnippetThreshold.SetTo(sDotSnippetThresholdVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"snippet_threshold\"")
			}
		case "drop_tokens_threshold":
			if err := func() error {
				var sDotDropTokensThresholdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotDropTokensThresholdVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.DropTokensThreshold.SetTo(sDotDropTokensThresholdVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"drop_tokens_threshold\"")
			}
		case "drop_tokens_mode":
			if err := func() error {
				var sDotDropTokensModeVal DropTokensMode
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotDropTokensModeVal = DropTokensMode(c)
					return nil
				}(); err != nil {
					return err
				}
				s.DropTokensMode.SetTo(sDotDropTokensModeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"drop_tokens_mode\"")
			}
		case "typo_tokens_threshold":
			if err := func() error {
				var sDotTypoTokensThresholdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotTypoTokensThresholdVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.TypoTokensThreshold.SetTo(sDotTypoTokensThresholdVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"typo_tokens_threshold\"")
			}
		case "enable_typos_for_alpha_numerical_tokens":
			if err := func() error {
				var sDotEnableTyposForAlphaNumericalTokensVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableTyposForAlphaNumericalTokensVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableTyposForAlphaNumericalTokens.SetTo(sDotEnableTyposForAlphaNumericalTokensVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_typos_for_alpha_numerical_tokens\"")
			}
		case "filter_curated_hits":
			if err := func() error {
				var sDotFilterCuratedHitsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotFilterCuratedHitsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FilterCuratedHits.SetTo(sDotFilterCuratedHitsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter_curated_hits\"")
			}
		case "enable_synonyms":
			if err := func() error {
				var sDotEnableSynonymsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableSynonymsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableSynonyms.SetTo(sDotEnableSynonymsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_synonyms\"")
			}
		case "synonym_prefix":
			if err := func() error {
				var sDotSynonymPrefixVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotSynonymPrefixVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SynonymPrefix.SetTo(sDotSynonymPrefixVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"synonym_prefix\"")
			}
		case "synonym_num_typos":
			if err := func() error {
				var sDotSynonymNumTyposVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotSynonymNumTyposVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SynonymNumTypos.SetTo(sDotSynonymNumTyposVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"synonym_num_typos\"")
			}
		case "pinned_hits":
			if err := func() error {
				var sDotPinnedHitsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPinnedHitsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PinnedHits.SetTo(sDotPinnedHitsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pinned_hits\"")
			}
		case "hidden_hits":
			if err := func() error {
				var sDotHiddenHitsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHiddenHitsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HiddenHits.SetTo(sDotHiddenHitsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hidden_hits\"")
			}
		case "override_tags":
			if err := func() error {
				var sDotOverrideTagsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotOverrideTagsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.OverrideTags.SetTo(sDotOverrideTagsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"override_tags\"")
			}
		case "highlight_fields":
			if err := func() error {
				var sDotHighlightFieldsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHighlightFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HighlightFields.SetTo(sDotHighlightFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highlight_fields\"")
			}
		case "split_join_tokens":
			if err := func() error {
				var sDotSplitJoinTokensVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSplitJoinTokensVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SplitJoinTokens.SetTo(sDotSplitJoinTokensVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"split_join_tokens\"")
			}
		case "pre_segmented_query":
			if err := func() error {
				var sDotPreSegmentedQueryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotPreSegmentedQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PreSegmentedQuery.SetTo(sDotPreSegmentedQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pre_segmented_query\"")
			}
		case "preset":
			if err := func() error {
				var sDotPresetVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPresetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Preset.SetTo(sDotPresetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"preset\"")
			}
		case "enable_overrides":
			if err := func() error {
				var sDotEnableOverridesVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableOverridesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableOverrides.SetTo(sDotEnableOverridesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_overrides\"")
			}
		case "prioritize_exact_match":
			if err := func() error {
				var sDotPrioritizeExactMatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotPrioritizeExactMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PrioritizeExactMatch.SetTo(sDotPrioritizeExactMatchVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prioritize_exact_match\"")
			}
		case "max_candidates":
			if err := func() error {
				var sDotMaxCandidatesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMaxCandidatesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MaxCandidates.SetTo(sDotMaxCandidatesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_candidates\"")
			}
		case "prioritize_token_position":
			if err := func() error {
				var sDotPrioritizeTokenPositionVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotPrioritizeTokenPositionVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PrioritizeTokenPosition.SetTo(sDotPrioritizeTokenPositionVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prioritize_token_position\"")
			}
		case "prioritize_num_matching_fields":
			if err := func() error {
				var sDotPrioritizeNumMatchingFieldsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotPrioritizeNumMatchingFieldsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PrioritizeNumMatchingFields.SetTo(sDotPrioritizeNumMatchingFieldsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prioritize_num_matching_fields\"")
			}
		case "enable_typos_for_numerical_tokens":
			if err := func() error {
				var sDotEnableTyposForNumericalTokensVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotEnableTyposForNumericalTokensVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.EnableTyposForNumericalTokens.SetTo(sDotEnableTyposForNumericalTokensVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_typos_for_numerical_tokens\"")
			}
		case "exhaustive_search":
			if err := func() error {
				var sDotExhaustiveSearchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotExhaustiveSearchVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ExhaustiveSearch.SetTo(sDotExhaustiveSearchVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exhaustive_search\"")
			}
		case "search_cutoff_ms":
			if err := func() error {
				var sDotSearchCutoffMsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotSearchCutoffMsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.SearchCutoffMs.SetTo(sDotSearchCutoffMsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"search_cutoff_ms\"")
			}
		case "use_cache":
			if err := func() error {
				var sDotUseCacheVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotUseCacheVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.UseCache.SetTo(sDotUseCacheVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_cache\"")
			}
		case "cache_ttl":
			if err := func() error {
				var sDotCacheTTLVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotCacheTTLVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CacheTTL.SetTo(sDotCacheTTLVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cache_ttl\"")
			}
		case "min_len_1typo":
			if err := func() error {
				var sDotMinLen1typoVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMinLen1typoVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MinLen1typo.SetTo(sDotMinLen1typoVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min_len_1typo\"")
			}
		case "min_len_2typo":
			if err := func() error {
				var sDotMinLen2typoVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotMinLen2typoVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.MinLen2typo.SetTo(sDotMinLen2typoVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min_len_2typo\"")
			}
		case "vector_query":
			if err := func() error {
				var sDotVectorQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotVectorQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.VectorQuery.SetTo(sDotVectorQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vector_query\"")
			}
		case "remote_embedding_timeout_ms":
			if err := func() error {
				var sDotRemoteEmbeddingTimeoutMsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotRemoteEmbeddingTimeoutMsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.RemoteEmbeddingTimeoutMs.SetTo(sDotRemoteEmbeddingTimeoutMsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_embedding_timeout_ms\"")
			}
		case "remote_embedding_num_tries":
			if err := func() error {
				var sDotRemoteEmbeddingNumTriesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotRemoteEmbeddingNumTriesVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.RemoteEmbeddingNumTries.SetTo(sDotRemoteEmbeddingNumTriesVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_embedding_num_tries\"")
			}
		case "facet_strategy":
			if err := func() error {
				var sDotFacetStrategyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFacetStrategyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FacetStrategy.SetTo(sDotFacetStrategyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facet_strategy\"")
			}
		case "stopwords":
			if err := func() error {
				var sDotStopwordsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStopwordsVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Stopwords.SetTo(sDotStopwordsVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stopwords\"")
			}
		case "facet_return_parent":
			if err := func() error {
				var sDotFacetReturnParentVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFacetReturnParentVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FacetReturnParent.SetTo(sDotFacetReturnParentVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facet_return_parent\"")
			}
		case "voice_query":
			if err := func() error {
				var sDotVoiceQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotVoiceQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.VoiceQuery.SetTo(sDotVoiceQueryVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_query\"")
			}
		case "conversation":
			if err := func() error {
				var sDotConversationVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotConversationVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Conversation.SetTo(sDotConversationVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"conversation\"")
			}
		case "conversation_model_id":
			if err := func() error {
				var sDotConversationModelIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotConversationModelIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ConversationModelID.SetTo(sDotConversationModelIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"conversation_model_id\"")
			}
		case "conversation_id":
			if err := func() error {
				var sDotConversationIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotConversationIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ConversationID.SetTo(sDotConversationIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"conversation_id\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchParameters")
	}

	return nil
}

// EncodeURI encodes UpdateDocumentsUpdateDocumentsParameters as URI form.
func (s *UpdateDocumentsUpdateDocumentsParameters) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("filter_by", func(e uri.Encoder) error {
		if val, ok := s.FilterBy.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"filter_by\"")
	}
	return nil
}

var uriFieldsNameOfUpdateDocumentsUpdateDocumentsParameters = [1]string{
	0: "filter_by",
}

// DecodeURI decodes UpdateDocumentsUpdateDocumentsParameters from URI form.
func (s *UpdateDocumentsUpdateDocumentsParameters) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateDocumentsUpdateDocumentsParameters to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "filter_by":
			if err := func() error {
				var sDotFilterByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFilterByVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FilterBy.SetTo(sDotFilterByVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter_by\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateDocumentsUpdateDocumentsParameters")
	}

	return nil
}
