// Code generated by ogen, DO NOT EDIT.

package typesense

import (
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type APIKeyHeader struct {
	APIKey string
	Roles  []string
}

// GetAPIKey returns the value of APIKey.
func (s *APIKeyHeader) GetAPIKey() string {
	return s.APIKey
}

// GetRoles returns the value of Roles.
func (s *APIKeyHeader) GetRoles() []string {
	return s.Roles
}

// SetAPIKey sets the value of APIKey.
func (s *APIKeyHeader) SetAPIKey(val string) {
	s.APIKey = val
}

// SetRoles sets the value of Roles.
func (s *APIKeyHeader) SetRoles(val []string) {
	s.Roles = val
}

// Ref: #/components/schemas/APIStatsResponse
type APIStatsResponse struct {
	DeleteLatencyMs             OptFloat64                         `json:"delete_latency_ms"`
	DeleteRequestsPerSecond     OptFloat64                         `json:"delete_requests_per_second"`
	ImportLatencyMs             OptFloat64                         `json:"import_latency_ms"`
	ImportRequestsPerSecond     OptFloat64                         `json:"import_requests_per_second"`
	LatencyMs                   *APIStatsResponseLatencyMs         `json:"latency_ms"`
	OverloadedRequestsPerSecond OptFloat64                         `json:"overloaded_requests_per_second"`
	PendingWriteBatches         OptFloat64                         `json:"pending_write_batches"`
	RequestsPerSecond           *APIStatsResponseRequestsPerSecond `json:"requests_per_second"`
	SearchLatencyMs             OptFloat64                         `json:"search_latency_ms"`
	SearchRequestsPerSecond     OptFloat64                         `json:"search_requests_per_second"`
	TotalRequestsPerSecond      OptFloat64                         `json:"total_requests_per_second"`
	WriteLatencyMs              OptFloat64                         `json:"write_latency_ms"`
	WriteRequestsPerSecond      OptFloat64                         `json:"write_requests_per_second"`
}

// GetDeleteLatencyMs returns the value of DeleteLatencyMs.
func (s *APIStatsResponse) GetDeleteLatencyMs() OptFloat64 {
	return s.DeleteLatencyMs
}

// GetDeleteRequestsPerSecond returns the value of DeleteRequestsPerSecond.
func (s *APIStatsResponse) GetDeleteRequestsPerSecond() OptFloat64 {
	return s.DeleteRequestsPerSecond
}

// GetImportLatencyMs returns the value of ImportLatencyMs.
func (s *APIStatsResponse) GetImportLatencyMs() OptFloat64 {
	return s.ImportLatencyMs
}

// GetImportRequestsPerSecond returns the value of ImportRequestsPerSecond.
func (s *APIStatsResponse) GetImportRequestsPerSecond() OptFloat64 {
	return s.ImportRequestsPerSecond
}

// GetLatencyMs returns the value of LatencyMs.
func (s *APIStatsResponse) GetLatencyMs() *APIStatsResponseLatencyMs {
	return s.LatencyMs
}

// GetOverloadedRequestsPerSecond returns the value of OverloadedRequestsPerSecond.
func (s *APIStatsResponse) GetOverloadedRequestsPerSecond() OptFloat64 {
	return s.OverloadedRequestsPerSecond
}

// GetPendingWriteBatches returns the value of PendingWriteBatches.
func (s *APIStatsResponse) GetPendingWriteBatches() OptFloat64 {
	return s.PendingWriteBatches
}

// GetRequestsPerSecond returns the value of RequestsPerSecond.
func (s *APIStatsResponse) GetRequestsPerSecond() *APIStatsResponseRequestsPerSecond {
	return s.RequestsPerSecond
}

// GetSearchLatencyMs returns the value of SearchLatencyMs.
func (s *APIStatsResponse) GetSearchLatencyMs() OptFloat64 {
	return s.SearchLatencyMs
}

// GetSearchRequestsPerSecond returns the value of SearchRequestsPerSecond.
func (s *APIStatsResponse) GetSearchRequestsPerSecond() OptFloat64 {
	return s.SearchRequestsPerSecond
}

// GetTotalRequestsPerSecond returns the value of TotalRequestsPerSecond.
func (s *APIStatsResponse) GetTotalRequestsPerSecond() OptFloat64 {
	return s.TotalRequestsPerSecond
}

// GetWriteLatencyMs returns the value of WriteLatencyMs.
func (s *APIStatsResponse) GetWriteLatencyMs() OptFloat64 {
	return s.WriteLatencyMs
}

// GetWriteRequestsPerSecond returns the value of WriteRequestsPerSecond.
func (s *APIStatsResponse) GetWriteRequestsPerSecond() OptFloat64 {
	return s.WriteRequestsPerSecond
}

// SetDeleteLatencyMs sets the value of DeleteLatencyMs.
func (s *APIStatsResponse) SetDeleteLatencyMs(val OptFloat64) {
	s.DeleteLatencyMs = val
}

// SetDeleteRequestsPerSecond sets the value of DeleteRequestsPerSecond.
func (s *APIStatsResponse) SetDeleteRequestsPerSecond(val OptFloat64) {
	s.DeleteRequestsPerSecond = val
}

// SetImportLatencyMs sets the value of ImportLatencyMs.
func (s *APIStatsResponse) SetImportLatencyMs(val OptFloat64) {
	s.ImportLatencyMs = val
}

// SetImportRequestsPerSecond sets the value of ImportRequestsPerSecond.
func (s *APIStatsResponse) SetImportRequestsPerSecond(val OptFloat64) {
	s.ImportRequestsPerSecond = val
}

// SetLatencyMs sets the value of LatencyMs.
func (s *APIStatsResponse) SetLatencyMs(val *APIStatsResponseLatencyMs) {
	s.LatencyMs = val
}

// SetOverloadedRequestsPerSecond sets the value of OverloadedRequestsPerSecond.
func (s *APIStatsResponse) SetOverloadedRequestsPerSecond(val OptFloat64) {
	s.OverloadedRequestsPerSecond = val
}

// SetPendingWriteBatches sets the value of PendingWriteBatches.
func (s *APIStatsResponse) SetPendingWriteBatches(val OptFloat64) {
	s.PendingWriteBatches = val
}

// SetRequestsPerSecond sets the value of RequestsPerSecond.
func (s *APIStatsResponse) SetRequestsPerSecond(val *APIStatsResponseRequestsPerSecond) {
	s.RequestsPerSecond = val
}

// SetSearchLatencyMs sets the value of SearchLatencyMs.
func (s *APIStatsResponse) SetSearchLatencyMs(val OptFloat64) {
	s.SearchLatencyMs = val
}

// SetSearchRequestsPerSecond sets the value of SearchRequestsPerSecond.
func (s *APIStatsResponse) SetSearchRequestsPerSecond(val OptFloat64) {
	s.SearchRequestsPerSecond = val
}

// SetTotalRequestsPerSecond sets the value of TotalRequestsPerSecond.
func (s *APIStatsResponse) SetTotalRequestsPerSecond(val OptFloat64) {
	s.TotalRequestsPerSecond = val
}

// SetWriteLatencyMs sets the value of WriteLatencyMs.
func (s *APIStatsResponse) SetWriteLatencyMs(val OptFloat64) {
	s.WriteLatencyMs = val
}

// SetWriteRequestsPerSecond sets the value of WriteRequestsPerSecond.
func (s *APIStatsResponse) SetWriteRequestsPerSecond(val OptFloat64) {
	s.WriteRequestsPerSecond = val
}

type APIStatsResponseLatencyMs struct{}

type APIStatsResponseRequestsPerSecond struct{}

// Ref: #/components/schemas/AnalyticsEventCreateResponse
type AnalyticsEventCreateResponse struct {
	Ok bool `json:"ok"`
}

// GetOk returns the value of Ok.
func (s *AnalyticsEventCreateResponse) GetOk() bool {
	return s.Ok
}

// SetOk sets the value of Ok.
func (s *AnalyticsEventCreateResponse) SetOk(val bool) {
	s.Ok = val
}

func (*AnalyticsEventCreateResponse) createAnalyticsEventRes() {}

// Ref: #/components/schemas/AnalyticsEventCreateSchema
type AnalyticsEventCreateSchema struct {
	Type string                         `json:"type"`
	Name string                         `json:"name"`
	Data AnalyticsEventCreateSchemaData `json:"data"`
}

// GetType returns the value of Type.
func (s *AnalyticsEventCreateSchema) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *AnalyticsEventCreateSchema) GetName() string {
	return s.Name
}

// GetData returns the value of Data.
func (s *AnalyticsEventCreateSchema) GetData() AnalyticsEventCreateSchemaData {
	return s.Data
}

// SetType sets the value of Type.
func (s *AnalyticsEventCreateSchema) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *AnalyticsEventCreateSchema) SetName(val string) {
	s.Name = val
}

// SetData sets the value of Data.
func (s *AnalyticsEventCreateSchema) SetData(val AnalyticsEventCreateSchemaData) {
	s.Data = val
}

type AnalyticsEventCreateSchemaData struct{}

// Ref: #/components/schemas/AnalyticsRuleDeleteResponse
type AnalyticsRuleDeleteResponse struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *AnalyticsRuleDeleteResponse) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *AnalyticsRuleDeleteResponse) SetName(val string) {
	s.Name = val
}

func (*AnalyticsRuleDeleteResponse) deleteAnalyticsRuleRes() {}

// Ref: #/components/schemas/AnalyticsRuleParameters
type AnalyticsRuleParameters struct {
	Source      AnalyticsRuleParametersSource      `json:"source"`
	Destination AnalyticsRuleParametersDestination `json:"destination"`
	Limit       OptInt                             `json:"limit"`
	ExpandQuery OptBool                            `json:"expand_query"`
}

// GetSource returns the value of Source.
func (s *AnalyticsRuleParameters) GetSource() AnalyticsRuleParametersSource {
	return s.Source
}

// GetDestination returns the value of Destination.
func (s *AnalyticsRuleParameters) GetDestination() AnalyticsRuleParametersDestination {
	return s.Destination
}

// GetLimit returns the value of Limit.
func (s *AnalyticsRuleParameters) GetLimit() OptInt {
	return s.Limit
}

// GetExpandQuery returns the value of ExpandQuery.
func (s *AnalyticsRuleParameters) GetExpandQuery() OptBool {
	return s.ExpandQuery
}

// SetSource sets the value of Source.
func (s *AnalyticsRuleParameters) SetSource(val AnalyticsRuleParametersSource) {
	s.Source = val
}

// SetDestination sets the value of Destination.
func (s *AnalyticsRuleParameters) SetDestination(val AnalyticsRuleParametersDestination) {
	s.Destination = val
}

// SetLimit sets the value of Limit.
func (s *AnalyticsRuleParameters) SetLimit(val OptInt) {
	s.Limit = val
}

// SetExpandQuery sets the value of ExpandQuery.
func (s *AnalyticsRuleParameters) SetExpandQuery(val OptBool) {
	s.ExpandQuery = val
}

// Ref: #/components/schemas/AnalyticsRuleParametersDestination
type AnalyticsRuleParametersDestination struct {
	Collection   string    `json:"collection"`
	CounterField OptString `json:"counter_field"`
}

// GetCollection returns the value of Collection.
func (s *AnalyticsRuleParametersDestination) GetCollection() string {
	return s.Collection
}

// GetCounterField returns the value of CounterField.
func (s *AnalyticsRuleParametersDestination) GetCounterField() OptString {
	return s.CounterField
}

// SetCollection sets the value of Collection.
func (s *AnalyticsRuleParametersDestination) SetCollection(val string) {
	s.Collection = val
}

// SetCounterField sets the value of CounterField.
func (s *AnalyticsRuleParametersDestination) SetCounterField(val OptString) {
	s.CounterField = val
}

// Ref: #/components/schemas/AnalyticsRuleParametersSource
type AnalyticsRuleParametersSource struct {
	Collections []string                                  `json:"collections"`
	Events      []AnalyticsRuleParametersSourceEventsItem `json:"events"`
}

// GetCollections returns the value of Collections.
func (s *AnalyticsRuleParametersSource) GetCollections() []string {
	return s.Collections
}

// GetEvents returns the value of Events.
func (s *AnalyticsRuleParametersSource) GetEvents() []AnalyticsRuleParametersSourceEventsItem {
	return s.Events
}

// SetCollections sets the value of Collections.
func (s *AnalyticsRuleParametersSource) SetCollections(val []string) {
	s.Collections = val
}

// SetEvents sets the value of Events.
func (s *AnalyticsRuleParametersSource) SetEvents(val []AnalyticsRuleParametersSourceEventsItem) {
	s.Events = val
}

type AnalyticsRuleParametersSourceEventsItem struct {
	Type   string  `json:"type"`
	Weight float32 `json:"weight"`
	Name   string  `json:"name"`
}

// GetType returns the value of Type.
func (s *AnalyticsRuleParametersSourceEventsItem) GetType() string {
	return s.Type
}

// GetWeight returns the value of Weight.
func (s *AnalyticsRuleParametersSourceEventsItem) GetWeight() float32 {
	return s.Weight
}

// GetName returns the value of Name.
func (s *AnalyticsRuleParametersSourceEventsItem) GetName() string {
	return s.Name
}

// SetType sets the value of Type.
func (s *AnalyticsRuleParametersSourceEventsItem) SetType(val string) {
	s.Type = val
}

// SetWeight sets the value of Weight.
func (s *AnalyticsRuleParametersSourceEventsItem) SetWeight(val float32) {
	s.Weight = val
}

// SetName sets the value of Name.
func (s *AnalyticsRuleParametersSourceEventsItem) SetName(val string) {
	s.Name = val
}

// Merged schema.
// Ref: #/components/schemas/AnalyticsRuleSchema
type AnalyticsRuleSchema struct {
	Type   AnalyticsRuleSchemaType `json:"type"`
	Params AnalyticsRuleParameters `json:"params"`
	Name   string                  `json:"name"`
}

// GetType returns the value of Type.
func (s *AnalyticsRuleSchema) GetType() AnalyticsRuleSchemaType {
	return s.Type
}

// GetParams returns the value of Params.
func (s *AnalyticsRuleSchema) GetParams() AnalyticsRuleParameters {
	return s.Params
}

// GetName returns the value of Name.
func (s *AnalyticsRuleSchema) GetName() string {
	return s.Name
}

// SetType sets the value of Type.
func (s *AnalyticsRuleSchema) SetType(val AnalyticsRuleSchemaType) {
	s.Type = val
}

// SetParams sets the value of Params.
func (s *AnalyticsRuleSchema) SetParams(val AnalyticsRuleParameters) {
	s.Params = val
}

// SetName sets the value of Name.
func (s *AnalyticsRuleSchema) SetName(val string) {
	s.Name = val
}

func (*AnalyticsRuleSchema) createAnalyticsRuleRes()   {}
func (*AnalyticsRuleSchema) retrieveAnalyticsRuleRes() {}
func (*AnalyticsRuleSchema) upsertAnalyticsRuleRes()   {}

type AnalyticsRuleSchemaType string

const (
	AnalyticsRuleSchemaTypePopularQueries AnalyticsRuleSchemaType = "popular_queries"
	AnalyticsRuleSchemaTypeNohitsQueries  AnalyticsRuleSchemaType = "nohits_queries"
	AnalyticsRuleSchemaTypeCounter        AnalyticsRuleSchemaType = "counter"
)

// AllValues returns all AnalyticsRuleSchemaType values.
func (AnalyticsRuleSchemaType) AllValues() []AnalyticsRuleSchemaType {
	return []AnalyticsRuleSchemaType{
		AnalyticsRuleSchemaTypePopularQueries,
		AnalyticsRuleSchemaTypeNohitsQueries,
		AnalyticsRuleSchemaTypeCounter,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnalyticsRuleSchemaType) MarshalText() ([]byte, error) {
	switch s {
	case AnalyticsRuleSchemaTypePopularQueries:
		return []byte(s), nil
	case AnalyticsRuleSchemaTypeNohitsQueries:
		return []byte(s), nil
	case AnalyticsRuleSchemaTypeCounter:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnalyticsRuleSchemaType) UnmarshalText(data []byte) error {
	switch AnalyticsRuleSchemaType(data) {
	case AnalyticsRuleSchemaTypePopularQueries:
		*s = AnalyticsRuleSchemaTypePopularQueries
		return nil
	case AnalyticsRuleSchemaTypeNohitsQueries:
		*s = AnalyticsRuleSchemaTypeNohitsQueries
		return nil
	case AnalyticsRuleSchemaTypeCounter:
		*s = AnalyticsRuleSchemaTypeCounter
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AnalyticsRuleUpsertSchema
type AnalyticsRuleUpsertSchema struct {
	Type   AnalyticsRuleUpsertSchemaType `json:"type"`
	Params AnalyticsRuleParameters       `json:"params"`
}

// GetType returns the value of Type.
func (s *AnalyticsRuleUpsertSchema) GetType() AnalyticsRuleUpsertSchemaType {
	return s.Type
}

// GetParams returns the value of Params.
func (s *AnalyticsRuleUpsertSchema) GetParams() AnalyticsRuleParameters {
	return s.Params
}

// SetType sets the value of Type.
func (s *AnalyticsRuleUpsertSchema) SetType(val AnalyticsRuleUpsertSchemaType) {
	s.Type = val
}

// SetParams sets the value of Params.
func (s *AnalyticsRuleUpsertSchema) SetParams(val AnalyticsRuleParameters) {
	s.Params = val
}

type AnalyticsRuleUpsertSchemaType string

const (
	AnalyticsRuleUpsertSchemaTypePopularQueries AnalyticsRuleUpsertSchemaType = "popular_queries"
	AnalyticsRuleUpsertSchemaTypeNohitsQueries  AnalyticsRuleUpsertSchemaType = "nohits_queries"
	AnalyticsRuleUpsertSchemaTypeCounter        AnalyticsRuleUpsertSchemaType = "counter"
)

// AllValues returns all AnalyticsRuleUpsertSchemaType values.
func (AnalyticsRuleUpsertSchemaType) AllValues() []AnalyticsRuleUpsertSchemaType {
	return []AnalyticsRuleUpsertSchemaType{
		AnalyticsRuleUpsertSchemaTypePopularQueries,
		AnalyticsRuleUpsertSchemaTypeNohitsQueries,
		AnalyticsRuleUpsertSchemaTypeCounter,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnalyticsRuleUpsertSchemaType) MarshalText() ([]byte, error) {
	switch s {
	case AnalyticsRuleUpsertSchemaTypePopularQueries:
		return []byte(s), nil
	case AnalyticsRuleUpsertSchemaTypeNohitsQueries:
		return []byte(s), nil
	case AnalyticsRuleUpsertSchemaTypeCounter:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnalyticsRuleUpsertSchemaType) UnmarshalText(data []byte) error {
	switch AnalyticsRuleUpsertSchemaType(data) {
	case AnalyticsRuleUpsertSchemaTypePopularQueries:
		*s = AnalyticsRuleUpsertSchemaTypePopularQueries
		return nil
	case AnalyticsRuleUpsertSchemaTypeNohitsQueries:
		*s = AnalyticsRuleUpsertSchemaTypeNohitsQueries
		return nil
	case AnalyticsRuleUpsertSchemaTypeCounter:
		*s = AnalyticsRuleUpsertSchemaTypeCounter
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AnalyticsRulesRetrieveSchema
type AnalyticsRulesRetrieveSchema struct {
	Rules []AnalyticsRuleSchema `json:"rules"`
}

// GetRules returns the value of Rules.
func (s *AnalyticsRulesRetrieveSchema) GetRules() []AnalyticsRuleSchema {
	return s.Rules
}

// SetRules sets the value of Rules.
func (s *AnalyticsRulesRetrieveSchema) SetRules(val []AnalyticsRuleSchema) {
	s.Rules = val
}

// Merged schema.
// Ref: #/components/schemas/ApiKey
type ApiKey struct {
	Value       OptString `json:"value"`
	Description string    `json:"description"`
	Actions     []string  `json:"actions"`
	Collections []string  `json:"collections"`
	ExpiresAt   OptInt64  `json:"expires_at"`
	ID          OptInt64  `json:"id"`
	ValuePrefix OptString `json:"value_prefix"`
}

// GetValue returns the value of Value.
func (s *ApiKey) GetValue() OptString {
	return s.Value
}

// GetDescription returns the value of Description.
func (s *ApiKey) GetDescription() string {
	return s.Description
}

// GetActions returns the value of Actions.
func (s *ApiKey) GetActions() []string {
	return s.Actions
}

// GetCollections returns the value of Collections.
func (s *ApiKey) GetCollections() []string {
	return s.Collections
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *ApiKey) GetExpiresAt() OptInt64 {
	return s.ExpiresAt
}

// GetID returns the value of ID.
func (s *ApiKey) GetID() OptInt64 {
	return s.ID
}

// GetValuePrefix returns the value of ValuePrefix.
func (s *ApiKey) GetValuePrefix() OptString {
	return s.ValuePrefix
}

// SetValue sets the value of Value.
func (s *ApiKey) SetValue(val OptString) {
	s.Value = val
}

// SetDescription sets the value of Description.
func (s *ApiKey) SetDescription(val string) {
	s.Description = val
}

// SetActions sets the value of Actions.
func (s *ApiKey) SetActions(val []string) {
	s.Actions = val
}

// SetCollections sets the value of Collections.
func (s *ApiKey) SetCollections(val []string) {
	s.Collections = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *ApiKey) SetExpiresAt(val OptInt64) {
	s.ExpiresAt = val
}

// SetID sets the value of ID.
func (s *ApiKey) SetID(val OptInt64) {
	s.ID = val
}

// SetValuePrefix sets the value of ValuePrefix.
func (s *ApiKey) SetValuePrefix(val OptString) {
	s.ValuePrefix = val
}

func (*ApiKey) createKeyRes() {}
func (*ApiKey) getKeyRes()    {}

// Ref: #/components/schemas/ApiKeyDeleteResponse
type ApiKeyDeleteResponse struct {
	// The id of the API key that was deleted.
	ID int64 `json:"id"`
}

// GetID returns the value of ID.
func (s *ApiKeyDeleteResponse) GetID() int64 {
	return s.ID
}

// SetID sets the value of ID.
func (s *ApiKeyDeleteResponse) SetID(val int64) {
	s.ID = val
}

func (*ApiKeyDeleteResponse) deleteKeyRes() {}

// Ref: #/components/schemas/ApiKeySchema
type ApiKeySchema struct {
	Value       OptString `json:"value"`
	Description string    `json:"description"`
	Actions     []string  `json:"actions"`
	Collections []string  `json:"collections"`
	ExpiresAt   OptInt64  `json:"expires_at"`
}

// GetValue returns the value of Value.
func (s *ApiKeySchema) GetValue() OptString {
	return s.Value
}

// GetDescription returns the value of Description.
func (s *ApiKeySchema) GetDescription() string {
	return s.Description
}

// GetActions returns the value of Actions.
func (s *ApiKeySchema) GetActions() []string {
	return s.Actions
}

// GetCollections returns the value of Collections.
func (s *ApiKeySchema) GetCollections() []string {
	return s.Collections
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *ApiKeySchema) GetExpiresAt() OptInt64 {
	return s.ExpiresAt
}

// SetValue sets the value of Value.
func (s *ApiKeySchema) SetValue(val OptString) {
	s.Value = val
}

// SetDescription sets the value of Description.
func (s *ApiKeySchema) SetDescription(val string) {
	s.Description = val
}

// SetActions sets the value of Actions.
func (s *ApiKeySchema) SetActions(val []string) {
	s.Actions = val
}

// SetCollections sets the value of Collections.
func (s *ApiKeySchema) SetCollections(val []string) {
	s.Collections = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *ApiKeySchema) SetExpiresAt(val OptInt64) {
	s.ExpiresAt = val
}

// Ref: #/components/schemas/ApiKeysResponse
type ApiKeysResponse struct {
	Keys []ApiKey `json:"keys"`
}

// GetKeys returns the value of Keys.
func (s *ApiKeysResponse) GetKeys() []ApiKey {
	return s.Keys
}

// SetKeys sets the value of Keys.
func (s *ApiKeysResponse) SetKeys(val []ApiKey) {
	s.Keys = val
}

// Ref: #/components/schemas/ApiResponse
type ApiResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ApiResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ApiResponse) SetMessage(val string) {
	s.Message = val
}

func (*ApiResponse) createAnalyticsEventRes()     {}
func (*ApiResponse) createAnalyticsRuleRes()      {}
func (*ApiResponse) createConversationModelRes()  {}
func (*ApiResponse) createNLSearchModelRes()      {}
func (*ApiResponse) deleteAliasRes()              {}
func (*ApiResponse) deleteAnalyticsRuleRes()      {}
func (*ApiResponse) deleteCollectionRes()         {}
func (*ApiResponse) deleteDocumentRes()           {}
func (*ApiResponse) deleteDocumentsRes()          {}
func (*ApiResponse) deleteNLSearchModelRes()      {}
func (*ApiResponse) deletePresetRes()             {}
func (*ApiResponse) deleteSearchOverrideRes()     {}
func (*ApiResponse) deleteSearchSynonymRes()      {}
func (*ApiResponse) deleteStopwordsSetRes()       {}
func (*ApiResponse) exportDocumentsRes()          {}
func (*ApiResponse) getAliasRes()                 {}
func (*ApiResponse) getCollectionRes()            {}
func (*ApiResponse) getDocumentRes()              {}
func (*ApiResponse) getKeyRes()                   {}
func (*ApiResponse) getSearchSynonymRes()         {}
func (*ApiResponse) getSearchSynonymsRes()        {}
func (*ApiResponse) getStemmingDictionaryRes()    {}
func (*ApiResponse) importStemmingDictionaryRes() {}
func (*ApiResponse) indexDocumentRes()            {}
func (*ApiResponse) multiSearchRes()              {}
func (*ApiResponse) retrieveAnalyticsRuleRes()    {}
func (*ApiResponse) retrieveNLSearchModelRes()    {}
func (*ApiResponse) retrievePresetRes()           {}
func (*ApiResponse) retrieveStopwordsSetRes()     {}
func (*ApiResponse) updateDocumentRes()           {}
func (*ApiResponse) upsertAnalyticsRuleRes()      {}
func (*ApiResponse) upsertPresetRes()             {}
func (*ApiResponse) upsertSearchOverrideRes()     {}
func (*ApiResponse) upsertSearchSynonymRes()      {}
func (*ApiResponse) upsertStopwordsSetRes()       {}

// Ref: #/components/schemas/CollectionAlias
type CollectionAlias struct {
	// Name of the collection alias.
	Name string `json:"name"`
	// Name of the collection the alias mapped to.
	CollectionName string `json:"collection_name"`
}

// GetName returns the value of Name.
func (s *CollectionAlias) GetName() string {
	return s.Name
}

// GetCollectionName returns the value of CollectionName.
func (s *CollectionAlias) GetCollectionName() string {
	return s.CollectionName
}

// SetName sets the value of Name.
func (s *CollectionAlias) SetName(val string) {
	s.Name = val
}

// SetCollectionName sets the value of CollectionName.
func (s *CollectionAlias) SetCollectionName(val string) {
	s.CollectionName = val
}

func (*CollectionAlias) deleteAliasRes() {}
func (*CollectionAlias) getAliasRes()    {}
func (*CollectionAlias) upsertAliasRes() {}

// Ref: #/components/schemas/CollectionAliasSchema
type CollectionAliasSchema struct {
	// Name of the collection you wish to map the alias to.
	CollectionName string `json:"collection_name"`
}

// GetCollectionName returns the value of CollectionName.
func (s *CollectionAliasSchema) GetCollectionName() string {
	return s.CollectionName
}

// SetCollectionName sets the value of CollectionName.
func (s *CollectionAliasSchema) SetCollectionName(val string) {
	s.CollectionName = val
}

// Ref: #/components/schemas/CollectionAliasesResponse
type CollectionAliasesResponse struct {
	Aliases []CollectionAlias `json:"aliases"`
}

// GetAliases returns the value of Aliases.
func (s *CollectionAliasesResponse) GetAliases() []CollectionAlias {
	return s.Aliases
}

// SetAliases sets the value of Aliases.
func (s *CollectionAliasesResponse) SetAliases(val []CollectionAlias) {
	s.Aliases = val
}

// Merged schema.
// Ref: #/components/schemas/CollectionResponse
type CollectionResponse struct {
	// Name of the collection.
	Name string `json:"name"`
	// A list of fields for querying, filtering and faceting.
	Fields []Field `json:"fields"`
	// The name of an int32 / float field that determines the order in which the search results are
	// ranked when a sort_by clause is not provided during searching. This field must indicate some kind
	// of popularity.
	DefaultSortingField OptString `json:"default_sorting_field"`
	// List of symbols or special characters to be used for splitting the text into individual words in
	// addition to space and new-line characters.
	TokenSeparators []string `json:"token_separators"`
	// Enables experimental support at a collection level for nested object or object array fields. This
	// field is only available if the Typesense server is version `0.24.0.rcn34` or later.
	EnableNestedFields OptBool `json:"enable_nested_fields"`
	// List of symbols or special characters to be indexed.
	SymbolsToIndex  []string                           `json:"symbols_to_index"`
	VoiceQueryModel OptVoiceQueryModelCollectionConfig `json:"voice_query_model"`
	// Optional details about the collection, e.g., when it was created, who created it etc.
	Metadata *CollectionResponseMetadata `json:"metadata"`
	// Number of documents in the collection.
	NumDocuments int64 `json:"num_documents"`
	// Timestamp of when the collection was created (Unix epoch in seconds).
	CreatedAt int64 `json:"created_at"`
}

// GetName returns the value of Name.
func (s *CollectionResponse) GetName() string {
	return s.Name
}

// GetFields returns the value of Fields.
func (s *CollectionResponse) GetFields() []Field {
	return s.Fields
}

// GetDefaultSortingField returns the value of DefaultSortingField.
func (s *CollectionResponse) GetDefaultSortingField() OptString {
	return s.DefaultSortingField
}

// GetTokenSeparators returns the value of TokenSeparators.
func (s *CollectionResponse) GetTokenSeparators() []string {
	return s.TokenSeparators
}

// GetEnableNestedFields returns the value of EnableNestedFields.
func (s *CollectionResponse) GetEnableNestedFields() OptBool {
	return s.EnableNestedFields
}

// GetSymbolsToIndex returns the value of SymbolsToIndex.
func (s *CollectionResponse) GetSymbolsToIndex() []string {
	return s.SymbolsToIndex
}

// GetVoiceQueryModel returns the value of VoiceQueryModel.
func (s *CollectionResponse) GetVoiceQueryModel() OptVoiceQueryModelCollectionConfig {
	return s.VoiceQueryModel
}

// GetMetadata returns the value of Metadata.
func (s *CollectionResponse) GetMetadata() *CollectionResponseMetadata {
	return s.Metadata
}

// GetNumDocuments returns the value of NumDocuments.
func (s *CollectionResponse) GetNumDocuments() int64 {
	return s.NumDocuments
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CollectionResponse) GetCreatedAt() int64 {
	return s.CreatedAt
}

// SetName sets the value of Name.
func (s *CollectionResponse) SetName(val string) {
	s.Name = val
}

// SetFields sets the value of Fields.
func (s *CollectionResponse) SetFields(val []Field) {
	s.Fields = val
}

// SetDefaultSortingField sets the value of DefaultSortingField.
func (s *CollectionResponse) SetDefaultSortingField(val OptString) {
	s.DefaultSortingField = val
}

// SetTokenSeparators sets the value of TokenSeparators.
func (s *CollectionResponse) SetTokenSeparators(val []string) {
	s.TokenSeparators = val
}

// SetEnableNestedFields sets the value of EnableNestedFields.
func (s *CollectionResponse) SetEnableNestedFields(val OptBool) {
	s.EnableNestedFields = val
}

// SetSymbolsToIndex sets the value of SymbolsToIndex.
func (s *CollectionResponse) SetSymbolsToIndex(val []string) {
	s.SymbolsToIndex = val
}

// SetVoiceQueryModel sets the value of VoiceQueryModel.
func (s *CollectionResponse) SetVoiceQueryModel(val OptVoiceQueryModelCollectionConfig) {
	s.VoiceQueryModel = val
}

// SetMetadata sets the value of Metadata.
func (s *CollectionResponse) SetMetadata(val *CollectionResponseMetadata) {
	s.Metadata = val
}

// SetNumDocuments sets the value of NumDocuments.
func (s *CollectionResponse) SetNumDocuments(val int64) {
	s.NumDocuments = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CollectionResponse) SetCreatedAt(val int64) {
	s.CreatedAt = val
}

func (*CollectionResponse) createCollectionRes() {}
func (*CollectionResponse) deleteCollectionRes() {}
func (*CollectionResponse) getCollectionRes()    {}

// Optional details about the collection, e.g., when it was created, who created it etc.
type CollectionResponseMetadata struct{}

// Ref: #/components/schemas/CollectionSchema
type CollectionSchema struct {
	// Name of the collection.
	Name string `json:"name"`
	// A list of fields for querying, filtering and faceting.
	Fields []Field `json:"fields"`
	// The name of an int32 / float field that determines the order in which the search results are
	// ranked when a sort_by clause is not provided during searching. This field must indicate some kind
	// of popularity.
	DefaultSortingField OptString `json:"default_sorting_field"`
	// List of symbols or special characters to be used for splitting the text into individual words in
	// addition to space and new-line characters.
	TokenSeparators []string `json:"token_separators"`
	// Enables experimental support at a collection level for nested object or object array fields. This
	// field is only available if the Typesense server is version `0.24.0.rcn34` or later.
	EnableNestedFields OptBool `json:"enable_nested_fields"`
	// List of symbols or special characters to be indexed.
	SymbolsToIndex  []string                           `json:"symbols_to_index"`
	VoiceQueryModel OptVoiceQueryModelCollectionConfig `json:"voice_query_model"`
	// Optional details about the collection, e.g., when it was created, who created it etc.
	Metadata *CollectionSchemaMetadata `json:"metadata"`
}

// GetName returns the value of Name.
func (s *CollectionSchema) GetName() string {
	return s.Name
}

// GetFields returns the value of Fields.
func (s *CollectionSchema) GetFields() []Field {
	return s.Fields
}

// GetDefaultSortingField returns the value of DefaultSortingField.
func (s *CollectionSchema) GetDefaultSortingField() OptString {
	return s.DefaultSortingField
}

// GetTokenSeparators returns the value of TokenSeparators.
func (s *CollectionSchema) GetTokenSeparators() []string {
	return s.TokenSeparators
}

// GetEnableNestedFields returns the value of EnableNestedFields.
func (s *CollectionSchema) GetEnableNestedFields() OptBool {
	return s.EnableNestedFields
}

// GetSymbolsToIndex returns the value of SymbolsToIndex.
func (s *CollectionSchema) GetSymbolsToIndex() []string {
	return s.SymbolsToIndex
}

// GetVoiceQueryModel returns the value of VoiceQueryModel.
func (s *CollectionSchema) GetVoiceQueryModel() OptVoiceQueryModelCollectionConfig {
	return s.VoiceQueryModel
}

// GetMetadata returns the value of Metadata.
func (s *CollectionSchema) GetMetadata() *CollectionSchemaMetadata {
	return s.Metadata
}

// SetName sets the value of Name.
func (s *CollectionSchema) SetName(val string) {
	s.Name = val
}

// SetFields sets the value of Fields.
func (s *CollectionSchema) SetFields(val []Field) {
	s.Fields = val
}

// SetDefaultSortingField sets the value of DefaultSortingField.
func (s *CollectionSchema) SetDefaultSortingField(val OptString) {
	s.DefaultSortingField = val
}

// SetTokenSeparators sets the value of TokenSeparators.
func (s *CollectionSchema) SetTokenSeparators(val []string) {
	s.TokenSeparators = val
}

// SetEnableNestedFields sets the value of EnableNestedFields.
func (s *CollectionSchema) SetEnableNestedFields(val OptBool) {
	s.EnableNestedFields = val
}

// SetSymbolsToIndex sets the value of SymbolsToIndex.
func (s *CollectionSchema) SetSymbolsToIndex(val []string) {
	s.SymbolsToIndex = val
}

// SetVoiceQueryModel sets the value of VoiceQueryModel.
func (s *CollectionSchema) SetVoiceQueryModel(val OptVoiceQueryModelCollectionConfig) {
	s.VoiceQueryModel = val
}

// SetMetadata sets the value of Metadata.
func (s *CollectionSchema) SetMetadata(val *CollectionSchemaMetadata) {
	s.Metadata = val
}

// Optional details about the collection, e.g., when it was created, who created it etc.
type CollectionSchemaMetadata struct{}

// Ref: #/components/schemas/CollectionUpdateSchema
type CollectionUpdateSchema struct {
	// A list of fields for querying, filtering and faceting.
	Fields []Field `json:"fields"`
	// Optional details about the collection, e.g., when it was created, who created it etc.
	Metadata *CollectionUpdateSchemaMetadata `json:"metadata"`
}

// GetFields returns the value of Fields.
func (s *CollectionUpdateSchema) GetFields() []Field {
	return s.Fields
}

// GetMetadata returns the value of Metadata.
func (s *CollectionUpdateSchema) GetMetadata() *CollectionUpdateSchemaMetadata {
	return s.Metadata
}

// SetFields sets the value of Fields.
func (s *CollectionUpdateSchema) SetFields(val []Field) {
	s.Fields = val
}

// SetMetadata sets the value of Metadata.
func (s *CollectionUpdateSchema) SetMetadata(val *CollectionUpdateSchemaMetadata) {
	s.Metadata = val
}

func (*CollectionUpdateSchema) updateCollectionRes() {}

// Optional details about the collection, e.g., when it was created, who created it etc.
type CollectionUpdateSchemaMetadata struct{}

// Merged schema.
// Ref: #/components/schemas/ConversationModelCreateSchema
type ConversationModelCreateSchema struct {
	// An explicit id for the model, otherwise the API will return a response with an auto-generated
	// conversation model id.
	ID OptString `json:"id"`
	// Merged property.
	ModelName string `json:"model_name"`
	// The LLM service's API Key.
	APIKey OptString `json:"api_key"`
	// Merged property.
	HistoryCollection string `json:"history_collection"`
	// LLM service's account ID (only applicable for Cloudflare).
	AccountID OptString `json:"account_id"`
	// The system prompt that contains special instructions to the LLM.
	SystemPrompt OptString `json:"system_prompt"`
	// Time interval in seconds after which the messages would be deleted. Default: 86400 (24 hours).
	TTL OptInt `json:"ttl"`
	// Merged property.
	MaxBytes int `json:"max_bytes"`
	// URL of vLLM service.
	VllmURL OptString `json:"vllm_url"`
}

// GetID returns the value of ID.
func (s *ConversationModelCreateSchema) GetID() OptString {
	return s.ID
}

// GetModelName returns the value of ModelName.
func (s *ConversationModelCreateSchema) GetModelName() string {
	return s.ModelName
}

// GetAPIKey returns the value of APIKey.
func (s *ConversationModelCreateSchema) GetAPIKey() OptString {
	return s.APIKey
}

// GetHistoryCollection returns the value of HistoryCollection.
func (s *ConversationModelCreateSchema) GetHistoryCollection() string {
	return s.HistoryCollection
}

// GetAccountID returns the value of AccountID.
func (s *ConversationModelCreateSchema) GetAccountID() OptString {
	return s.AccountID
}

// GetSystemPrompt returns the value of SystemPrompt.
func (s *ConversationModelCreateSchema) GetSystemPrompt() OptString {
	return s.SystemPrompt
}

// GetTTL returns the value of TTL.
func (s *ConversationModelCreateSchema) GetTTL() OptInt {
	return s.TTL
}

// GetMaxBytes returns the value of MaxBytes.
func (s *ConversationModelCreateSchema) GetMaxBytes() int {
	return s.MaxBytes
}

// GetVllmURL returns the value of VllmURL.
func (s *ConversationModelCreateSchema) GetVllmURL() OptString {
	return s.VllmURL
}

// SetID sets the value of ID.
func (s *ConversationModelCreateSchema) SetID(val OptString) {
	s.ID = val
}

// SetModelName sets the value of ModelName.
func (s *ConversationModelCreateSchema) SetModelName(val string) {
	s.ModelName = val
}

// SetAPIKey sets the value of APIKey.
func (s *ConversationModelCreateSchema) SetAPIKey(val OptString) {
	s.APIKey = val
}

// SetHistoryCollection sets the value of HistoryCollection.
func (s *ConversationModelCreateSchema) SetHistoryCollection(val string) {
	s.HistoryCollection = val
}

// SetAccountID sets the value of AccountID.
func (s *ConversationModelCreateSchema) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetSystemPrompt sets the value of SystemPrompt.
func (s *ConversationModelCreateSchema) SetSystemPrompt(val OptString) {
	s.SystemPrompt = val
}

// SetTTL sets the value of TTL.
func (s *ConversationModelCreateSchema) SetTTL(val OptInt) {
	s.TTL = val
}

// SetMaxBytes sets the value of MaxBytes.
func (s *ConversationModelCreateSchema) SetMaxBytes(val int) {
	s.MaxBytes = val
}

// SetVllmURL sets the value of VllmURL.
func (s *ConversationModelCreateSchema) SetVllmURL(val OptString) {
	s.VllmURL = val
}

// Merged schema.
// Ref: #/components/schemas/ConversationModelSchema
type ConversationModelSchema struct {
	// Merged property.
	ID string `json:"id"`
	// Merged property.
	ModelName string `json:"model_name"`
	// The LLM service's API Key.
	APIKey OptString `json:"api_key"`
	// Merged property.
	HistoryCollection string `json:"history_collection"`
	// LLM service's account ID (only applicable for Cloudflare).
	AccountID OptString `json:"account_id"`
	// The system prompt that contains special instructions to the LLM.
	SystemPrompt OptString `json:"system_prompt"`
	// Time interval in seconds after which the messages would be deleted. Default: 86400 (24 hours).
	TTL OptInt `json:"ttl"`
	// Merged property.
	MaxBytes int `json:"max_bytes"`
	// URL of vLLM service.
	VllmURL OptString `json:"vllm_url"`
}

// GetID returns the value of ID.
func (s *ConversationModelSchema) GetID() string {
	return s.ID
}

// GetModelName returns the value of ModelName.
func (s *ConversationModelSchema) GetModelName() string {
	return s.ModelName
}

// GetAPIKey returns the value of APIKey.
func (s *ConversationModelSchema) GetAPIKey() OptString {
	return s.APIKey
}

// GetHistoryCollection returns the value of HistoryCollection.
func (s *ConversationModelSchema) GetHistoryCollection() string {
	return s.HistoryCollection
}

// GetAccountID returns the value of AccountID.
func (s *ConversationModelSchema) GetAccountID() OptString {
	return s.AccountID
}

// GetSystemPrompt returns the value of SystemPrompt.
func (s *ConversationModelSchema) GetSystemPrompt() OptString {
	return s.SystemPrompt
}

// GetTTL returns the value of TTL.
func (s *ConversationModelSchema) GetTTL() OptInt {
	return s.TTL
}

// GetMaxBytes returns the value of MaxBytes.
func (s *ConversationModelSchema) GetMaxBytes() int {
	return s.MaxBytes
}

// GetVllmURL returns the value of VllmURL.
func (s *ConversationModelSchema) GetVllmURL() OptString {
	return s.VllmURL
}

// SetID sets the value of ID.
func (s *ConversationModelSchema) SetID(val string) {
	s.ID = val
}

// SetModelName sets the value of ModelName.
func (s *ConversationModelSchema) SetModelName(val string) {
	s.ModelName = val
}

// SetAPIKey sets the value of APIKey.
func (s *ConversationModelSchema) SetAPIKey(val OptString) {
	s.APIKey = val
}

// SetHistoryCollection sets the value of HistoryCollection.
func (s *ConversationModelSchema) SetHistoryCollection(val string) {
	s.HistoryCollection = val
}

// SetAccountID sets the value of AccountID.
func (s *ConversationModelSchema) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetSystemPrompt sets the value of SystemPrompt.
func (s *ConversationModelSchema) SetSystemPrompt(val OptString) {
	s.SystemPrompt = val
}

// SetTTL sets the value of TTL.
func (s *ConversationModelSchema) SetTTL(val OptInt) {
	s.TTL = val
}

// SetMaxBytes sets the value of MaxBytes.
func (s *ConversationModelSchema) SetMaxBytes(val int) {
	s.MaxBytes = val
}

// SetVllmURL sets the value of VllmURL.
func (s *ConversationModelSchema) SetVllmURL(val OptString) {
	s.VllmURL = val
}

func (*ConversationModelSchema) createConversationModelRes() {}

// Ref: #/components/schemas/ConversationModelUpdateSchema
type ConversationModelUpdateSchema struct {
	// An explicit id for the model, otherwise the API will return a response with an auto-generated
	// conversation model id.
	ID OptString `json:"id"`
	// Name of the LLM model offered by OpenAI, Cloudflare or vLLM.
	ModelName OptString `json:"model_name"`
	// The LLM service's API Key.
	APIKey OptString `json:"api_key"`
	// Typesense collection that stores the historical conversations.
	HistoryCollection OptString `json:"history_collection"`
	// LLM service's account ID (only applicable for Cloudflare).
	AccountID OptString `json:"account_id"`
	// The system prompt that contains special instructions to the LLM.
	SystemPrompt OptString `json:"system_prompt"`
	// Time interval in seconds after which the messages would be deleted. Default: 86400 (24 hours).
	TTL OptInt `json:"ttl"`
	// The maximum number of bytes to send to the LLM in every API call. Consult the LLM's documentation
	// on the number of bytes supported in the context window.
	MaxBytes OptInt `json:"max_bytes"`
	// URL of vLLM service.
	VllmURL OptString `json:"vllm_url"`
}

// GetID returns the value of ID.
func (s *ConversationModelUpdateSchema) GetID() OptString {
	return s.ID
}

// GetModelName returns the value of ModelName.
func (s *ConversationModelUpdateSchema) GetModelName() OptString {
	return s.ModelName
}

// GetAPIKey returns the value of APIKey.
func (s *ConversationModelUpdateSchema) GetAPIKey() OptString {
	return s.APIKey
}

// GetHistoryCollection returns the value of HistoryCollection.
func (s *ConversationModelUpdateSchema) GetHistoryCollection() OptString {
	return s.HistoryCollection
}

// GetAccountID returns the value of AccountID.
func (s *ConversationModelUpdateSchema) GetAccountID() OptString {
	return s.AccountID
}

// GetSystemPrompt returns the value of SystemPrompt.
func (s *ConversationModelUpdateSchema) GetSystemPrompt() OptString {
	return s.SystemPrompt
}

// GetTTL returns the value of TTL.
func (s *ConversationModelUpdateSchema) GetTTL() OptInt {
	return s.TTL
}

// GetMaxBytes returns the value of MaxBytes.
func (s *ConversationModelUpdateSchema) GetMaxBytes() OptInt {
	return s.MaxBytes
}

// GetVllmURL returns the value of VllmURL.
func (s *ConversationModelUpdateSchema) GetVllmURL() OptString {
	return s.VllmURL
}

// SetID sets the value of ID.
func (s *ConversationModelUpdateSchema) SetID(val OptString) {
	s.ID = val
}

// SetModelName sets the value of ModelName.
func (s *ConversationModelUpdateSchema) SetModelName(val OptString) {
	s.ModelName = val
}

// SetAPIKey sets the value of APIKey.
func (s *ConversationModelUpdateSchema) SetAPIKey(val OptString) {
	s.APIKey = val
}

// SetHistoryCollection sets the value of HistoryCollection.
func (s *ConversationModelUpdateSchema) SetHistoryCollection(val OptString) {
	s.HistoryCollection = val
}

// SetAccountID sets the value of AccountID.
func (s *ConversationModelUpdateSchema) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetSystemPrompt sets the value of SystemPrompt.
func (s *ConversationModelUpdateSchema) SetSystemPrompt(val OptString) {
	s.SystemPrompt = val
}

// SetTTL sets the value of TTL.
func (s *ConversationModelUpdateSchema) SetTTL(val OptInt) {
	s.TTL = val
}

// SetMaxBytes sets the value of MaxBytes.
func (s *ConversationModelUpdateSchema) SetMaxBytes(val OptInt) {
	s.MaxBytes = val
}

// SetVllmURL sets the value of VllmURL.
func (s *ConversationModelUpdateSchema) SetVllmURL(val OptString) {
	s.VllmURL = val
}

type CreateCollectionBadRequest ApiResponse

func (*CreateCollectionBadRequest) createCollectionRes() {}

type CreateCollectionConflict ApiResponse

func (*CreateCollectionConflict) createCollectionRes() {}

type CreateKeyBadRequest ApiResponse

func (*CreateKeyBadRequest) createKeyRes() {}

type CreateKeyConflict ApiResponse

func (*CreateKeyConflict) createKeyRes() {}

type DebugOK struct {
	Version OptString `json:"version"`
}

// GetVersion returns the value of Version.
func (s *DebugOK) GetVersion() OptString {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *DebugOK) SetVersion(val OptString) {
	s.Version = val
}

// Can be any key-value pair.
type DeleteDocumentOK struct{}

func (*DeleteDocumentOK) deleteDocumentRes() {}

type DeleteDocumentsDeleteDocumentsParameters struct {
	FilterBy string `json:"filter_by"`
	// Batch size parameter controls the number of documents that should be deleted at a time. A larger
	// value will speed up deletions, but will impact performance of other operations running on the
	// server.
	BatchSize      OptInt  `json:"batch_size"`
	IgnoreNotFound OptBool `json:"ignore_not_found"`
	// When true, removes all documents from the collection while preserving the collection and its
	// schema.
	Truncate OptBool `json:"truncate"`
}

// GetFilterBy returns the value of FilterBy.
func (s *DeleteDocumentsDeleteDocumentsParameters) GetFilterBy() string {
	return s.FilterBy
}

// GetBatchSize returns the value of BatchSize.
func (s *DeleteDocumentsDeleteDocumentsParameters) GetBatchSize() OptInt {
	return s.BatchSize
}

// GetIgnoreNotFound returns the value of IgnoreNotFound.
func (s *DeleteDocumentsDeleteDocumentsParameters) GetIgnoreNotFound() OptBool {
	return s.IgnoreNotFound
}

// GetTruncate returns the value of Truncate.
func (s *DeleteDocumentsDeleteDocumentsParameters) GetTruncate() OptBool {
	return s.Truncate
}

// SetFilterBy sets the value of FilterBy.
func (s *DeleteDocumentsDeleteDocumentsParameters) SetFilterBy(val string) {
	s.FilterBy = val
}

// SetBatchSize sets the value of BatchSize.
func (s *DeleteDocumentsDeleteDocumentsParameters) SetBatchSize(val OptInt) {
	s.BatchSize = val
}

// SetIgnoreNotFound sets the value of IgnoreNotFound.
func (s *DeleteDocumentsDeleteDocumentsParameters) SetIgnoreNotFound(val OptBool) {
	s.IgnoreNotFound = val
}

// SetTruncate sets the value of Truncate.
func (s *DeleteDocumentsDeleteDocumentsParameters) SetTruncate(val OptBool) {
	s.Truncate = val
}

type DeleteDocumentsOK struct {
	NumDeleted int `json:"num_deleted"`
}

// GetNumDeleted returns the value of NumDeleted.
func (s *DeleteDocumentsOK) GetNumDeleted() int {
	return s.NumDeleted
}

// SetNumDeleted sets the value of NumDeleted.
func (s *DeleteDocumentsOK) SetNumDeleted(val int) {
	s.NumDeleted = val
}

func (*DeleteDocumentsOK) deleteDocumentsRes() {}

type DeleteKeyBadRequest ApiResponse

func (*DeleteKeyBadRequest) deleteKeyRes() {}

type DeleteKeyNotFound ApiResponse

func (*DeleteKeyNotFound) deleteKeyRes() {}

type DeleteStopwordsSetOK struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *DeleteStopwordsSetOK) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *DeleteStopwordsSetOK) SetID(val string) {
	s.ID = val
}

func (*DeleteStopwordsSetOK) deleteStopwordsSetRes() {}

// Ref: #/components/schemas/DirtyValues
type DirtyValues string

const (
	DirtyValuesCoerceOrReject DirtyValues = "coerce_or_reject"
	DirtyValuesCoerceOrDrop   DirtyValues = "coerce_or_drop"
	DirtyValuesDrop           DirtyValues = "drop"
	DirtyValuesReject         DirtyValues = "reject"
)

// AllValues returns all DirtyValues values.
func (DirtyValues) AllValues() []DirtyValues {
	return []DirtyValues{
		DirtyValuesCoerceOrReject,
		DirtyValuesCoerceOrDrop,
		DirtyValuesDrop,
		DirtyValuesReject,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DirtyValues) MarshalText() ([]byte, error) {
	switch s {
	case DirtyValuesCoerceOrReject:
		return []byte(s), nil
	case DirtyValuesCoerceOrDrop:
		return []byte(s), nil
	case DirtyValuesDrop:
		return []byte(s), nil
	case DirtyValuesReject:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DirtyValues) UnmarshalText(data []byte) error {
	switch DirtyValues(data) {
	case DirtyValuesCoerceOrReject:
		*s = DirtyValuesCoerceOrReject
		return nil
	case DirtyValuesCoerceOrDrop:
		*s = DirtyValuesCoerceOrDrop
		return nil
	case DirtyValuesDrop:
		*s = DirtyValuesDrop
		return nil
	case DirtyValuesReject:
		*s = DirtyValuesReject
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Dictates the direction in which the words in the query must be dropped when the original words in
// the query do not appear in any document. Values: right_to_left (default), left_to_right,
// both_sides:3 A note on both_sides:3 - for queries upto 3 tokens (words) in length, this mode will
// drop tokens from both sides and exhaustively rank all matching results. If query length is greater
// than 3 words, Typesense will just fallback to default behavior of right_to_left.
// Ref: #/components/schemas/DropTokensMode
type DropTokensMode string

const (
	DropTokensModeRightToLeft DropTokensMode = "right_to_left"
	DropTokensModeLeftToRight DropTokensMode = "left_to_right"
	DropTokensModeBothSides3  DropTokensMode = "both_sides:3"
)

// AllValues returns all DropTokensMode values.
func (DropTokensMode) AllValues() []DropTokensMode {
	return []DropTokensMode{
		DropTokensModeRightToLeft,
		DropTokensModeLeftToRight,
		DropTokensModeBothSides3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DropTokensMode) MarshalText() ([]byte, error) {
	switch s {
	case DropTokensModeRightToLeft:
		return []byte(s), nil
	case DropTokensModeLeftToRight:
		return []byte(s), nil
	case DropTokensModeBothSides3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DropTokensMode) UnmarshalText(data []byte) error {
	switch DropTokensMode(data) {
	case DropTokensModeRightToLeft:
		*s = DropTokensModeRightToLeft
		return nil
	case DropTokensModeLeftToRight:
		*s = DropTokensModeLeftToRight
		return nil
	case DropTokensModeBothSides3:
		*s = DropTokensModeBothSides3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExportDocumentsExportDocumentsParameters struct {
	// Filter conditions for refining your search results. Separate multiple conditions with &&.
	FilterBy OptString `json:"filter_by"`
	// List of fields from the document to include in the search result.
	IncludeFields OptString `json:"include_fields"`
	// List of fields from the document to exclude in the search result.
	ExcludeFields OptString `json:"exclude_fields"`
}

// GetFilterBy returns the value of FilterBy.
func (s *ExportDocumentsExportDocumentsParameters) GetFilterBy() OptString {
	return s.FilterBy
}

// GetIncludeFields returns the value of IncludeFields.
func (s *ExportDocumentsExportDocumentsParameters) GetIncludeFields() OptString {
	return s.IncludeFields
}

// GetExcludeFields returns the value of ExcludeFields.
func (s *ExportDocumentsExportDocumentsParameters) GetExcludeFields() OptString {
	return s.ExcludeFields
}

// SetFilterBy sets the value of FilterBy.
func (s *ExportDocumentsExportDocumentsParameters) SetFilterBy(val OptString) {
	s.FilterBy = val
}

// SetIncludeFields sets the value of IncludeFields.
func (s *ExportDocumentsExportDocumentsParameters) SetIncludeFields(val OptString) {
	s.IncludeFields = val
}

// SetExcludeFields sets the value of ExcludeFields.
func (s *ExportDocumentsExportDocumentsParameters) SetExcludeFields(val OptString) {
	s.ExcludeFields = val
}

type ExportDocumentsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportDocumentsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportDocumentsOK) exportDocumentsRes() {}

// Ref: #/components/schemas/FacetCounts
type FacetCounts struct {
	Counts    []FacetCountsCountsItem `json:"counts"`
	FieldName OptString               `json:"field_name"`
	Stats     OptFacetCountsStats     `json:"stats"`
}

// GetCounts returns the value of Counts.
func (s *FacetCounts) GetCounts() []FacetCountsCountsItem {
	return s.Counts
}

// GetFieldName returns the value of FieldName.
func (s *FacetCounts) GetFieldName() OptString {
	return s.FieldName
}

// GetStats returns the value of Stats.
func (s *FacetCounts) GetStats() OptFacetCountsStats {
	return s.Stats
}

// SetCounts sets the value of Counts.
func (s *FacetCounts) SetCounts(val []FacetCountsCountsItem) {
	s.Counts = val
}

// SetFieldName sets the value of FieldName.
func (s *FacetCounts) SetFieldName(val OptString) {
	s.FieldName = val
}

// SetStats sets the value of Stats.
func (s *FacetCounts) SetStats(val OptFacetCountsStats) {
	s.Stats = val
}

type FacetCountsCountsItem struct {
	Count       OptInt                       `json:"count"`
	Highlighted OptString                    `json:"highlighted"`
	Value       OptString                    `json:"value"`
	Parent      *FacetCountsCountsItemParent `json:"parent"`
}

// GetCount returns the value of Count.
func (s *FacetCountsCountsItem) GetCount() OptInt {
	return s.Count
}

// GetHighlighted returns the value of Highlighted.
func (s *FacetCountsCountsItem) GetHighlighted() OptString {
	return s.Highlighted
}

// GetValue returns the value of Value.
func (s *FacetCountsCountsItem) GetValue() OptString {
	return s.Value
}

// GetParent returns the value of Parent.
func (s *FacetCountsCountsItem) GetParent() *FacetCountsCountsItemParent {
	return s.Parent
}

// SetCount sets the value of Count.
func (s *FacetCountsCountsItem) SetCount(val OptInt) {
	s.Count = val
}

// SetHighlighted sets the value of Highlighted.
func (s *FacetCountsCountsItem) SetHighlighted(val OptString) {
	s.Highlighted = val
}

// SetValue sets the value of Value.
func (s *FacetCountsCountsItem) SetValue(val OptString) {
	s.Value = val
}

// SetParent sets the value of Parent.
func (s *FacetCountsCountsItem) SetParent(val *FacetCountsCountsItemParent) {
	s.Parent = val
}

type FacetCountsCountsItemParent struct{}

type FacetCountsStats struct {
	Max         OptFloat64 `json:"max"`
	Min         OptFloat64 `json:"min"`
	Sum         OptFloat64 `json:"sum"`
	TotalValues OptInt     `json:"total_values"`
	Avg         OptFloat64 `json:"avg"`
}

// GetMax returns the value of Max.
func (s *FacetCountsStats) GetMax() OptFloat64 {
	return s.Max
}

// GetMin returns the value of Min.
func (s *FacetCountsStats) GetMin() OptFloat64 {
	return s.Min
}

// GetSum returns the value of Sum.
func (s *FacetCountsStats) GetSum() OptFloat64 {
	return s.Sum
}

// GetTotalValues returns the value of TotalValues.
func (s *FacetCountsStats) GetTotalValues() OptInt {
	return s.TotalValues
}

// GetAvg returns the value of Avg.
func (s *FacetCountsStats) GetAvg() OptFloat64 {
	return s.Avg
}

// SetMax sets the value of Max.
func (s *FacetCountsStats) SetMax(val OptFloat64) {
	s.Max = val
}

// SetMin sets the value of Min.
func (s *FacetCountsStats) SetMin(val OptFloat64) {
	s.Min = val
}

// SetSum sets the value of Sum.
func (s *FacetCountsStats) SetSum(val OptFloat64) {
	s.Sum = val
}

// SetTotalValues sets the value of TotalValues.
func (s *FacetCountsStats) SetTotalValues(val OptInt) {
	s.TotalValues = val
}

// SetAvg sets the value of Avg.
func (s *FacetCountsStats) SetAvg(val OptFloat64) {
	s.Avg = val
}

// Ref: #/components/schemas/Field
type Field struct {
	Name     string    `json:"name"`
	Type     string    `json:"type"`
	Optional OptBool   `json:"optional"`
	Facet    OptBool   `json:"facet"`
	Index    OptBool   `json:"index"`
	Locale   OptString `json:"locale"`
	Sort     OptBool   `json:"sort"`
	Infix    OptBool   `json:"infix"`
	// Name of a field in another collection that should be linked to this collection so that it can be
	// joined during query.
	Reference OptString `json:"reference"`
	NumDim    OptInt    `json:"num_dim"`
	Drop      OptBool   `json:"drop"`
	// When set to false, the field value will not be stored on disk. Default: true.
	Store OptBool `json:"store"`
	// The distance metric to be used for vector search. Default: `cosine`. You can also use `ip` for
	// inner product.
	VecDist OptString `json:"vec_dist"`
	// Enables an index optimized for range filtering on numerical fields (e.g. rating:>3.5). Default:
	// false.
	RangeIndex OptBool `json:"range_index"`
	// Values are stemmed before indexing in-memory. Default: false.
	Stem OptBool `json:"stem"`
	// Name of the stemming dictionary to use for this field.
	StemDictionary OptString `json:"stem_dictionary"`
	// List of symbols or special characters to be used for splitting the text into individual words in
	// addition to space and new-line characters.
	TokenSeparators []string `json:"token_separators"`
	// List of symbols or special characters to be indexed.
	SymbolsToIndex []string      `json:"symbols_to_index"`
	Embed          OptFieldEmbed `json:"embed"`
}

// GetName returns the value of Name.
func (s *Field) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *Field) GetType() string {
	return s.Type
}

// GetOptional returns the value of Optional.
func (s *Field) GetOptional() OptBool {
	return s.Optional
}

// GetFacet returns the value of Facet.
func (s *Field) GetFacet() OptBool {
	return s.Facet
}

// GetIndex returns the value of Index.
func (s *Field) GetIndex() OptBool {
	return s.Index
}

// GetLocale returns the value of Locale.
func (s *Field) GetLocale() OptString {
	return s.Locale
}

// GetSort returns the value of Sort.
func (s *Field) GetSort() OptBool {
	return s.Sort
}

// GetInfix returns the value of Infix.
func (s *Field) GetInfix() OptBool {
	return s.Infix
}

// GetReference returns the value of Reference.
func (s *Field) GetReference() OptString {
	return s.Reference
}

// GetNumDim returns the value of NumDim.
func (s *Field) GetNumDim() OptInt {
	return s.NumDim
}

// GetDrop returns the value of Drop.
func (s *Field) GetDrop() OptBool {
	return s.Drop
}

// GetStore returns the value of Store.
func (s *Field) GetStore() OptBool {
	return s.Store
}

// GetVecDist returns the value of VecDist.
func (s *Field) GetVecDist() OptString {
	return s.VecDist
}

// GetRangeIndex returns the value of RangeIndex.
func (s *Field) GetRangeIndex() OptBool {
	return s.RangeIndex
}

// GetStem returns the value of Stem.
func (s *Field) GetStem() OptBool {
	return s.Stem
}

// GetStemDictionary returns the value of StemDictionary.
func (s *Field) GetStemDictionary() OptString {
	return s.StemDictionary
}

// GetTokenSeparators returns the value of TokenSeparators.
func (s *Field) GetTokenSeparators() []string {
	return s.TokenSeparators
}

// GetSymbolsToIndex returns the value of SymbolsToIndex.
func (s *Field) GetSymbolsToIndex() []string {
	return s.SymbolsToIndex
}

// GetEmbed returns the value of Embed.
func (s *Field) GetEmbed() OptFieldEmbed {
	return s.Embed
}

// SetName sets the value of Name.
func (s *Field) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *Field) SetType(val string) {
	s.Type = val
}

// SetOptional sets the value of Optional.
func (s *Field) SetOptional(val OptBool) {
	s.Optional = val
}

// SetFacet sets the value of Facet.
func (s *Field) SetFacet(val OptBool) {
	s.Facet = val
}

// SetIndex sets the value of Index.
func (s *Field) SetIndex(val OptBool) {
	s.Index = val
}

// SetLocale sets the value of Locale.
func (s *Field) SetLocale(val OptString) {
	s.Locale = val
}

// SetSort sets the value of Sort.
func (s *Field) SetSort(val OptBool) {
	s.Sort = val
}

// SetInfix sets the value of Infix.
func (s *Field) SetInfix(val OptBool) {
	s.Infix = val
}

// SetReference sets the value of Reference.
func (s *Field) SetReference(val OptString) {
	s.Reference = val
}

// SetNumDim sets the value of NumDim.
func (s *Field) SetNumDim(val OptInt) {
	s.NumDim = val
}

// SetDrop sets the value of Drop.
func (s *Field) SetDrop(val OptBool) {
	s.Drop = val
}

// SetStore sets the value of Store.
func (s *Field) SetStore(val OptBool) {
	s.Store = val
}

// SetVecDist sets the value of VecDist.
func (s *Field) SetVecDist(val OptString) {
	s.VecDist = val
}

// SetRangeIndex sets the value of RangeIndex.
func (s *Field) SetRangeIndex(val OptBool) {
	s.RangeIndex = val
}

// SetStem sets the value of Stem.
func (s *Field) SetStem(val OptBool) {
	s.Stem = val
}

// SetStemDictionary sets the value of StemDictionary.
func (s *Field) SetStemDictionary(val OptString) {
	s.StemDictionary = val
}

// SetTokenSeparators sets the value of TokenSeparators.
func (s *Field) SetTokenSeparators(val []string) {
	s.TokenSeparators = val
}

// SetSymbolsToIndex sets the value of SymbolsToIndex.
func (s *Field) SetSymbolsToIndex(val []string) {
	s.SymbolsToIndex = val
}

// SetEmbed sets the value of Embed.
func (s *Field) SetEmbed(val OptFieldEmbed) {
	s.Embed = val
}

type FieldEmbed struct {
	From        []string              `json:"from"`
	ModelConfig FieldEmbedModelConfig `json:"model_config"`
}

// GetFrom returns the value of From.
func (s *FieldEmbed) GetFrom() []string {
	return s.From
}

// GetModelConfig returns the value of ModelConfig.
func (s *FieldEmbed) GetModelConfig() FieldEmbedModelConfig {
	return s.ModelConfig
}

// SetFrom sets the value of From.
func (s *FieldEmbed) SetFrom(val []string) {
	s.From = val
}

// SetModelConfig sets the value of ModelConfig.
func (s *FieldEmbed) SetModelConfig(val FieldEmbedModelConfig) {
	s.ModelConfig = val
}

type FieldEmbedModelConfig struct {
	ModelName      string    `json:"model_name"`
	APIKey         OptString `json:"api_key"`
	URL            OptString `json:"url"`
	AccessToken    OptString `json:"access_token"`
	RefreshToken   OptString `json:"refresh_token"`
	ClientID       OptString `json:"client_id"`
	ClientSecret   OptString `json:"client_secret"`
	ProjectID      OptString `json:"project_id"`
	IndexingPrefix OptString `json:"indexing_prefix"`
	QueryPrefix    OptString `json:"query_prefix"`
}

// GetModelName returns the value of ModelName.
func (s *FieldEmbedModelConfig) GetModelName() string {
	return s.ModelName
}

// GetAPIKey returns the value of APIKey.
func (s *FieldEmbedModelConfig) GetAPIKey() OptString {
	return s.APIKey
}

// GetURL returns the value of URL.
func (s *FieldEmbedModelConfig) GetURL() OptString {
	return s.URL
}

// GetAccessToken returns the value of AccessToken.
func (s *FieldEmbedModelConfig) GetAccessToken() OptString {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *FieldEmbedModelConfig) GetRefreshToken() OptString {
	return s.RefreshToken
}

// GetClientID returns the value of ClientID.
func (s *FieldEmbedModelConfig) GetClientID() OptString {
	return s.ClientID
}

// GetClientSecret returns the value of ClientSecret.
func (s *FieldEmbedModelConfig) GetClientSecret() OptString {
	return s.ClientSecret
}

// GetProjectID returns the value of ProjectID.
func (s *FieldEmbedModelConfig) GetProjectID() OptString {
	return s.ProjectID
}

// GetIndexingPrefix returns the value of IndexingPrefix.
func (s *FieldEmbedModelConfig) GetIndexingPrefix() OptString {
	return s.IndexingPrefix
}

// GetQueryPrefix returns the value of QueryPrefix.
func (s *FieldEmbedModelConfig) GetQueryPrefix() OptString {
	return s.QueryPrefix
}

// SetModelName sets the value of ModelName.
func (s *FieldEmbedModelConfig) SetModelName(val string) {
	s.ModelName = val
}

// SetAPIKey sets the value of APIKey.
func (s *FieldEmbedModelConfig) SetAPIKey(val OptString) {
	s.APIKey = val
}

// SetURL sets the value of URL.
func (s *FieldEmbedModelConfig) SetURL(val OptString) {
	s.URL = val
}

// SetAccessToken sets the value of AccessToken.
func (s *FieldEmbedModelConfig) SetAccessToken(val OptString) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *FieldEmbedModelConfig) SetRefreshToken(val OptString) {
	s.RefreshToken = val
}

// SetClientID sets the value of ClientID.
func (s *FieldEmbedModelConfig) SetClientID(val OptString) {
	s.ClientID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *FieldEmbedModelConfig) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

// SetProjectID sets the value of ProjectID.
func (s *FieldEmbedModelConfig) SetProjectID(val OptString) {
	s.ProjectID = val
}

// SetIndexingPrefix sets the value of IndexingPrefix.
func (s *FieldEmbedModelConfig) SetIndexingPrefix(val OptString) {
	s.IndexingPrefix = val
}

// SetQueryPrefix sets the value of QueryPrefix.
func (s *FieldEmbedModelConfig) SetQueryPrefix(val OptString) {
	s.QueryPrefix = val
}

type GetCollectionsGetCollectionsParameters struct {
	// Comma-separated list of fields from the collection to exclude from the response.
	ExcludeFields OptString `json:"exclude_fields"`
	// Number of collections to fetch. Default: returns all collections.
	Limit OptInt `json:"limit"`
	// Identifies the starting point to return collections when paginating.
	Offset OptInt `json:"offset"`
}

// GetExcludeFields returns the value of ExcludeFields.
func (s *GetCollectionsGetCollectionsParameters) GetExcludeFields() OptString {
	return s.ExcludeFields
}

// GetLimit returns the value of Limit.
func (s *GetCollectionsGetCollectionsParameters) GetLimit() OptInt {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *GetCollectionsGetCollectionsParameters) GetOffset() OptInt {
	return s.Offset
}

// SetExcludeFields sets the value of ExcludeFields.
func (s *GetCollectionsGetCollectionsParameters) SetExcludeFields(val OptString) {
	s.ExcludeFields = val
}

// SetLimit sets the value of Limit.
func (s *GetCollectionsGetCollectionsParameters) SetLimit(val OptInt) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *GetCollectionsGetCollectionsParameters) SetOffset(val OptInt) {
	s.Offset = val
}

// Can be any key-value pair.
type GetDocumentOK struct{}

func (*GetDocumentOK) getDocumentRes() {}

// Ref: #/components/schemas/HealthStatus
type HealthStatus struct {
	Ok bool `json:"ok"`
}

// GetOk returns the value of Ok.
func (s *HealthStatus) GetOk() bool {
	return s.Ok
}

// SetOk sets the value of Ok.
func (s *HealthStatus) SetOk(val bool) {
	s.Ok = val
}

type ImportDocumentsBadRequest ApiResponse

func (*ImportDocumentsBadRequest) importDocumentsRes() {}

type ImportDocumentsImportDocumentsParameters struct {
	BatchSize OptInt `json:"batch_size"`
	// Returning the id of the imported documents. If you want the import response to return the ingested
	// document's id in the response, you can use the return_id parameter.
	ReturnID                 OptBool        `json:"return_id"`
	RemoteEmbeddingBatchSize OptInt         `json:"remote_embedding_batch_size"`
	ReturnDoc                OptBool        `json:"return_doc"`
	Action                   OptIndexAction `json:"action"`
	DirtyValues              OptDirtyValues `json:"dirty_values"`
}

// GetBatchSize returns the value of BatchSize.
func (s *ImportDocumentsImportDocumentsParameters) GetBatchSize() OptInt {
	return s.BatchSize
}

// GetReturnID returns the value of ReturnID.
func (s *ImportDocumentsImportDocumentsParameters) GetReturnID() OptBool {
	return s.ReturnID
}

// GetRemoteEmbeddingBatchSize returns the value of RemoteEmbeddingBatchSize.
func (s *ImportDocumentsImportDocumentsParameters) GetRemoteEmbeddingBatchSize() OptInt {
	return s.RemoteEmbeddingBatchSize
}

// GetReturnDoc returns the value of ReturnDoc.
func (s *ImportDocumentsImportDocumentsParameters) GetReturnDoc() OptBool {
	return s.ReturnDoc
}

// GetAction returns the value of Action.
func (s *ImportDocumentsImportDocumentsParameters) GetAction() OptIndexAction {
	return s.Action
}

// GetDirtyValues returns the value of DirtyValues.
func (s *ImportDocumentsImportDocumentsParameters) GetDirtyValues() OptDirtyValues {
	return s.DirtyValues
}

// SetBatchSize sets the value of BatchSize.
func (s *ImportDocumentsImportDocumentsParameters) SetBatchSize(val OptInt) {
	s.BatchSize = val
}

// SetReturnID sets the value of ReturnID.
func (s *ImportDocumentsImportDocumentsParameters) SetReturnID(val OptBool) {
	s.ReturnID = val
}

// SetRemoteEmbeddingBatchSize sets the value of RemoteEmbeddingBatchSize.
func (s *ImportDocumentsImportDocumentsParameters) SetRemoteEmbeddingBatchSize(val OptInt) {
	s.RemoteEmbeddingBatchSize = val
}

// SetReturnDoc sets the value of ReturnDoc.
func (s *ImportDocumentsImportDocumentsParameters) SetReturnDoc(val OptBool) {
	s.ReturnDoc = val
}

// SetAction sets the value of Action.
func (s *ImportDocumentsImportDocumentsParameters) SetAction(val OptIndexAction) {
	s.Action = val
}

// SetDirtyValues sets the value of DirtyValues.
func (s *ImportDocumentsImportDocumentsParameters) SetDirtyValues(val OptDirtyValues) {
	s.DirtyValues = val
}

type ImportDocumentsNotFound ApiResponse

func (*ImportDocumentsNotFound) importDocumentsRes() {}

type ImportDocumentsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ImportDocumentsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ImportDocumentsOK) importDocumentsRes() {}

// The JSONL file to import.
type ImportDocumentsReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ImportDocumentsReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type ImportStemmingDictionaryOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ImportStemmingDictionaryOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ImportStemmingDictionaryOK) importStemmingDictionaryRes() {}

// Ref: #/components/schemas/IndexAction
type IndexAction string

const (
	IndexActionCreate  IndexAction = "create"
	IndexActionUpdate  IndexAction = "update"
	IndexActionUpsert  IndexAction = "upsert"
	IndexActionEmplace IndexAction = "emplace"
)

// AllValues returns all IndexAction values.
func (IndexAction) AllValues() []IndexAction {
	return []IndexAction{
		IndexActionCreate,
		IndexActionUpdate,
		IndexActionUpsert,
		IndexActionEmplace,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IndexAction) MarshalText() ([]byte, error) {
	switch s {
	case IndexActionCreate:
		return []byte(s), nil
	case IndexActionUpdate:
		return []byte(s), nil
	case IndexActionUpsert:
		return []byte(s), nil
	case IndexActionEmplace:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IndexAction) UnmarshalText(data []byte) error {
	switch IndexAction(data) {
	case IndexActionCreate:
		*s = IndexActionCreate
		return nil
	case IndexActionUpdate:
		*s = IndexActionUpdate
		return nil
	case IndexActionUpsert:
		*s = IndexActionUpsert
		return nil
	case IndexActionEmplace:
		*s = IndexActionEmplace
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Can be any key-value pair.
type IndexDocumentCreated struct{}

func (*IndexDocumentCreated) indexDocumentRes() {}

// Can be any key-value pair.
type IndexDocumentReq struct{}

type ListStemmingDictionariesOK struct {
	Dictionaries []string `json:"dictionaries"`
}

// GetDictionaries returns the value of Dictionaries.
func (s *ListStemmingDictionariesOK) GetDictionaries() []string {
	return s.Dictionaries
}

// SetDictionaries sets the value of Dictionaries.
func (s *ListStemmingDictionariesOK) SetDictionaries(val []string) {
	s.Dictionaries = val
}

// Merged schema.
// Ref: #/components/schemas/MultiSearchCollectionParameters
type MultiSearchCollectionParameters struct {
	// The query text to search for in the collection. Use * as the search string to return all documents.
	//  This is typically useful when used in conjunction with filter_by.
	Q OptString `json:"q"`
	// A list of `string` fields that should be queried against. Multiple fields are separated with a
	// comma.
	QueryBy OptString `json:"query_by"`
	// The relative weight to give each `query_by` field when ranking results. This can be used to boost
	// fields in priority, when looking for matches. Multiple fields are separated with a comma.
	QueryByWeights OptString `json:"query_by_weights"`
	// In a multi-field matching context, this parameter determines how the representative text match
	// score of a record is calculated. Possible values are max_score (default) or max_weight.
	TextMatchType OptString `json:"text_match_type"`
	// Boolean field to indicate that the last word in the query should be treated as a prefix, and not
	// as a whole word. This is used for building autocomplete and instant search interfaces. Defaults to
	// true.
	Prefix OptString `json:"prefix"`
	// If infix index is enabled for this field, infix searching can be done on a per-field basis by
	// sending a comma separated string parameter called infix to the search query. This parameter can
	// have 3 values; `off` infix search is disabled, which is default `always` infix search is performed
	// along with regular search `fallback` infix search is performed if regular search does not produce
	// results.
	Infix OptString `json:"infix"`
	// There are also 2 parameters that allow you to control the extent of infix searching
	// max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after
	// the query that can be present in the token. For example query "K2100" has 2 extra symbols in
	// "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
	MaxExtraPrefix OptInt `json:"max_extra_prefix"`
	// There are also 2 parameters that allow you to control the extent of infix searching
	// max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after
	// the query that can be present in the token. For example query "K2100" has 2 extra symbols in
	// "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
	MaxExtraSuffix OptInt `json:"max_extra_suffix"`
	// Filter conditions for refining youropen api validator search results. Separate multiple conditions
	// with &&.
	FilterBy OptString `json:"filter_by"`
	// A list of numerical fields and their corresponding sort orders that will be used for ordering your
	// results. Up to 3 sort fields can be specified. The text similarity score is exposed as a special
	// `_text_match` field that you can use in the list of sorting fields. If no `sort_by` parameter is
	// specified, results are sorted by `_text_match:desc,default_sorting_field:desc`.
	SortBy OptString `json:"sort_by"`
	// A list of fields that will be used for faceting your results on. Separate multiple fields with a
	// comma.
	FacetBy OptString `json:"facet_by"`
	// Maximum number of facet values to be returned.
	MaxFacetValues OptInt `json:"max_facet_values"`
	// Facet values that are returned can now be filtered via this parameter. The matching facet text is
	// also highlighted. For example, when faceting by `category`, you can set
	// `facet_query=category:shoe` to return only facet values that contain the prefix "shoe".
	FacetQuery OptString `json:"facet_query"`
	// The number of typographical errors (1 or 2) that would be tolerated. Default: 2.
	NumTypos OptString `json:"num_typos"`
	// Results from this specific page number would be fetched.
	Page OptInt `json:"page"`
	// Number of results to fetch per page. Default: 10.
	PerPage OptInt `json:"per_page"`
	// Number of hits to fetch. Can be used as an alternative to the per_page parameter. Default: 10.
	Limit OptInt `json:"limit"`
	// Identifies the starting point to return hits from a result set. Can be used as an alternative to
	// the page parameter.
	Offset OptInt `json:"offset"`
	// You can aggregate search results into groups or buckets by specify one or more `group_by` fields.
	// Separate multiple fields with a comma. To group on a particular field, it must be a faceted field.
	GroupBy OptString `json:"group_by"`
	// Maximum number of hits to be returned for every group. If the `group_limit` is set as `K` then
	// only the top K hits in each group are returned in the response. Default: 3.
	GroupLimit OptInt `json:"group_limit"`
	// Setting this parameter to true will place all documents that have a null value in the group_by
	// field, into a single group. Setting this parameter to false, will cause each document with a null
	// value in the group_by field to not be grouped with other documents. Default: true.
	GroupMissingValues OptBool `json:"group_missing_values"`
	// List of fields from the document to include in the search result.
	IncludeFields OptString `json:"include_fields"`
	// List of fields from the document to exclude in the search result.
	ExcludeFields OptString `json:"exclude_fields"`
	// List of fields which should be highlighted fully without snippeting.
	HighlightFullFields OptString `json:"highlight_full_fields"`
	// The number of tokens that should surround the highlighted text on each side. Default: 4.
	HighlightAffixNumTokens OptInt `json:"highlight_affix_num_tokens"`
	// The start tag used for the highlighted snippets. Default: `<mark>`.
	HighlightStartTag OptString `json:"highlight_start_tag"`
	// The end tag used for the highlighted snippets. Default: `</mark>`.
	HighlightEndTag OptString `json:"highlight_end_tag"`
	// Field values under this length will be fully highlighted, instead of showing a snippet of relevant
	// portion. Default: 30.
	SnippetThreshold OptInt `json:"snippet_threshold"`
	// If the number of results found for a specific query is less than this number, Typesense will
	// attempt to drop the tokens in the query until enough results are found. Tokens that have the least
	// individual hits are dropped first. Set to 0 to disable. Default: 10.
	DropTokensThreshold OptInt            `json:"drop_tokens_threshold"`
	DropTokensMode      OptDropTokensMode `json:"drop_tokens_mode"`
	// If the number of results found for a specific query is less than this number, Typesense will
	// attempt to look for tokens with more typos until enough results are found. Default: 100.
	TypoTokensThreshold OptInt `json:"typo_tokens_threshold"`
	// Set this parameter to false to disable typos on alphanumerical query tokens. Default: true.
	EnableTyposForAlphaNumericalTokens OptBool `json:"enable_typos_for_alpha_numerical_tokens"`
	// Whether the filter_by condition of the search query should be applicable to curated results
	// (override definitions, pinned hits, hidden hits, etc.). Default: false.
	FilterCuratedHits OptBool `json:"filter_curated_hits"`
	// If you have some synonyms defined but want to disable all of them for a particular search query,
	// set enable_synonyms to false. Default: true.
	EnableSynonyms OptBool `json:"enable_synonyms"`
	// Allow synonym resolution on word prefixes in the query. Default: false.
	SynonymPrefix OptBool `json:"synonym_prefix"`
	// Allow synonym resolution on typo-corrected words in the query. Default: 0.
	SynonymNumTypos OptInt `json:"synonym_num_typos"`
	// A list of records to unconditionally include in the search results at specific positions. An
	// example use case would be to feature or promote certain items on the top of search results. A list
	// of `record_id:hit_position`. Eg: to include a record with ID 123 at Position 1 and another record
	// with ID 456 at Position 5, you'd specify `123:1,456:5`.
	// You could also use the Overrides feature to override search results based on rules. Overrides are
	// applied first, followed by `pinned_hits` and finally `hidden_hits`.
	PinnedHits OptString `json:"pinned_hits"`
	// A list of records to unconditionally hide from search results. A list of `record_id`s to hide. Eg:
	// to hide records with IDs 123 and 456, you'd specify `123,456`.
	// You could also use the Overrides feature to override search results based on rules. Overrides are
	// applied first, followed by `pinned_hits` and finally `hidden_hits`.
	HiddenHits OptString `json:"hidden_hits"`
	// Comma separated list of tags to trigger the curations rules that match the tags.
	OverrideTags OptString `json:"override_tags"`
	// A list of custom fields that must be highlighted even if you don't query for them.
	HighlightFields OptString `json:"highlight_fields"`
	// You can index content from any logographic language into Typesense if you are able to segment /
	// split the text into space-separated words yourself before indexing and querying.
	// Set this parameter to true to do the same.
	PreSegmentedQuery OptBool `json:"pre_segmented_query"`
	// Search using a bunch of search parameters by setting this parameter to the name of the existing
	// Preset.
	Preset OptString `json:"preset"`
	// If you have some overrides defined but want to disable all of them during query time, you can do
	// that by setting this parameter to false.
	EnableOverrides OptBool `json:"enable_overrides"`
	// Set this parameter to true to ensure that an exact match is ranked above the others.
	PrioritizeExactMatch OptBool `json:"prioritize_exact_match"`
	// Make Typesense prioritize documents where the query words appear earlier in the text.
	PrioritizeTokenPosition OptBool `json:"prioritize_token_position"`
	// Make Typesense prioritize documents where the query words appear in more number of fields.
	PrioritizeNumMatchingFields OptBool `json:"prioritize_num_matching_fields"`
	// Make Typesense disable typos for numerical tokens.
	EnableTyposForNumericalTokens OptBool `json:"enable_typos_for_numerical_tokens"`
	// Setting this to true will make Typesense consider all prefixes and typo corrections of the words
	// in the query without stopping early when enough results are found (drop_tokens_threshold and
	// typo_tokens_threshold configurations are ignored).
	ExhaustiveSearch OptBool `json:"exhaustive_search"`
	// Typesense will attempt to return results early if the cutoff time has elapsed. This is not a
	// strict guarantee and facet computation is not bound by this parameter.
	SearchCutoffMs OptInt `json:"search_cutoff_ms"`
	// Enable server side caching of search query results. By default, caching is disabled.
	UseCache OptBool `json:"use_cache"`
	// The duration (in seconds) that determines how long the search query is cached. This value can be
	// set on a per-query basis. Default: 60.
	CacheTTL OptInt `json:"cache_ttl"`
	// Minimum word length for 1-typo correction to be applied. The value of num_typos is still treated
	// as the maximum allowed typos.
	MinLen1typo OptInt `json:"min_len_1typo"`
	// Minimum word length for 2-typo correction to be applied. The value of num_typos is still treated
	// as the maximum allowed typos.
	MinLen2typo OptInt `json:"min_len_2typo"`
	// Vector query expression for fetching documents "closest" to a given query/document vector.
	VectorQuery OptString `json:"vector_query"`
	// Timeout (in milliseconds) for fetching remote embeddings.
	RemoteEmbeddingTimeoutMs OptInt `json:"remote_embedding_timeout_ms"`
	// Number of times to retry fetching remote embeddings.
	RemoteEmbeddingNumTries OptInt `json:"remote_embedding_num_tries"`
	// Choose the underlying faceting strategy used. Comma separated string of allows values: exhaustive,
	// top_values or automatic (default).
	FacetStrategy OptString `json:"facet_strategy"`
	// Name of the stopwords set to apply for this search, the keywords present in the set will be
	// removed from the search query.
	Stopwords OptString `json:"stopwords"`
	// Comma separated string of nested facet fields whose parent object should be returned in facet
	// response.
	FacetReturnParent OptString `json:"facet_return_parent"`
	// The base64 encoded audio file in 16 khz 16-bit WAV format.
	VoiceQuery OptString `json:"voice_query"`
	// Enable conversational search.
	Conversation OptBool `json:"conversation"`
	// The Id of Conversation Model to be used.
	ConversationModelID OptString `json:"conversation_model_id"`
	// The Id of a previous conversation to continue, this tells Typesense to include prior context when
	// communicating with the LLM.
	ConversationID OptString `json:"conversation_id"`
	// The collection to search in.
	Collection OptString `json:"collection"`
	// A separate search API key for each search within a multi_search request.
	XMinusTypesenseMinusAPIMinusKey OptString `json:"x-typesense-api-key"`
	// When true, computes both text match and vector distance scores for all matches in hybrid search.
	// Documents found only through keyword search will get a vector distance score, and documents found
	// only through vector search will get a text match score.
	RerankHybridMatches OptBool `json:"rerank_hybrid_matches"`
}

// GetQ returns the value of Q.
func (s *MultiSearchCollectionParameters) GetQ() OptString {
	return s.Q
}

// GetQueryBy returns the value of QueryBy.
func (s *MultiSearchCollectionParameters) GetQueryBy() OptString {
	return s.QueryBy
}

// GetQueryByWeights returns the value of QueryByWeights.
func (s *MultiSearchCollectionParameters) GetQueryByWeights() OptString {
	return s.QueryByWeights
}

// GetTextMatchType returns the value of TextMatchType.
func (s *MultiSearchCollectionParameters) GetTextMatchType() OptString {
	return s.TextMatchType
}

// GetPrefix returns the value of Prefix.
func (s *MultiSearchCollectionParameters) GetPrefix() OptString {
	return s.Prefix
}

// GetInfix returns the value of Infix.
func (s *MultiSearchCollectionParameters) GetInfix() OptString {
	return s.Infix
}

// GetMaxExtraPrefix returns the value of MaxExtraPrefix.
func (s *MultiSearchCollectionParameters) GetMaxExtraPrefix() OptInt {
	return s.MaxExtraPrefix
}

// GetMaxExtraSuffix returns the value of MaxExtraSuffix.
func (s *MultiSearchCollectionParameters) GetMaxExtraSuffix() OptInt {
	return s.MaxExtraSuffix
}

// GetFilterBy returns the value of FilterBy.
func (s *MultiSearchCollectionParameters) GetFilterBy() OptString {
	return s.FilterBy
}

// GetSortBy returns the value of SortBy.
func (s *MultiSearchCollectionParameters) GetSortBy() OptString {
	return s.SortBy
}

// GetFacetBy returns the value of FacetBy.
func (s *MultiSearchCollectionParameters) GetFacetBy() OptString {
	return s.FacetBy
}

// GetMaxFacetValues returns the value of MaxFacetValues.
func (s *MultiSearchCollectionParameters) GetMaxFacetValues() OptInt {
	return s.MaxFacetValues
}

// GetFacetQuery returns the value of FacetQuery.
func (s *MultiSearchCollectionParameters) GetFacetQuery() OptString {
	return s.FacetQuery
}

// GetNumTypos returns the value of NumTypos.
func (s *MultiSearchCollectionParameters) GetNumTypos() OptString {
	return s.NumTypos
}

// GetPage returns the value of Page.
func (s *MultiSearchCollectionParameters) GetPage() OptInt {
	return s.Page
}

// GetPerPage returns the value of PerPage.
func (s *MultiSearchCollectionParameters) GetPerPage() OptInt {
	return s.PerPage
}

// GetLimit returns the value of Limit.
func (s *MultiSearchCollectionParameters) GetLimit() OptInt {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *MultiSearchCollectionParameters) GetOffset() OptInt {
	return s.Offset
}

// GetGroupBy returns the value of GroupBy.
func (s *MultiSearchCollectionParameters) GetGroupBy() OptString {
	return s.GroupBy
}

// GetGroupLimit returns the value of GroupLimit.
func (s *MultiSearchCollectionParameters) GetGroupLimit() OptInt {
	return s.GroupLimit
}

// GetGroupMissingValues returns the value of GroupMissingValues.
func (s *MultiSearchCollectionParameters) GetGroupMissingValues() OptBool {
	return s.GroupMissingValues
}

// GetIncludeFields returns the value of IncludeFields.
func (s *MultiSearchCollectionParameters) GetIncludeFields() OptString {
	return s.IncludeFields
}

// GetExcludeFields returns the value of ExcludeFields.
func (s *MultiSearchCollectionParameters) GetExcludeFields() OptString {
	return s.ExcludeFields
}

// GetHighlightFullFields returns the value of HighlightFullFields.
func (s *MultiSearchCollectionParameters) GetHighlightFullFields() OptString {
	return s.HighlightFullFields
}

// GetHighlightAffixNumTokens returns the value of HighlightAffixNumTokens.
func (s *MultiSearchCollectionParameters) GetHighlightAffixNumTokens() OptInt {
	return s.HighlightAffixNumTokens
}

// GetHighlightStartTag returns the value of HighlightStartTag.
func (s *MultiSearchCollectionParameters) GetHighlightStartTag() OptString {
	return s.HighlightStartTag
}

// GetHighlightEndTag returns the value of HighlightEndTag.
func (s *MultiSearchCollectionParameters) GetHighlightEndTag() OptString {
	return s.HighlightEndTag
}

// GetSnippetThreshold returns the value of SnippetThreshold.
func (s *MultiSearchCollectionParameters) GetSnippetThreshold() OptInt {
	return s.SnippetThreshold
}

// GetDropTokensThreshold returns the value of DropTokensThreshold.
func (s *MultiSearchCollectionParameters) GetDropTokensThreshold() OptInt {
	return s.DropTokensThreshold
}

// GetDropTokensMode returns the value of DropTokensMode.
func (s *MultiSearchCollectionParameters) GetDropTokensMode() OptDropTokensMode {
	return s.DropTokensMode
}

// GetTypoTokensThreshold returns the value of TypoTokensThreshold.
func (s *MultiSearchCollectionParameters) GetTypoTokensThreshold() OptInt {
	return s.TypoTokensThreshold
}

// GetEnableTyposForAlphaNumericalTokens returns the value of EnableTyposForAlphaNumericalTokens.
func (s *MultiSearchCollectionParameters) GetEnableTyposForAlphaNumericalTokens() OptBool {
	return s.EnableTyposForAlphaNumericalTokens
}

// GetFilterCuratedHits returns the value of FilterCuratedHits.
func (s *MultiSearchCollectionParameters) GetFilterCuratedHits() OptBool {
	return s.FilterCuratedHits
}

// GetEnableSynonyms returns the value of EnableSynonyms.
func (s *MultiSearchCollectionParameters) GetEnableSynonyms() OptBool {
	return s.EnableSynonyms
}

// GetSynonymPrefix returns the value of SynonymPrefix.
func (s *MultiSearchCollectionParameters) GetSynonymPrefix() OptBool {
	return s.SynonymPrefix
}

// GetSynonymNumTypos returns the value of SynonymNumTypos.
func (s *MultiSearchCollectionParameters) GetSynonymNumTypos() OptInt {
	return s.SynonymNumTypos
}

// GetPinnedHits returns the value of PinnedHits.
func (s *MultiSearchCollectionParameters) GetPinnedHits() OptString {
	return s.PinnedHits
}

// GetHiddenHits returns the value of HiddenHits.
func (s *MultiSearchCollectionParameters) GetHiddenHits() OptString {
	return s.HiddenHits
}

// GetOverrideTags returns the value of OverrideTags.
func (s *MultiSearchCollectionParameters) GetOverrideTags() OptString {
	return s.OverrideTags
}

// GetHighlightFields returns the value of HighlightFields.
func (s *MultiSearchCollectionParameters) GetHighlightFields() OptString {
	return s.HighlightFields
}

// GetPreSegmentedQuery returns the value of PreSegmentedQuery.
func (s *MultiSearchCollectionParameters) GetPreSegmentedQuery() OptBool {
	return s.PreSegmentedQuery
}

// GetPreset returns the value of Preset.
func (s *MultiSearchCollectionParameters) GetPreset() OptString {
	return s.Preset
}

// GetEnableOverrides returns the value of EnableOverrides.
func (s *MultiSearchCollectionParameters) GetEnableOverrides() OptBool {
	return s.EnableOverrides
}

// GetPrioritizeExactMatch returns the value of PrioritizeExactMatch.
func (s *MultiSearchCollectionParameters) GetPrioritizeExactMatch() OptBool {
	return s.PrioritizeExactMatch
}

// GetPrioritizeTokenPosition returns the value of PrioritizeTokenPosition.
func (s *MultiSearchCollectionParameters) GetPrioritizeTokenPosition() OptBool {
	return s.PrioritizeTokenPosition
}

// GetPrioritizeNumMatchingFields returns the value of PrioritizeNumMatchingFields.
func (s *MultiSearchCollectionParameters) GetPrioritizeNumMatchingFields() OptBool {
	return s.PrioritizeNumMatchingFields
}

// GetEnableTyposForNumericalTokens returns the value of EnableTyposForNumericalTokens.
func (s *MultiSearchCollectionParameters) GetEnableTyposForNumericalTokens() OptBool {
	return s.EnableTyposForNumericalTokens
}

// GetExhaustiveSearch returns the value of ExhaustiveSearch.
func (s *MultiSearchCollectionParameters) GetExhaustiveSearch() OptBool {
	return s.ExhaustiveSearch
}

// GetSearchCutoffMs returns the value of SearchCutoffMs.
func (s *MultiSearchCollectionParameters) GetSearchCutoffMs() OptInt {
	return s.SearchCutoffMs
}

// GetUseCache returns the value of UseCache.
func (s *MultiSearchCollectionParameters) GetUseCache() OptBool {
	return s.UseCache
}

// GetCacheTTL returns the value of CacheTTL.
func (s *MultiSearchCollectionParameters) GetCacheTTL() OptInt {
	return s.CacheTTL
}

// GetMinLen1typo returns the value of MinLen1typo.
func (s *MultiSearchCollectionParameters) GetMinLen1typo() OptInt {
	return s.MinLen1typo
}

// GetMinLen2typo returns the value of MinLen2typo.
func (s *MultiSearchCollectionParameters) GetMinLen2typo() OptInt {
	return s.MinLen2typo
}

// GetVectorQuery returns the value of VectorQuery.
func (s *MultiSearchCollectionParameters) GetVectorQuery() OptString {
	return s.VectorQuery
}

// GetRemoteEmbeddingTimeoutMs returns the value of RemoteEmbeddingTimeoutMs.
func (s *MultiSearchCollectionParameters) GetRemoteEmbeddingTimeoutMs() OptInt {
	return s.RemoteEmbeddingTimeoutMs
}

// GetRemoteEmbeddingNumTries returns the value of RemoteEmbeddingNumTries.
func (s *MultiSearchCollectionParameters) GetRemoteEmbeddingNumTries() OptInt {
	return s.RemoteEmbeddingNumTries
}

// GetFacetStrategy returns the value of FacetStrategy.
func (s *MultiSearchCollectionParameters) GetFacetStrategy() OptString {
	return s.FacetStrategy
}

// GetStopwords returns the value of Stopwords.
func (s *MultiSearchCollectionParameters) GetStopwords() OptString {
	return s.Stopwords
}

// GetFacetReturnParent returns the value of FacetReturnParent.
func (s *MultiSearchCollectionParameters) GetFacetReturnParent() OptString {
	return s.FacetReturnParent
}

// GetVoiceQuery returns the value of VoiceQuery.
func (s *MultiSearchCollectionParameters) GetVoiceQuery() OptString {
	return s.VoiceQuery
}

// GetConversation returns the value of Conversation.
func (s *MultiSearchCollectionParameters) GetConversation() OptBool {
	return s.Conversation
}

// GetConversationModelID returns the value of ConversationModelID.
func (s *MultiSearchCollectionParameters) GetConversationModelID() OptString {
	return s.ConversationModelID
}

// GetConversationID returns the value of ConversationID.
func (s *MultiSearchCollectionParameters) GetConversationID() OptString {
	return s.ConversationID
}

// GetCollection returns the value of Collection.
func (s *MultiSearchCollectionParameters) GetCollection() OptString {
	return s.Collection
}

// GetXMinusTypesenseMinusAPIMinusKey returns the value of XMinusTypesenseMinusAPIMinusKey.
func (s *MultiSearchCollectionParameters) GetXMinusTypesenseMinusAPIMinusKey() OptString {
	return s.XMinusTypesenseMinusAPIMinusKey
}

// GetRerankHybridMatches returns the value of RerankHybridMatches.
func (s *MultiSearchCollectionParameters) GetRerankHybridMatches() OptBool {
	return s.RerankHybridMatches
}

// SetQ sets the value of Q.
func (s *MultiSearchCollectionParameters) SetQ(val OptString) {
	s.Q = val
}

// SetQueryBy sets the value of QueryBy.
func (s *MultiSearchCollectionParameters) SetQueryBy(val OptString) {
	s.QueryBy = val
}

// SetQueryByWeights sets the value of QueryByWeights.
func (s *MultiSearchCollectionParameters) SetQueryByWeights(val OptString) {
	s.QueryByWeights = val
}

// SetTextMatchType sets the value of TextMatchType.
func (s *MultiSearchCollectionParameters) SetTextMatchType(val OptString) {
	s.TextMatchType = val
}

// SetPrefix sets the value of Prefix.
func (s *MultiSearchCollectionParameters) SetPrefix(val OptString) {
	s.Prefix = val
}

// SetInfix sets the value of Infix.
func (s *MultiSearchCollectionParameters) SetInfix(val OptString) {
	s.Infix = val
}

// SetMaxExtraPrefix sets the value of MaxExtraPrefix.
func (s *MultiSearchCollectionParameters) SetMaxExtraPrefix(val OptInt) {
	s.MaxExtraPrefix = val
}

// SetMaxExtraSuffix sets the value of MaxExtraSuffix.
func (s *MultiSearchCollectionParameters) SetMaxExtraSuffix(val OptInt) {
	s.MaxExtraSuffix = val
}

// SetFilterBy sets the value of FilterBy.
func (s *MultiSearchCollectionParameters) SetFilterBy(val OptString) {
	s.FilterBy = val
}

// SetSortBy sets the value of SortBy.
func (s *MultiSearchCollectionParameters) SetSortBy(val OptString) {
	s.SortBy = val
}

// SetFacetBy sets the value of FacetBy.
func (s *MultiSearchCollectionParameters) SetFacetBy(val OptString) {
	s.FacetBy = val
}

// SetMaxFacetValues sets the value of MaxFacetValues.
func (s *MultiSearchCollectionParameters) SetMaxFacetValues(val OptInt) {
	s.MaxFacetValues = val
}

// SetFacetQuery sets the value of FacetQuery.
func (s *MultiSearchCollectionParameters) SetFacetQuery(val OptString) {
	s.FacetQuery = val
}

// SetNumTypos sets the value of NumTypos.
func (s *MultiSearchCollectionParameters) SetNumTypos(val OptString) {
	s.NumTypos = val
}

// SetPage sets the value of Page.
func (s *MultiSearchCollectionParameters) SetPage(val OptInt) {
	s.Page = val
}

// SetPerPage sets the value of PerPage.
func (s *MultiSearchCollectionParameters) SetPerPage(val OptInt) {
	s.PerPage = val
}

// SetLimit sets the value of Limit.
func (s *MultiSearchCollectionParameters) SetLimit(val OptInt) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *MultiSearchCollectionParameters) SetOffset(val OptInt) {
	s.Offset = val
}

// SetGroupBy sets the value of GroupBy.
func (s *MultiSearchCollectionParameters) SetGroupBy(val OptString) {
	s.GroupBy = val
}

// SetGroupLimit sets the value of GroupLimit.
func (s *MultiSearchCollectionParameters) SetGroupLimit(val OptInt) {
	s.GroupLimit = val
}

// SetGroupMissingValues sets the value of GroupMissingValues.
func (s *MultiSearchCollectionParameters) SetGroupMissingValues(val OptBool) {
	s.GroupMissingValues = val
}

// SetIncludeFields sets the value of IncludeFields.
func (s *MultiSearchCollectionParameters) SetIncludeFields(val OptString) {
	s.IncludeFields = val
}

// SetExcludeFields sets the value of ExcludeFields.
func (s *MultiSearchCollectionParameters) SetExcludeFields(val OptString) {
	s.ExcludeFields = val
}

// SetHighlightFullFields sets the value of HighlightFullFields.
func (s *MultiSearchCollectionParameters) SetHighlightFullFields(val OptString) {
	s.HighlightFullFields = val
}

// SetHighlightAffixNumTokens sets the value of HighlightAffixNumTokens.
func (s *MultiSearchCollectionParameters) SetHighlightAffixNumTokens(val OptInt) {
	s.HighlightAffixNumTokens = val
}

// SetHighlightStartTag sets the value of HighlightStartTag.
func (s *MultiSearchCollectionParameters) SetHighlightStartTag(val OptString) {
	s.HighlightStartTag = val
}

// SetHighlightEndTag sets the value of HighlightEndTag.
func (s *MultiSearchCollectionParameters) SetHighlightEndTag(val OptString) {
	s.HighlightEndTag = val
}

// SetSnippetThreshold sets the value of SnippetThreshold.
func (s *MultiSearchCollectionParameters) SetSnippetThreshold(val OptInt) {
	s.SnippetThreshold = val
}

// SetDropTokensThreshold sets the value of DropTokensThreshold.
func (s *MultiSearchCollectionParameters) SetDropTokensThreshold(val OptInt) {
	s.DropTokensThreshold = val
}

// SetDropTokensMode sets the value of DropTokensMode.
func (s *MultiSearchCollectionParameters) SetDropTokensMode(val OptDropTokensMode) {
	s.DropTokensMode = val
}

// SetTypoTokensThreshold sets the value of TypoTokensThreshold.
func (s *MultiSearchCollectionParameters) SetTypoTokensThreshold(val OptInt) {
	s.TypoTokensThreshold = val
}

// SetEnableTyposForAlphaNumericalTokens sets the value of EnableTyposForAlphaNumericalTokens.
func (s *MultiSearchCollectionParameters) SetEnableTyposForAlphaNumericalTokens(val OptBool) {
	s.EnableTyposForAlphaNumericalTokens = val
}

// SetFilterCuratedHits sets the value of FilterCuratedHits.
func (s *MultiSearchCollectionParameters) SetFilterCuratedHits(val OptBool) {
	s.FilterCuratedHits = val
}

// SetEnableSynonyms sets the value of EnableSynonyms.
func (s *MultiSearchCollectionParameters) SetEnableSynonyms(val OptBool) {
	s.EnableSynonyms = val
}

// SetSynonymPrefix sets the value of SynonymPrefix.
func (s *MultiSearchCollectionParameters) SetSynonymPrefix(val OptBool) {
	s.SynonymPrefix = val
}

// SetSynonymNumTypos sets the value of SynonymNumTypos.
func (s *MultiSearchCollectionParameters) SetSynonymNumTypos(val OptInt) {
	s.SynonymNumTypos = val
}

// SetPinnedHits sets the value of PinnedHits.
func (s *MultiSearchCollectionParameters) SetPinnedHits(val OptString) {
	s.PinnedHits = val
}

// SetHiddenHits sets the value of HiddenHits.
func (s *MultiSearchCollectionParameters) SetHiddenHits(val OptString) {
	s.HiddenHits = val
}

// SetOverrideTags sets the value of OverrideTags.
func (s *MultiSearchCollectionParameters) SetOverrideTags(val OptString) {
	s.OverrideTags = val
}

// SetHighlightFields sets the value of HighlightFields.
func (s *MultiSearchCollectionParameters) SetHighlightFields(val OptString) {
	s.HighlightFields = val
}

// SetPreSegmentedQuery sets the value of PreSegmentedQuery.
func (s *MultiSearchCollectionParameters) SetPreSegmentedQuery(val OptBool) {
	s.PreSegmentedQuery = val
}

// SetPreset sets the value of Preset.
func (s *MultiSearchCollectionParameters) SetPreset(val OptString) {
	s.Preset = val
}

// SetEnableOverrides sets the value of EnableOverrides.
func (s *MultiSearchCollectionParameters) SetEnableOverrides(val OptBool) {
	s.EnableOverrides = val
}

// SetPrioritizeExactMatch sets the value of PrioritizeExactMatch.
func (s *MultiSearchCollectionParameters) SetPrioritizeExactMatch(val OptBool) {
	s.PrioritizeExactMatch = val
}

// SetPrioritizeTokenPosition sets the value of PrioritizeTokenPosition.
func (s *MultiSearchCollectionParameters) SetPrioritizeTokenPosition(val OptBool) {
	s.PrioritizeTokenPosition = val
}

// SetPrioritizeNumMatchingFields sets the value of PrioritizeNumMatchingFields.
func (s *MultiSearchCollectionParameters) SetPrioritizeNumMatchingFields(val OptBool) {
	s.PrioritizeNumMatchingFields = val
}

// SetEnableTyposForNumericalTokens sets the value of EnableTyposForNumericalTokens.
func (s *MultiSearchCollectionParameters) SetEnableTyposForNumericalTokens(val OptBool) {
	s.EnableTyposForNumericalTokens = val
}

// SetExhaustiveSearch sets the value of ExhaustiveSearch.
func (s *MultiSearchCollectionParameters) SetExhaustiveSearch(val OptBool) {
	s.ExhaustiveSearch = val
}

// SetSearchCutoffMs sets the value of SearchCutoffMs.
func (s *MultiSearchCollectionParameters) SetSearchCutoffMs(val OptInt) {
	s.SearchCutoffMs = val
}

// SetUseCache sets the value of UseCache.
func (s *MultiSearchCollectionParameters) SetUseCache(val OptBool) {
	s.UseCache = val
}

// SetCacheTTL sets the value of CacheTTL.
func (s *MultiSearchCollectionParameters) SetCacheTTL(val OptInt) {
	s.CacheTTL = val
}

// SetMinLen1typo sets the value of MinLen1typo.
func (s *MultiSearchCollectionParameters) SetMinLen1typo(val OptInt) {
	s.MinLen1typo = val
}

// SetMinLen2typo sets the value of MinLen2typo.
func (s *MultiSearchCollectionParameters) SetMinLen2typo(val OptInt) {
	s.MinLen2typo = val
}

// SetVectorQuery sets the value of VectorQuery.
func (s *MultiSearchCollectionParameters) SetVectorQuery(val OptString) {
	s.VectorQuery = val
}

// SetRemoteEmbeddingTimeoutMs sets the value of RemoteEmbeddingTimeoutMs.
func (s *MultiSearchCollectionParameters) SetRemoteEmbeddingTimeoutMs(val OptInt) {
	s.RemoteEmbeddingTimeoutMs = val
}

// SetRemoteEmbeddingNumTries sets the value of RemoteEmbeddingNumTries.
func (s *MultiSearchCollectionParameters) SetRemoteEmbeddingNumTries(val OptInt) {
	s.RemoteEmbeddingNumTries = val
}

// SetFacetStrategy sets the value of FacetStrategy.
func (s *MultiSearchCollectionParameters) SetFacetStrategy(val OptString) {
	s.FacetStrategy = val
}

// SetStopwords sets the value of Stopwords.
func (s *MultiSearchCollectionParameters) SetStopwords(val OptString) {
	s.Stopwords = val
}

// SetFacetReturnParent sets the value of FacetReturnParent.
func (s *MultiSearchCollectionParameters) SetFacetReturnParent(val OptString) {
	s.FacetReturnParent = val
}

// SetVoiceQuery sets the value of VoiceQuery.
func (s *MultiSearchCollectionParameters) SetVoiceQuery(val OptString) {
	s.VoiceQuery = val
}

// SetConversation sets the value of Conversation.
func (s *MultiSearchCollectionParameters) SetConversation(val OptBool) {
	s.Conversation = val
}

// SetConversationModelID sets the value of ConversationModelID.
func (s *MultiSearchCollectionParameters) SetConversationModelID(val OptString) {
	s.ConversationModelID = val
}

// SetConversationID sets the value of ConversationID.
func (s *MultiSearchCollectionParameters) SetConversationID(val OptString) {
	s.ConversationID = val
}

// SetCollection sets the value of Collection.
func (s *MultiSearchCollectionParameters) SetCollection(val OptString) {
	s.Collection = val
}

// SetXMinusTypesenseMinusAPIMinusKey sets the value of XMinusTypesenseMinusAPIMinusKey.
func (s *MultiSearchCollectionParameters) SetXMinusTypesenseMinusAPIMinusKey(val OptString) {
	s.XMinusTypesenseMinusAPIMinusKey = val
}

// SetRerankHybridMatches sets the value of RerankHybridMatches.
func (s *MultiSearchCollectionParameters) SetRerankHybridMatches(val OptBool) {
	s.RerankHybridMatches = val
}

// Parameters for the multi search API.
// Ref: #/components/schemas/MultiSearchParameters
type MultiSearchParameters struct {
	// The query text to search for in the collection. Use * as the search string to return all documents.
	//  This is typically useful when used in conjunction with filter_by.
	Q OptString `json:"q"`
	// A list of `string` fields that should be queried against. Multiple fields are separated with a
	// comma.
	QueryBy OptString `json:"query_by"`
	// The relative weight to give each `query_by` field when ranking results. This can be used to boost
	// fields in priority, when looking for matches. Multiple fields are separated with a comma.
	QueryByWeights OptString `json:"query_by_weights"`
	// In a multi-field matching context, this parameter determines how the representative text match
	// score of a record is calculated. Possible values are max_score (default) or max_weight.
	TextMatchType OptString `json:"text_match_type"`
	// Boolean field to indicate that the last word in the query should be treated as a prefix, and not
	// as a whole word. This is used for building autocomplete and instant search interfaces. Defaults to
	// true.
	Prefix OptString `json:"prefix"`
	// If infix index is enabled for this field, infix searching can be done on a per-field basis by
	// sending a comma separated string parameter called infix to the search query. This parameter can
	// have 3 values; `off` infix search is disabled, which is default `always` infix search is performed
	// along with regular search `fallback` infix search is performed if regular search does not produce
	// results.
	Infix OptString `json:"infix"`
	// There are also 2 parameters that allow you to control the extent of infix searching
	// max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after
	// the query that can be present in the token. For example query "K2100" has 2 extra symbols in
	// "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
	MaxExtraPrefix OptInt `json:"max_extra_prefix"`
	// There are also 2 parameters that allow you to control the extent of infix searching
	// max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after
	// the query that can be present in the token. For example query "K2100" has 2 extra symbols in
	// "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
	MaxExtraSuffix OptInt `json:"max_extra_suffix"`
	// Filter conditions for refining youropen api validator search results. Separate multiple conditions
	// with &&.
	FilterBy OptString `json:"filter_by"`
	// A list of numerical fields and their corresponding sort orders that will be used for ordering your
	// results. Up to 3 sort fields can be specified. The text similarity score is exposed as a special
	// `_text_match` field that you can use in the list of sorting fields. If no `sort_by` parameter is
	// specified, results are sorted by `_text_match:desc,default_sorting_field:desc`.
	SortBy OptString `json:"sort_by"`
	// A list of fields that will be used for faceting your results on. Separate multiple fields with a
	// comma.
	FacetBy OptString `json:"facet_by"`
	// Maximum number of facet values to be returned.
	MaxFacetValues OptInt `json:"max_facet_values"`
	// Facet values that are returned can now be filtered via this parameter. The matching facet text is
	// also highlighted. For example, when faceting by `category`, you can set
	// `facet_query=category:shoe` to return only facet values that contain the prefix "shoe".
	FacetQuery OptString `json:"facet_query"`
	// The number of typographical errors (1 or 2) that would be tolerated. Default: 2.
	NumTypos OptString `json:"num_typos"`
	// Results from this specific page number would be fetched.
	Page OptInt `json:"page"`
	// Number of results to fetch per page. Default: 10.
	PerPage OptInt `json:"per_page"`
	// Number of hits to fetch. Can be used as an alternative to the per_page parameter. Default: 10.
	Limit OptInt `json:"limit"`
	// Identifies the starting point to return hits from a result set. Can be used as an alternative to
	// the page parameter.
	Offset OptInt `json:"offset"`
	// You can aggregate search results into groups or buckets by specify one or more `group_by` fields.
	// Separate multiple fields with a comma. To group on a particular field, it must be a faceted field.
	GroupBy OptString `json:"group_by"`
	// Maximum number of hits to be returned for every group. If the `group_limit` is set as `K` then
	// only the top K hits in each group are returned in the response. Default: 3.
	GroupLimit OptInt `json:"group_limit"`
	// Setting this parameter to true will place all documents that have a null value in the group_by
	// field, into a single group. Setting this parameter to false, will cause each document with a null
	// value in the group_by field to not be grouped with other documents. Default: true.
	GroupMissingValues OptBool `json:"group_missing_values"`
	// List of fields from the document to include in the search result.
	IncludeFields OptString `json:"include_fields"`
	// List of fields from the document to exclude in the search result.
	ExcludeFields OptString `json:"exclude_fields"`
	// List of fields which should be highlighted fully without snippeting.
	HighlightFullFields OptString `json:"highlight_full_fields"`
	// The number of tokens that should surround the highlighted text on each side. Default: 4.
	HighlightAffixNumTokens OptInt `json:"highlight_affix_num_tokens"`
	// The start tag used for the highlighted snippets. Default: `<mark>`.
	HighlightStartTag OptString `json:"highlight_start_tag"`
	// The end tag used for the highlighted snippets. Default: `</mark>`.
	HighlightEndTag OptString `json:"highlight_end_tag"`
	// Field values under this length will be fully highlighted, instead of showing a snippet of relevant
	// portion. Default: 30.
	SnippetThreshold OptInt `json:"snippet_threshold"`
	// If the number of results found for a specific query is less than this number, Typesense will
	// attempt to drop the tokens in the query until enough results are found. Tokens that have the least
	// individual hits are dropped first. Set to 0 to disable. Default: 10.
	DropTokensThreshold OptInt            `json:"drop_tokens_threshold"`
	DropTokensMode      OptDropTokensMode `json:"drop_tokens_mode"`
	// If the number of results found for a specific query is less than this number, Typesense will
	// attempt to look for tokens with more typos until enough results are found. Default: 100.
	TypoTokensThreshold OptInt `json:"typo_tokens_threshold"`
	// Set this parameter to false to disable typos on alphanumerical query tokens. Default: true.
	EnableTyposForAlphaNumericalTokens OptBool `json:"enable_typos_for_alpha_numerical_tokens"`
	// Whether the filter_by condition of the search query should be applicable to curated results
	// (override definitions, pinned hits, hidden hits, etc.). Default: false.
	FilterCuratedHits OptBool `json:"filter_curated_hits"`
	// If you have some synonyms defined but want to disable all of them for a particular search query,
	// set enable_synonyms to false. Default: true.
	EnableSynonyms OptBool `json:"enable_synonyms"`
	// Allow synonym resolution on word prefixes in the query. Default: false.
	SynonymPrefix OptBool `json:"synonym_prefix"`
	// Allow synonym resolution on typo-corrected words in the query. Default: 0.
	SynonymNumTypos OptInt `json:"synonym_num_typos"`
	// A list of records to unconditionally include in the search results at specific positions. An
	// example use case would be to feature or promote certain items on the top of search results. A list
	// of `record_id:hit_position`. Eg: to include a record with ID 123 at Position 1 and another record
	// with ID 456 at Position 5, you'd specify `123:1,456:5`.
	// You could also use the Overrides feature to override search results based on rules. Overrides are
	// applied first, followed by `pinned_hits` and finally `hidden_hits`.
	PinnedHits OptString `json:"pinned_hits"`
	// A list of records to unconditionally hide from search results. A list of `record_id`s to hide. Eg:
	// to hide records with IDs 123 and 456, you'd specify `123,456`.
	// You could also use the Overrides feature to override search results based on rules. Overrides are
	// applied first, followed by `pinned_hits` and finally `hidden_hits`.
	HiddenHits OptString `json:"hidden_hits"`
	// Comma separated list of tags to trigger the curations rules that match the tags.
	OverrideTags OptString `json:"override_tags"`
	// A list of custom fields that must be highlighted even if you don't query for them.
	HighlightFields OptString `json:"highlight_fields"`
	// You can index content from any logographic language into Typesense if you are able to segment /
	// split the text into space-separated words yourself before indexing and querying.
	// Set this parameter to true to do the same.
	PreSegmentedQuery OptBool `json:"pre_segmented_query"`
	// Search using a bunch of search parameters by setting this parameter to the name of the existing
	// Preset.
	Preset OptString `json:"preset"`
	// If you have some overrides defined but want to disable all of them during query time, you can do
	// that by setting this parameter to false.
	EnableOverrides OptBool `json:"enable_overrides"`
	// Set this parameter to true to ensure that an exact match is ranked above the others.
	PrioritizeExactMatch OptBool `json:"prioritize_exact_match"`
	// Make Typesense prioritize documents where the query words appear earlier in the text.
	PrioritizeTokenPosition OptBool `json:"prioritize_token_position"`
	// Make Typesense prioritize documents where the query words appear in more number of fields.
	PrioritizeNumMatchingFields OptBool `json:"prioritize_num_matching_fields"`
	// Make Typesense disable typos for numerical tokens.
	EnableTyposForNumericalTokens OptBool `json:"enable_typos_for_numerical_tokens"`
	// Setting this to true will make Typesense consider all prefixes and typo corrections of the words
	// in the query without stopping early when enough results are found (drop_tokens_threshold and
	// typo_tokens_threshold configurations are ignored).
	ExhaustiveSearch OptBool `json:"exhaustive_search"`
	// Typesense will attempt to return results early if the cutoff time has elapsed. This is not a
	// strict guarantee and facet computation is not bound by this parameter.
	SearchCutoffMs OptInt `json:"search_cutoff_ms"`
	// Enable server side caching of search query results. By default, caching is disabled.
	UseCache OptBool `json:"use_cache"`
	// The duration (in seconds) that determines how long the search query is cached. This value can be
	// set on a per-query basis. Default: 60.
	CacheTTL OptInt `json:"cache_ttl"`
	// Minimum word length for 1-typo correction to be applied. The value of num_typos is still treated
	// as the maximum allowed typos.
	MinLen1typo OptInt `json:"min_len_1typo"`
	// Minimum word length for 2-typo correction to be applied. The value of num_typos is still treated
	// as the maximum allowed typos.
	MinLen2typo OptInt `json:"min_len_2typo"`
	// Vector query expression for fetching documents "closest" to a given query/document vector.
	VectorQuery OptString `json:"vector_query"`
	// Timeout (in milliseconds) for fetching remote embeddings.
	RemoteEmbeddingTimeoutMs OptInt `json:"remote_embedding_timeout_ms"`
	// Number of times to retry fetching remote embeddings.
	RemoteEmbeddingNumTries OptInt `json:"remote_embedding_num_tries"`
	// Choose the underlying faceting strategy used. Comma separated string of allows values: exhaustive,
	// top_values or automatic (default).
	FacetStrategy OptString `json:"facet_strategy"`
	// Name of the stopwords set to apply for this search, the keywords present in the set will be
	// removed from the search query.
	Stopwords OptString `json:"stopwords"`
	// Comma separated string of nested facet fields whose parent object should be returned in facet
	// response.
	FacetReturnParent OptString `json:"facet_return_parent"`
	// The base64 encoded audio file in 16 khz 16-bit WAV format.
	VoiceQuery OptString `json:"voice_query"`
	// Enable conversational search.
	Conversation OptBool `json:"conversation"`
	// The Id of Conversation Model to be used.
	ConversationModelID OptString `json:"conversation_model_id"`
	// The Id of a previous conversation to continue, this tells Typesense to include prior context when
	// communicating with the LLM.
	ConversationID OptString `json:"conversation_id"`
}

// GetQ returns the value of Q.
func (s *MultiSearchParameters) GetQ() OptString {
	return s.Q
}

// GetQueryBy returns the value of QueryBy.
func (s *MultiSearchParameters) GetQueryBy() OptString {
	return s.QueryBy
}

// GetQueryByWeights returns the value of QueryByWeights.
func (s *MultiSearchParameters) GetQueryByWeights() OptString {
	return s.QueryByWeights
}

// GetTextMatchType returns the value of TextMatchType.
func (s *MultiSearchParameters) GetTextMatchType() OptString {
	return s.TextMatchType
}

// GetPrefix returns the value of Prefix.
func (s *MultiSearchParameters) GetPrefix() OptString {
	return s.Prefix
}

// GetInfix returns the value of Infix.
func (s *MultiSearchParameters) GetInfix() OptString {
	return s.Infix
}

// GetMaxExtraPrefix returns the value of MaxExtraPrefix.
func (s *MultiSearchParameters) GetMaxExtraPrefix() OptInt {
	return s.MaxExtraPrefix
}

// GetMaxExtraSuffix returns the value of MaxExtraSuffix.
func (s *MultiSearchParameters) GetMaxExtraSuffix() OptInt {
	return s.MaxExtraSuffix
}

// GetFilterBy returns the value of FilterBy.
func (s *MultiSearchParameters) GetFilterBy() OptString {
	return s.FilterBy
}

// GetSortBy returns the value of SortBy.
func (s *MultiSearchParameters) GetSortBy() OptString {
	return s.SortBy
}

// GetFacetBy returns the value of FacetBy.
func (s *MultiSearchParameters) GetFacetBy() OptString {
	return s.FacetBy
}

// GetMaxFacetValues returns the value of MaxFacetValues.
func (s *MultiSearchParameters) GetMaxFacetValues() OptInt {
	return s.MaxFacetValues
}

// GetFacetQuery returns the value of FacetQuery.
func (s *MultiSearchParameters) GetFacetQuery() OptString {
	return s.FacetQuery
}

// GetNumTypos returns the value of NumTypos.
func (s *MultiSearchParameters) GetNumTypos() OptString {
	return s.NumTypos
}

// GetPage returns the value of Page.
func (s *MultiSearchParameters) GetPage() OptInt {
	return s.Page
}

// GetPerPage returns the value of PerPage.
func (s *MultiSearchParameters) GetPerPage() OptInt {
	return s.PerPage
}

// GetLimit returns the value of Limit.
func (s *MultiSearchParameters) GetLimit() OptInt {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *MultiSearchParameters) GetOffset() OptInt {
	return s.Offset
}

// GetGroupBy returns the value of GroupBy.
func (s *MultiSearchParameters) GetGroupBy() OptString {
	return s.GroupBy
}

// GetGroupLimit returns the value of GroupLimit.
func (s *MultiSearchParameters) GetGroupLimit() OptInt {
	return s.GroupLimit
}

// GetGroupMissingValues returns the value of GroupMissingValues.
func (s *MultiSearchParameters) GetGroupMissingValues() OptBool {
	return s.GroupMissingValues
}

// GetIncludeFields returns the value of IncludeFields.
func (s *MultiSearchParameters) GetIncludeFields() OptString {
	return s.IncludeFields
}

// GetExcludeFields returns the value of ExcludeFields.
func (s *MultiSearchParameters) GetExcludeFields() OptString {
	return s.ExcludeFields
}

// GetHighlightFullFields returns the value of HighlightFullFields.
func (s *MultiSearchParameters) GetHighlightFullFields() OptString {
	return s.HighlightFullFields
}

// GetHighlightAffixNumTokens returns the value of HighlightAffixNumTokens.
func (s *MultiSearchParameters) GetHighlightAffixNumTokens() OptInt {
	return s.HighlightAffixNumTokens
}

// GetHighlightStartTag returns the value of HighlightStartTag.
func (s *MultiSearchParameters) GetHighlightStartTag() OptString {
	return s.HighlightStartTag
}

// GetHighlightEndTag returns the value of HighlightEndTag.
func (s *MultiSearchParameters) GetHighlightEndTag() OptString {
	return s.HighlightEndTag
}

// GetSnippetThreshold returns the value of SnippetThreshold.
func (s *MultiSearchParameters) GetSnippetThreshold() OptInt {
	return s.SnippetThreshold
}

// GetDropTokensThreshold returns the value of DropTokensThreshold.
func (s *MultiSearchParameters) GetDropTokensThreshold() OptInt {
	return s.DropTokensThreshold
}

// GetDropTokensMode returns the value of DropTokensMode.
func (s *MultiSearchParameters) GetDropTokensMode() OptDropTokensMode {
	return s.DropTokensMode
}

// GetTypoTokensThreshold returns the value of TypoTokensThreshold.
func (s *MultiSearchParameters) GetTypoTokensThreshold() OptInt {
	return s.TypoTokensThreshold
}

// GetEnableTyposForAlphaNumericalTokens returns the value of EnableTyposForAlphaNumericalTokens.
func (s *MultiSearchParameters) GetEnableTyposForAlphaNumericalTokens() OptBool {
	return s.EnableTyposForAlphaNumericalTokens
}

// GetFilterCuratedHits returns the value of FilterCuratedHits.
func (s *MultiSearchParameters) GetFilterCuratedHits() OptBool {
	return s.FilterCuratedHits
}

// GetEnableSynonyms returns the value of EnableSynonyms.
func (s *MultiSearchParameters) GetEnableSynonyms() OptBool {
	return s.EnableSynonyms
}

// GetSynonymPrefix returns the value of SynonymPrefix.
func (s *MultiSearchParameters) GetSynonymPrefix() OptBool {
	return s.SynonymPrefix
}

// GetSynonymNumTypos returns the value of SynonymNumTypos.
func (s *MultiSearchParameters) GetSynonymNumTypos() OptInt {
	return s.SynonymNumTypos
}

// GetPinnedHits returns the value of PinnedHits.
func (s *MultiSearchParameters) GetPinnedHits() OptString {
	return s.PinnedHits
}

// GetHiddenHits returns the value of HiddenHits.
func (s *MultiSearchParameters) GetHiddenHits() OptString {
	return s.HiddenHits
}

// GetOverrideTags returns the value of OverrideTags.
func (s *MultiSearchParameters) GetOverrideTags() OptString {
	return s.OverrideTags
}

// GetHighlightFields returns the value of HighlightFields.
func (s *MultiSearchParameters) GetHighlightFields() OptString {
	return s.HighlightFields
}

// GetPreSegmentedQuery returns the value of PreSegmentedQuery.
func (s *MultiSearchParameters) GetPreSegmentedQuery() OptBool {
	return s.PreSegmentedQuery
}

// GetPreset returns the value of Preset.
func (s *MultiSearchParameters) GetPreset() OptString {
	return s.Preset
}

// GetEnableOverrides returns the value of EnableOverrides.
func (s *MultiSearchParameters) GetEnableOverrides() OptBool {
	return s.EnableOverrides
}

// GetPrioritizeExactMatch returns the value of PrioritizeExactMatch.
func (s *MultiSearchParameters) GetPrioritizeExactMatch() OptBool {
	return s.PrioritizeExactMatch
}

// GetPrioritizeTokenPosition returns the value of PrioritizeTokenPosition.
func (s *MultiSearchParameters) GetPrioritizeTokenPosition() OptBool {
	return s.PrioritizeTokenPosition
}

// GetPrioritizeNumMatchingFields returns the value of PrioritizeNumMatchingFields.
func (s *MultiSearchParameters) GetPrioritizeNumMatchingFields() OptBool {
	return s.PrioritizeNumMatchingFields
}

// GetEnableTyposForNumericalTokens returns the value of EnableTyposForNumericalTokens.
func (s *MultiSearchParameters) GetEnableTyposForNumericalTokens() OptBool {
	return s.EnableTyposForNumericalTokens
}

// GetExhaustiveSearch returns the value of ExhaustiveSearch.
func (s *MultiSearchParameters) GetExhaustiveSearch() OptBool {
	return s.ExhaustiveSearch
}

// GetSearchCutoffMs returns the value of SearchCutoffMs.
func (s *MultiSearchParameters) GetSearchCutoffMs() OptInt {
	return s.SearchCutoffMs
}

// GetUseCache returns the value of UseCache.
func (s *MultiSearchParameters) GetUseCache() OptBool {
	return s.UseCache
}

// GetCacheTTL returns the value of CacheTTL.
func (s *MultiSearchParameters) GetCacheTTL() OptInt {
	return s.CacheTTL
}

// GetMinLen1typo returns the value of MinLen1typo.
func (s *MultiSearchParameters) GetMinLen1typo() OptInt {
	return s.MinLen1typo
}

// GetMinLen2typo returns the value of MinLen2typo.
func (s *MultiSearchParameters) GetMinLen2typo() OptInt {
	return s.MinLen2typo
}

// GetVectorQuery returns the value of VectorQuery.
func (s *MultiSearchParameters) GetVectorQuery() OptString {
	return s.VectorQuery
}

// GetRemoteEmbeddingTimeoutMs returns the value of RemoteEmbeddingTimeoutMs.
func (s *MultiSearchParameters) GetRemoteEmbeddingTimeoutMs() OptInt {
	return s.RemoteEmbeddingTimeoutMs
}

// GetRemoteEmbeddingNumTries returns the value of RemoteEmbeddingNumTries.
func (s *MultiSearchParameters) GetRemoteEmbeddingNumTries() OptInt {
	return s.RemoteEmbeddingNumTries
}

// GetFacetStrategy returns the value of FacetStrategy.
func (s *MultiSearchParameters) GetFacetStrategy() OptString {
	return s.FacetStrategy
}

// GetStopwords returns the value of Stopwords.
func (s *MultiSearchParameters) GetStopwords() OptString {
	return s.Stopwords
}

// GetFacetReturnParent returns the value of FacetReturnParent.
func (s *MultiSearchParameters) GetFacetReturnParent() OptString {
	return s.FacetReturnParent
}

// GetVoiceQuery returns the value of VoiceQuery.
func (s *MultiSearchParameters) GetVoiceQuery() OptString {
	return s.VoiceQuery
}

// GetConversation returns the value of Conversation.
func (s *MultiSearchParameters) GetConversation() OptBool {
	return s.Conversation
}

// GetConversationModelID returns the value of ConversationModelID.
func (s *MultiSearchParameters) GetConversationModelID() OptString {
	return s.ConversationModelID
}

// GetConversationID returns the value of ConversationID.
func (s *MultiSearchParameters) GetConversationID() OptString {
	return s.ConversationID
}

// SetQ sets the value of Q.
func (s *MultiSearchParameters) SetQ(val OptString) {
	s.Q = val
}

// SetQueryBy sets the value of QueryBy.
func (s *MultiSearchParameters) SetQueryBy(val OptString) {
	s.QueryBy = val
}

// SetQueryByWeights sets the value of QueryByWeights.
func (s *MultiSearchParameters) SetQueryByWeights(val OptString) {
	s.QueryByWeights = val
}

// SetTextMatchType sets the value of TextMatchType.
func (s *MultiSearchParameters) SetTextMatchType(val OptString) {
	s.TextMatchType = val
}

// SetPrefix sets the value of Prefix.
func (s *MultiSearchParameters) SetPrefix(val OptString) {
	s.Prefix = val
}

// SetInfix sets the value of Infix.
func (s *MultiSearchParameters) SetInfix(val OptString) {
	s.Infix = val
}

// SetMaxExtraPrefix sets the value of MaxExtraPrefix.
func (s *MultiSearchParameters) SetMaxExtraPrefix(val OptInt) {
	s.MaxExtraPrefix = val
}

// SetMaxExtraSuffix sets the value of MaxExtraSuffix.
func (s *MultiSearchParameters) SetMaxExtraSuffix(val OptInt) {
	s.MaxExtraSuffix = val
}

// SetFilterBy sets the value of FilterBy.
func (s *MultiSearchParameters) SetFilterBy(val OptString) {
	s.FilterBy = val
}

// SetSortBy sets the value of SortBy.
func (s *MultiSearchParameters) SetSortBy(val OptString) {
	s.SortBy = val
}

// SetFacetBy sets the value of FacetBy.
func (s *MultiSearchParameters) SetFacetBy(val OptString) {
	s.FacetBy = val
}

// SetMaxFacetValues sets the value of MaxFacetValues.
func (s *MultiSearchParameters) SetMaxFacetValues(val OptInt) {
	s.MaxFacetValues = val
}

// SetFacetQuery sets the value of FacetQuery.
func (s *MultiSearchParameters) SetFacetQuery(val OptString) {
	s.FacetQuery = val
}

// SetNumTypos sets the value of NumTypos.
func (s *MultiSearchParameters) SetNumTypos(val OptString) {
	s.NumTypos = val
}

// SetPage sets the value of Page.
func (s *MultiSearchParameters) SetPage(val OptInt) {
	s.Page = val
}

// SetPerPage sets the value of PerPage.
func (s *MultiSearchParameters) SetPerPage(val OptInt) {
	s.PerPage = val
}

// SetLimit sets the value of Limit.
func (s *MultiSearchParameters) SetLimit(val OptInt) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *MultiSearchParameters) SetOffset(val OptInt) {
	s.Offset = val
}

// SetGroupBy sets the value of GroupBy.
func (s *MultiSearchParameters) SetGroupBy(val OptString) {
	s.GroupBy = val
}

// SetGroupLimit sets the value of GroupLimit.
func (s *MultiSearchParameters) SetGroupLimit(val OptInt) {
	s.GroupLimit = val
}

// SetGroupMissingValues sets the value of GroupMissingValues.
func (s *MultiSearchParameters) SetGroupMissingValues(val OptBool) {
	s.GroupMissingValues = val
}

// SetIncludeFields sets the value of IncludeFields.
func (s *MultiSearchParameters) SetIncludeFields(val OptString) {
	s.IncludeFields = val
}

// SetExcludeFields sets the value of ExcludeFields.
func (s *MultiSearchParameters) SetExcludeFields(val OptString) {
	s.ExcludeFields = val
}

// SetHighlightFullFields sets the value of HighlightFullFields.
func (s *MultiSearchParameters) SetHighlightFullFields(val OptString) {
	s.HighlightFullFields = val
}

// SetHighlightAffixNumTokens sets the value of HighlightAffixNumTokens.
func (s *MultiSearchParameters) SetHighlightAffixNumTokens(val OptInt) {
	s.HighlightAffixNumTokens = val
}

// SetHighlightStartTag sets the value of HighlightStartTag.
func (s *MultiSearchParameters) SetHighlightStartTag(val OptString) {
	s.HighlightStartTag = val
}

// SetHighlightEndTag sets the value of HighlightEndTag.
func (s *MultiSearchParameters) SetHighlightEndTag(val OptString) {
	s.HighlightEndTag = val
}

// SetSnippetThreshold sets the value of SnippetThreshold.
func (s *MultiSearchParameters) SetSnippetThreshold(val OptInt) {
	s.SnippetThreshold = val
}

// SetDropTokensThreshold sets the value of DropTokensThreshold.
func (s *MultiSearchParameters) SetDropTokensThreshold(val OptInt) {
	s.DropTokensThreshold = val
}

// SetDropTokensMode sets the value of DropTokensMode.
func (s *MultiSearchParameters) SetDropTokensMode(val OptDropTokensMode) {
	s.DropTokensMode = val
}

// SetTypoTokensThreshold sets the value of TypoTokensThreshold.
func (s *MultiSearchParameters) SetTypoTokensThreshold(val OptInt) {
	s.TypoTokensThreshold = val
}

// SetEnableTyposForAlphaNumericalTokens sets the value of EnableTyposForAlphaNumericalTokens.
func (s *MultiSearchParameters) SetEnableTyposForAlphaNumericalTokens(val OptBool) {
	s.EnableTyposForAlphaNumericalTokens = val
}

// SetFilterCuratedHits sets the value of FilterCuratedHits.
func (s *MultiSearchParameters) SetFilterCuratedHits(val OptBool) {
	s.FilterCuratedHits = val
}

// SetEnableSynonyms sets the value of EnableSynonyms.
func (s *MultiSearchParameters) SetEnableSynonyms(val OptBool) {
	s.EnableSynonyms = val
}

// SetSynonymPrefix sets the value of SynonymPrefix.
func (s *MultiSearchParameters) SetSynonymPrefix(val OptBool) {
	s.SynonymPrefix = val
}

// SetSynonymNumTypos sets the value of SynonymNumTypos.
func (s *MultiSearchParameters) SetSynonymNumTypos(val OptInt) {
	s.SynonymNumTypos = val
}

// SetPinnedHits sets the value of PinnedHits.
func (s *MultiSearchParameters) SetPinnedHits(val OptString) {
	s.PinnedHits = val
}

// SetHiddenHits sets the value of HiddenHits.
func (s *MultiSearchParameters) SetHiddenHits(val OptString) {
	s.HiddenHits = val
}

// SetOverrideTags sets the value of OverrideTags.
func (s *MultiSearchParameters) SetOverrideTags(val OptString) {
	s.OverrideTags = val
}

// SetHighlightFields sets the value of HighlightFields.
func (s *MultiSearchParameters) SetHighlightFields(val OptString) {
	s.HighlightFields = val
}

// SetPreSegmentedQuery sets the value of PreSegmentedQuery.
func (s *MultiSearchParameters) SetPreSegmentedQuery(val OptBool) {
	s.PreSegmentedQuery = val
}

// SetPreset sets the value of Preset.
func (s *MultiSearchParameters) SetPreset(val OptString) {
	s.Preset = val
}

// SetEnableOverrides sets the value of EnableOverrides.
func (s *MultiSearchParameters) SetEnableOverrides(val OptBool) {
	s.EnableOverrides = val
}

// SetPrioritizeExactMatch sets the value of PrioritizeExactMatch.
func (s *MultiSearchParameters) SetPrioritizeExactMatch(val OptBool) {
	s.PrioritizeExactMatch = val
}

// SetPrioritizeTokenPosition sets the value of PrioritizeTokenPosition.
func (s *MultiSearchParameters) SetPrioritizeTokenPosition(val OptBool) {
	s.PrioritizeTokenPosition = val
}

// SetPrioritizeNumMatchingFields sets the value of PrioritizeNumMatchingFields.
func (s *MultiSearchParameters) SetPrioritizeNumMatchingFields(val OptBool) {
	s.PrioritizeNumMatchingFields = val
}

// SetEnableTyposForNumericalTokens sets the value of EnableTyposForNumericalTokens.
func (s *MultiSearchParameters) SetEnableTyposForNumericalTokens(val OptBool) {
	s.EnableTyposForNumericalTokens = val
}

// SetExhaustiveSearch sets the value of ExhaustiveSearch.
func (s *MultiSearchParameters) SetExhaustiveSearch(val OptBool) {
	s.ExhaustiveSearch = val
}

// SetSearchCutoffMs sets the value of SearchCutoffMs.
func (s *MultiSearchParameters) SetSearchCutoffMs(val OptInt) {
	s.SearchCutoffMs = val
}

// SetUseCache sets the value of UseCache.
func (s *MultiSearchParameters) SetUseCache(val OptBool) {
	s.UseCache = val
}

// SetCacheTTL sets the value of CacheTTL.
func (s *MultiSearchParameters) SetCacheTTL(val OptInt) {
	s.CacheTTL = val
}

// SetMinLen1typo sets the value of MinLen1typo.
func (s *MultiSearchParameters) SetMinLen1typo(val OptInt) {
	s.MinLen1typo = val
}

// SetMinLen2typo sets the value of MinLen2typo.
func (s *MultiSearchParameters) SetMinLen2typo(val OptInt) {
	s.MinLen2typo = val
}

// SetVectorQuery sets the value of VectorQuery.
func (s *MultiSearchParameters) SetVectorQuery(val OptString) {
	s.VectorQuery = val
}

// SetRemoteEmbeddingTimeoutMs sets the value of RemoteEmbeddingTimeoutMs.
func (s *MultiSearchParameters) SetRemoteEmbeddingTimeoutMs(val OptInt) {
	s.RemoteEmbeddingTimeoutMs = val
}

// SetRemoteEmbeddingNumTries sets the value of RemoteEmbeddingNumTries.
func (s *MultiSearchParameters) SetRemoteEmbeddingNumTries(val OptInt) {
	s.RemoteEmbeddingNumTries = val
}

// SetFacetStrategy sets the value of FacetStrategy.
func (s *MultiSearchParameters) SetFacetStrategy(val OptString) {
	s.FacetStrategy = val
}

// SetStopwords sets the value of Stopwords.
func (s *MultiSearchParameters) SetStopwords(val OptString) {
	s.Stopwords = val
}

// SetFacetReturnParent sets the value of FacetReturnParent.
func (s *MultiSearchParameters) SetFacetReturnParent(val OptString) {
	s.FacetReturnParent = val
}

// SetVoiceQuery sets the value of VoiceQuery.
func (s *MultiSearchParameters) SetVoiceQuery(val OptString) {
	s.VoiceQuery = val
}

// SetConversation sets the value of Conversation.
func (s *MultiSearchParameters) SetConversation(val OptBool) {
	s.Conversation = val
}

// SetConversationModelID sets the value of ConversationModelID.
func (s *MultiSearchParameters) SetConversationModelID(val OptString) {
	s.ConversationModelID = val
}

// SetConversationID sets the value of ConversationID.
func (s *MultiSearchParameters) SetConversationID(val OptString) {
	s.ConversationID = val
}

// Ref: #/components/schemas/MultiSearchResult
type MultiSearchResult struct {
	Results      []MultiSearchResultItem     `json:"results"`
	Conversation OptSearchResultConversation `json:"conversation"`
}

// GetResults returns the value of Results.
func (s *MultiSearchResult) GetResults() []MultiSearchResultItem {
	return s.Results
}

// GetConversation returns the value of Conversation.
func (s *MultiSearchResult) GetConversation() OptSearchResultConversation {
	return s.Conversation
}

// SetResults sets the value of Results.
func (s *MultiSearchResult) SetResults(val []MultiSearchResultItem) {
	s.Results = val
}

// SetConversation sets the value of Conversation.
func (s *MultiSearchResult) SetConversation(val OptSearchResultConversation) {
	s.Conversation = val
}

func (*MultiSearchResult) multiSearchRes() {}

// Merged schema.
// Ref: #/components/schemas/MultiSearchResultItem
type MultiSearchResultItem struct {
	FacetCounts []FacetCounts `json:"facet_counts"`
	// The number of documents found.
	Found     OptInt `json:"found"`
	FoundDocs OptInt `json:"found_docs"`
	// The number of milliseconds the search took.
	SearchTimeMs OptInt `json:"search_time_ms"`
	// The total number of documents in the collection.
	OutOf OptInt `json:"out_of"`
	// Whether the search was cut off.
	SearchCutoff OptBool `json:"search_cutoff"`
	// The search result page number.
	Page        OptInt             `json:"page"`
	GroupedHits []SearchGroupedHit `json:"grouped_hits"`
	// The documents that matched the search query.
	Hits          []SearchResultHit           `json:"hits"`
	RequestParams OptSearchRequestParams      `json:"request_params"`
	Conversation  OptSearchResultConversation `json:"conversation"`
	// Returned only for union query response.
	UnionRequestParams []SearchRequestParams `json:"union_request_params"`
	// HTTP error code.
	Code OptInt64 `json:"code"`
	// Error description.
	Error OptString `json:"error"`
}

// GetFacetCounts returns the value of FacetCounts.
func (s *MultiSearchResultItem) GetFacetCounts() []FacetCounts {
	return s.FacetCounts
}

// GetFound returns the value of Found.
func (s *MultiSearchResultItem) GetFound() OptInt {
	return s.Found
}

// GetFoundDocs returns the value of FoundDocs.
func (s *MultiSearchResultItem) GetFoundDocs() OptInt {
	return s.FoundDocs
}

// GetSearchTimeMs returns the value of SearchTimeMs.
func (s *MultiSearchResultItem) GetSearchTimeMs() OptInt {
	return s.SearchTimeMs
}

// GetOutOf returns the value of OutOf.
func (s *MultiSearchResultItem) GetOutOf() OptInt {
	return s.OutOf
}

// GetSearchCutoff returns the value of SearchCutoff.
func (s *MultiSearchResultItem) GetSearchCutoff() OptBool {
	return s.SearchCutoff
}

// GetPage returns the value of Page.
func (s *MultiSearchResultItem) GetPage() OptInt {
	return s.Page
}

// GetGroupedHits returns the value of GroupedHits.
func (s *MultiSearchResultItem) GetGroupedHits() []SearchGroupedHit {
	return s.GroupedHits
}

// GetHits returns the value of Hits.
func (s *MultiSearchResultItem) GetHits() []SearchResultHit {
	return s.Hits
}

// GetRequestParams returns the value of RequestParams.
func (s *MultiSearchResultItem) GetRequestParams() OptSearchRequestParams {
	return s.RequestParams
}

// GetConversation returns the value of Conversation.
func (s *MultiSearchResultItem) GetConversation() OptSearchResultConversation {
	return s.Conversation
}

// GetUnionRequestParams returns the value of UnionRequestParams.
func (s *MultiSearchResultItem) GetUnionRequestParams() []SearchRequestParams {
	return s.UnionRequestParams
}

// GetCode returns the value of Code.
func (s *MultiSearchResultItem) GetCode() OptInt64 {
	return s.Code
}

// GetError returns the value of Error.
func (s *MultiSearchResultItem) GetError() OptString {
	return s.Error
}

// SetFacetCounts sets the value of FacetCounts.
func (s *MultiSearchResultItem) SetFacetCounts(val []FacetCounts) {
	s.FacetCounts = val
}

// SetFound sets the value of Found.
func (s *MultiSearchResultItem) SetFound(val OptInt) {
	s.Found = val
}

// SetFoundDocs sets the value of FoundDocs.
func (s *MultiSearchResultItem) SetFoundDocs(val OptInt) {
	s.FoundDocs = val
}

// SetSearchTimeMs sets the value of SearchTimeMs.
func (s *MultiSearchResultItem) SetSearchTimeMs(val OptInt) {
	s.SearchTimeMs = val
}

// SetOutOf sets the value of OutOf.
func (s *MultiSearchResultItem) SetOutOf(val OptInt) {
	s.OutOf = val
}

// SetSearchCutoff sets the value of SearchCutoff.
func (s *MultiSearchResultItem) SetSearchCutoff(val OptBool) {
	s.SearchCutoff = val
}

// SetPage sets the value of Page.
func (s *MultiSearchResultItem) SetPage(val OptInt) {
	s.Page = val
}

// SetGroupedHits sets the value of GroupedHits.
func (s *MultiSearchResultItem) SetGroupedHits(val []SearchGroupedHit) {
	s.GroupedHits = val
}

// SetHits sets the value of Hits.
func (s *MultiSearchResultItem) SetHits(val []SearchResultHit) {
	s.Hits = val
}

// SetRequestParams sets the value of RequestParams.
func (s *MultiSearchResultItem) SetRequestParams(val OptSearchRequestParams) {
	s.RequestParams = val
}

// SetConversation sets the value of Conversation.
func (s *MultiSearchResultItem) SetConversation(val OptSearchResultConversation) {
	s.Conversation = val
}

// SetUnionRequestParams sets the value of UnionRequestParams.
func (s *MultiSearchResultItem) SetUnionRequestParams(val []SearchRequestParams) {
	s.UnionRequestParams = val
}

// SetCode sets the value of Code.
func (s *MultiSearchResultItem) SetCode(val OptInt64) {
	s.Code = val
}

// SetError sets the value of Error.
func (s *MultiSearchResultItem) SetError(val OptString) {
	s.Error = val
}

// Ref: #/components/schemas/MultiSearchSearchesParameter
type MultiSearchSearchesParameter struct {
	// When true, merges the search results from each search query into a single ordered set of hits.
	Union    OptBool                           `json:"union"`
	Searches []MultiSearchCollectionParameters `json:"searches"`
}

// GetUnion returns the value of Union.
func (s *MultiSearchSearchesParameter) GetUnion() OptBool {
	return s.Union
}

// GetSearches returns the value of Searches.
func (s *MultiSearchSearchesParameter) GetSearches() []MultiSearchCollectionParameters {
	return s.Searches
}

// SetUnion sets the value of Union.
func (s *MultiSearchSearchesParameter) SetUnion(val OptBool) {
	s.Union = val
}

// SetSearches sets the value of Searches.
func (s *MultiSearchSearchesParameter) SetSearches(val []MultiSearchCollectionParameters) {
	s.Searches = val
}

// Merged schema.
// Ref: #/components/schemas/NLSearchModelCreateSchema
type NLSearchModelCreateSchema struct {
	// Name of the NL model to use.
	ModelName OptString `json:"model_name"`
	// API key for the NL model service.
	APIKey OptString `json:"api_key"`
	// Custom API URL for the NL model service.
	APIURL OptString `json:"api_url"`
	// Maximum number of bytes to process.
	MaxBytes OptInt `json:"max_bytes"`
	// Temperature parameter for the NL model.
	Temperature OptFloat64 `json:"temperature"`
	// System prompt for the NL model.
	SystemPrompt OptString `json:"system_prompt"`
	// Top-p parameter for the NL model (Google-specific).
	TopP OptFloat64 `json:"top_p"`
	// Top-k parameter for the NL model (Google-specific).
	TopK OptInt `json:"top_k"`
	// Stop sequences for the NL model (Google-specific).
	StopSequences []string `json:"stop_sequences"`
	// API version for the NL model service.
	APIVersion OptString `json:"api_version"`
	// Project ID for GCP Vertex AI.
	ProjectID OptString `json:"project_id"`
	// Access token for GCP Vertex AI.
	AccessToken OptString `json:"access_token"`
	// Refresh token for GCP Vertex AI.
	RefreshToken OptString `json:"refresh_token"`
	// Client ID for GCP Vertex AI.
	ClientID OptString `json:"client_id"`
	// Client secret for GCP Vertex AI.
	ClientSecret OptString `json:"client_secret"`
	// Region for GCP Vertex AI.
	Region OptString `json:"region"`
	// Maximum output tokens for GCP Vertex AI.
	MaxOutputTokens OptInt `json:"max_output_tokens"`
	// Account ID for Cloudflare-specific models.
	AccountID OptString `json:"account_id"`
	// Optional ID for the NL search model.
	ID OptString `json:"id"`
}

// GetModelName returns the value of ModelName.
func (s *NLSearchModelCreateSchema) GetModelName() OptString {
	return s.ModelName
}

// GetAPIKey returns the value of APIKey.
func (s *NLSearchModelCreateSchema) GetAPIKey() OptString {
	return s.APIKey
}

// GetAPIURL returns the value of APIURL.
func (s *NLSearchModelCreateSchema) GetAPIURL() OptString {
	return s.APIURL
}

// GetMaxBytes returns the value of MaxBytes.
func (s *NLSearchModelCreateSchema) GetMaxBytes() OptInt {
	return s.MaxBytes
}

// GetTemperature returns the value of Temperature.
func (s *NLSearchModelCreateSchema) GetTemperature() OptFloat64 {
	return s.Temperature
}

// GetSystemPrompt returns the value of SystemPrompt.
func (s *NLSearchModelCreateSchema) GetSystemPrompt() OptString {
	return s.SystemPrompt
}

// GetTopP returns the value of TopP.
func (s *NLSearchModelCreateSchema) GetTopP() OptFloat64 {
	return s.TopP
}

// GetTopK returns the value of TopK.
func (s *NLSearchModelCreateSchema) GetTopK() OptInt {
	return s.TopK
}

// GetStopSequences returns the value of StopSequences.
func (s *NLSearchModelCreateSchema) GetStopSequences() []string {
	return s.StopSequences
}

// GetAPIVersion returns the value of APIVersion.
func (s *NLSearchModelCreateSchema) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetProjectID returns the value of ProjectID.
func (s *NLSearchModelCreateSchema) GetProjectID() OptString {
	return s.ProjectID
}

// GetAccessToken returns the value of AccessToken.
func (s *NLSearchModelCreateSchema) GetAccessToken() OptString {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *NLSearchModelCreateSchema) GetRefreshToken() OptString {
	return s.RefreshToken
}

// GetClientID returns the value of ClientID.
func (s *NLSearchModelCreateSchema) GetClientID() OptString {
	return s.ClientID
}

// GetClientSecret returns the value of ClientSecret.
func (s *NLSearchModelCreateSchema) GetClientSecret() OptString {
	return s.ClientSecret
}

// GetRegion returns the value of Region.
func (s *NLSearchModelCreateSchema) GetRegion() OptString {
	return s.Region
}

// GetMaxOutputTokens returns the value of MaxOutputTokens.
func (s *NLSearchModelCreateSchema) GetMaxOutputTokens() OptInt {
	return s.MaxOutputTokens
}

// GetAccountID returns the value of AccountID.
func (s *NLSearchModelCreateSchema) GetAccountID() OptString {
	return s.AccountID
}

// GetID returns the value of ID.
func (s *NLSearchModelCreateSchema) GetID() OptString {
	return s.ID
}

// SetModelName sets the value of ModelName.
func (s *NLSearchModelCreateSchema) SetModelName(val OptString) {
	s.ModelName = val
}

// SetAPIKey sets the value of APIKey.
func (s *NLSearchModelCreateSchema) SetAPIKey(val OptString) {
	s.APIKey = val
}

// SetAPIURL sets the value of APIURL.
func (s *NLSearchModelCreateSchema) SetAPIURL(val OptString) {
	s.APIURL = val
}

// SetMaxBytes sets the value of MaxBytes.
func (s *NLSearchModelCreateSchema) SetMaxBytes(val OptInt) {
	s.MaxBytes = val
}

// SetTemperature sets the value of Temperature.
func (s *NLSearchModelCreateSchema) SetTemperature(val OptFloat64) {
	s.Temperature = val
}

// SetSystemPrompt sets the value of SystemPrompt.
func (s *NLSearchModelCreateSchema) SetSystemPrompt(val OptString) {
	s.SystemPrompt = val
}

// SetTopP sets the value of TopP.
func (s *NLSearchModelCreateSchema) SetTopP(val OptFloat64) {
	s.TopP = val
}

// SetTopK sets the value of TopK.
func (s *NLSearchModelCreateSchema) SetTopK(val OptInt) {
	s.TopK = val
}

// SetStopSequences sets the value of StopSequences.
func (s *NLSearchModelCreateSchema) SetStopSequences(val []string) {
	s.StopSequences = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *NLSearchModelCreateSchema) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetProjectID sets the value of ProjectID.
func (s *NLSearchModelCreateSchema) SetProjectID(val OptString) {
	s.ProjectID = val
}

// SetAccessToken sets the value of AccessToken.
func (s *NLSearchModelCreateSchema) SetAccessToken(val OptString) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *NLSearchModelCreateSchema) SetRefreshToken(val OptString) {
	s.RefreshToken = val
}

// SetClientID sets the value of ClientID.
func (s *NLSearchModelCreateSchema) SetClientID(val OptString) {
	s.ClientID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *NLSearchModelCreateSchema) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

// SetRegion sets the value of Region.
func (s *NLSearchModelCreateSchema) SetRegion(val OptString) {
	s.Region = val
}

// SetMaxOutputTokens sets the value of MaxOutputTokens.
func (s *NLSearchModelCreateSchema) SetMaxOutputTokens(val OptInt) {
	s.MaxOutputTokens = val
}

// SetAccountID sets the value of AccountID.
func (s *NLSearchModelCreateSchema) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetID sets the value of ID.
func (s *NLSearchModelCreateSchema) SetID(val OptString) {
	s.ID = val
}

// Ref: #/components/schemas/NLSearchModelDeleteSchema
type NLSearchModelDeleteSchema struct {
	// ID of the deleted NL search model.
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *NLSearchModelDeleteSchema) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *NLSearchModelDeleteSchema) SetID(val string) {
	s.ID = val
}

func (*NLSearchModelDeleteSchema) deleteNLSearchModelRes() {}

// Merged schema.
// Ref: #/components/schemas/NLSearchModelSchema
type NLSearchModelSchema struct {
	// Name of the NL model to use.
	ModelName OptString `json:"model_name"`
	// API key for the NL model service.
	APIKey OptString `json:"api_key"`
	// Custom API URL for the NL model service.
	APIURL OptString `json:"api_url"`
	// Maximum number of bytes to process.
	MaxBytes OptInt `json:"max_bytes"`
	// Temperature parameter for the NL model.
	Temperature OptFloat64 `json:"temperature"`
	// System prompt for the NL model.
	SystemPrompt OptString `json:"system_prompt"`
	// Top-p parameter for the NL model (Google-specific).
	TopP OptFloat64 `json:"top_p"`
	// Top-k parameter for the NL model (Google-specific).
	TopK OptInt `json:"top_k"`
	// Stop sequences for the NL model (Google-specific).
	StopSequences []string `json:"stop_sequences"`
	// API version for the NL model service.
	APIVersion OptString `json:"api_version"`
	// Project ID for GCP Vertex AI.
	ProjectID OptString `json:"project_id"`
	// Access token for GCP Vertex AI.
	AccessToken OptString `json:"access_token"`
	// Refresh token for GCP Vertex AI.
	RefreshToken OptString `json:"refresh_token"`
	// Client ID for GCP Vertex AI.
	ClientID OptString `json:"client_id"`
	// Client secret for GCP Vertex AI.
	ClientSecret OptString `json:"client_secret"`
	// Region for GCP Vertex AI.
	Region OptString `json:"region"`
	// Maximum output tokens for GCP Vertex AI.
	MaxOutputTokens OptInt `json:"max_output_tokens"`
	// Account ID for Cloudflare-specific models.
	AccountID OptString `json:"account_id"`
	// Merged property.
	ID string `json:"id"`
}

// GetModelName returns the value of ModelName.
func (s *NLSearchModelSchema) GetModelName() OptString {
	return s.ModelName
}

// GetAPIKey returns the value of APIKey.
func (s *NLSearchModelSchema) GetAPIKey() OptString {
	return s.APIKey
}

// GetAPIURL returns the value of APIURL.
func (s *NLSearchModelSchema) GetAPIURL() OptString {
	return s.APIURL
}

// GetMaxBytes returns the value of MaxBytes.
func (s *NLSearchModelSchema) GetMaxBytes() OptInt {
	return s.MaxBytes
}

// GetTemperature returns the value of Temperature.
func (s *NLSearchModelSchema) GetTemperature() OptFloat64 {
	return s.Temperature
}

// GetSystemPrompt returns the value of SystemPrompt.
func (s *NLSearchModelSchema) GetSystemPrompt() OptString {
	return s.SystemPrompt
}

// GetTopP returns the value of TopP.
func (s *NLSearchModelSchema) GetTopP() OptFloat64 {
	return s.TopP
}

// GetTopK returns the value of TopK.
func (s *NLSearchModelSchema) GetTopK() OptInt {
	return s.TopK
}

// GetStopSequences returns the value of StopSequences.
func (s *NLSearchModelSchema) GetStopSequences() []string {
	return s.StopSequences
}

// GetAPIVersion returns the value of APIVersion.
func (s *NLSearchModelSchema) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetProjectID returns the value of ProjectID.
func (s *NLSearchModelSchema) GetProjectID() OptString {
	return s.ProjectID
}

// GetAccessToken returns the value of AccessToken.
func (s *NLSearchModelSchema) GetAccessToken() OptString {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *NLSearchModelSchema) GetRefreshToken() OptString {
	return s.RefreshToken
}

// GetClientID returns the value of ClientID.
func (s *NLSearchModelSchema) GetClientID() OptString {
	return s.ClientID
}

// GetClientSecret returns the value of ClientSecret.
func (s *NLSearchModelSchema) GetClientSecret() OptString {
	return s.ClientSecret
}

// GetRegion returns the value of Region.
func (s *NLSearchModelSchema) GetRegion() OptString {
	return s.Region
}

// GetMaxOutputTokens returns the value of MaxOutputTokens.
func (s *NLSearchModelSchema) GetMaxOutputTokens() OptInt {
	return s.MaxOutputTokens
}

// GetAccountID returns the value of AccountID.
func (s *NLSearchModelSchema) GetAccountID() OptString {
	return s.AccountID
}

// GetID returns the value of ID.
func (s *NLSearchModelSchema) GetID() string {
	return s.ID
}

// SetModelName sets the value of ModelName.
func (s *NLSearchModelSchema) SetModelName(val OptString) {
	s.ModelName = val
}

// SetAPIKey sets the value of APIKey.
func (s *NLSearchModelSchema) SetAPIKey(val OptString) {
	s.APIKey = val
}

// SetAPIURL sets the value of APIURL.
func (s *NLSearchModelSchema) SetAPIURL(val OptString) {
	s.APIURL = val
}

// SetMaxBytes sets the value of MaxBytes.
func (s *NLSearchModelSchema) SetMaxBytes(val OptInt) {
	s.MaxBytes = val
}

// SetTemperature sets the value of Temperature.
func (s *NLSearchModelSchema) SetTemperature(val OptFloat64) {
	s.Temperature = val
}

// SetSystemPrompt sets the value of SystemPrompt.
func (s *NLSearchModelSchema) SetSystemPrompt(val OptString) {
	s.SystemPrompt = val
}

// SetTopP sets the value of TopP.
func (s *NLSearchModelSchema) SetTopP(val OptFloat64) {
	s.TopP = val
}

// SetTopK sets the value of TopK.
func (s *NLSearchModelSchema) SetTopK(val OptInt) {
	s.TopK = val
}

// SetStopSequences sets the value of StopSequences.
func (s *NLSearchModelSchema) SetStopSequences(val []string) {
	s.StopSequences = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *NLSearchModelSchema) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetProjectID sets the value of ProjectID.
func (s *NLSearchModelSchema) SetProjectID(val OptString) {
	s.ProjectID = val
}

// SetAccessToken sets the value of AccessToken.
func (s *NLSearchModelSchema) SetAccessToken(val OptString) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *NLSearchModelSchema) SetRefreshToken(val OptString) {
	s.RefreshToken = val
}

// SetClientID sets the value of ClientID.
func (s *NLSearchModelSchema) SetClientID(val OptString) {
	s.ClientID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *NLSearchModelSchema) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

// SetRegion sets the value of Region.
func (s *NLSearchModelSchema) SetRegion(val OptString) {
	s.Region = val
}

// SetMaxOutputTokens sets the value of MaxOutputTokens.
func (s *NLSearchModelSchema) SetMaxOutputTokens(val OptInt) {
	s.MaxOutputTokens = val
}

// SetAccountID sets the value of AccountID.
func (s *NLSearchModelSchema) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetID sets the value of ID.
func (s *NLSearchModelSchema) SetID(val string) {
	s.ID = val
}

func (*NLSearchModelSchema) createNLSearchModelRes()   {}
func (*NLSearchModelSchema) retrieveNLSearchModelRes() {}
func (*NLSearchModelSchema) updateNLSearchModelRes()   {}

// NewOptApiKeySchema returns new OptApiKeySchema with value set to v.
func NewOptApiKeySchema(v ApiKeySchema) OptApiKeySchema {
	return OptApiKeySchema{
		Value: v,
		Set:   true,
	}
}

// OptApiKeySchema is optional ApiKeySchema.
type OptApiKeySchema struct {
	Value ApiKeySchema
	Set   bool
}

// IsSet returns true if OptApiKeySchema was set.
func (o OptApiKeySchema) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKeySchema) Reset() {
	var v ApiKeySchema
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKeySchema) SetTo(v ApiKeySchema) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKeySchema) Get() (v ApiKeySchema, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKeySchema) Or(d ApiKeySchema) ApiKeySchema {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollectionAliasSchema returns new OptCollectionAliasSchema with value set to v.
func NewOptCollectionAliasSchema(v CollectionAliasSchema) OptCollectionAliasSchema {
	return OptCollectionAliasSchema{
		Value: v,
		Set:   true,
	}
}

// OptCollectionAliasSchema is optional CollectionAliasSchema.
type OptCollectionAliasSchema struct {
	Value CollectionAliasSchema
	Set   bool
}

// IsSet returns true if OptCollectionAliasSchema was set.
func (o OptCollectionAliasSchema) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollectionAliasSchema) Reset() {
	var v CollectionAliasSchema
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollectionAliasSchema) SetTo(v CollectionAliasSchema) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollectionAliasSchema) Get() (v CollectionAliasSchema, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollectionAliasSchema) Or(d CollectionAliasSchema) CollectionAliasSchema {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeleteDocumentsDeleteDocumentsParameters returns new OptDeleteDocumentsDeleteDocumentsParameters with value set to v.
func NewOptDeleteDocumentsDeleteDocumentsParameters(v DeleteDocumentsDeleteDocumentsParameters) OptDeleteDocumentsDeleteDocumentsParameters {
	return OptDeleteDocumentsDeleteDocumentsParameters{
		Value: v,
		Set:   true,
	}
}

// OptDeleteDocumentsDeleteDocumentsParameters is optional DeleteDocumentsDeleteDocumentsParameters.
type OptDeleteDocumentsDeleteDocumentsParameters struct {
	Value DeleteDocumentsDeleteDocumentsParameters
	Set   bool
}

// IsSet returns true if OptDeleteDocumentsDeleteDocumentsParameters was set.
func (o OptDeleteDocumentsDeleteDocumentsParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeleteDocumentsDeleteDocumentsParameters) Reset() {
	var v DeleteDocumentsDeleteDocumentsParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeleteDocumentsDeleteDocumentsParameters) SetTo(v DeleteDocumentsDeleteDocumentsParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeleteDocumentsDeleteDocumentsParameters) Get() (v DeleteDocumentsDeleteDocumentsParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeleteDocumentsDeleteDocumentsParameters) Or(d DeleteDocumentsDeleteDocumentsParameters) DeleteDocumentsDeleteDocumentsParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDirtyValues returns new OptDirtyValues with value set to v.
func NewOptDirtyValues(v DirtyValues) OptDirtyValues {
	return OptDirtyValues{
		Value: v,
		Set:   true,
	}
}

// OptDirtyValues is optional DirtyValues.
type OptDirtyValues struct {
	Value DirtyValues
	Set   bool
}

// IsSet returns true if OptDirtyValues was set.
func (o OptDirtyValues) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDirtyValues) Reset() {
	var v DirtyValues
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDirtyValues) SetTo(v DirtyValues) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDirtyValues) Get() (v DirtyValues, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDirtyValues) Or(d DirtyValues) DirtyValues {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDropTokensMode returns new OptDropTokensMode with value set to v.
func NewOptDropTokensMode(v DropTokensMode) OptDropTokensMode {
	return OptDropTokensMode{
		Value: v,
		Set:   true,
	}
}

// OptDropTokensMode is optional DropTokensMode.
type OptDropTokensMode struct {
	Value DropTokensMode
	Set   bool
}

// IsSet returns true if OptDropTokensMode was set.
func (o OptDropTokensMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDropTokensMode) Reset() {
	var v DropTokensMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDropTokensMode) SetTo(v DropTokensMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDropTokensMode) Get() (v DropTokensMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDropTokensMode) Or(d DropTokensMode) DropTokensMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExportDocumentsExportDocumentsParameters returns new OptExportDocumentsExportDocumentsParameters with value set to v.
func NewOptExportDocumentsExportDocumentsParameters(v ExportDocumentsExportDocumentsParameters) OptExportDocumentsExportDocumentsParameters {
	return OptExportDocumentsExportDocumentsParameters{
		Value: v,
		Set:   true,
	}
}

// OptExportDocumentsExportDocumentsParameters is optional ExportDocumentsExportDocumentsParameters.
type OptExportDocumentsExportDocumentsParameters struct {
	Value ExportDocumentsExportDocumentsParameters
	Set   bool
}

// IsSet returns true if OptExportDocumentsExportDocumentsParameters was set.
func (o OptExportDocumentsExportDocumentsParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExportDocumentsExportDocumentsParameters) Reset() {
	var v ExportDocumentsExportDocumentsParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExportDocumentsExportDocumentsParameters) SetTo(v ExportDocumentsExportDocumentsParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExportDocumentsExportDocumentsParameters) Get() (v ExportDocumentsExportDocumentsParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExportDocumentsExportDocumentsParameters) Or(d ExportDocumentsExportDocumentsParameters) ExportDocumentsExportDocumentsParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFacetCountsStats returns new OptFacetCountsStats with value set to v.
func NewOptFacetCountsStats(v FacetCountsStats) OptFacetCountsStats {
	return OptFacetCountsStats{
		Value: v,
		Set:   true,
	}
}

// OptFacetCountsStats is optional FacetCountsStats.
type OptFacetCountsStats struct {
	Value FacetCountsStats
	Set   bool
}

// IsSet returns true if OptFacetCountsStats was set.
func (o OptFacetCountsStats) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFacetCountsStats) Reset() {
	var v FacetCountsStats
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFacetCountsStats) SetTo(v FacetCountsStats) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFacetCountsStats) Get() (v FacetCountsStats, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFacetCountsStats) Or(d FacetCountsStats) FacetCountsStats {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFieldEmbed returns new OptFieldEmbed with value set to v.
func NewOptFieldEmbed(v FieldEmbed) OptFieldEmbed {
	return OptFieldEmbed{
		Value: v,
		Set:   true,
	}
}

// OptFieldEmbed is optional FieldEmbed.
type OptFieldEmbed struct {
	Value FieldEmbed
	Set   bool
}

// IsSet returns true if OptFieldEmbed was set.
func (o OptFieldEmbed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFieldEmbed) Reset() {
	var v FieldEmbed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFieldEmbed) SetTo(v FieldEmbed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFieldEmbed) Get() (v FieldEmbed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFieldEmbed) Or(d FieldEmbed) FieldEmbed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCollectionsGetCollectionsParameters returns new OptGetCollectionsGetCollectionsParameters with value set to v.
func NewOptGetCollectionsGetCollectionsParameters(v GetCollectionsGetCollectionsParameters) OptGetCollectionsGetCollectionsParameters {
	return OptGetCollectionsGetCollectionsParameters{
		Value: v,
		Set:   true,
	}
}

// OptGetCollectionsGetCollectionsParameters is optional GetCollectionsGetCollectionsParameters.
type OptGetCollectionsGetCollectionsParameters struct {
	Value GetCollectionsGetCollectionsParameters
	Set   bool
}

// IsSet returns true if OptGetCollectionsGetCollectionsParameters was set.
func (o OptGetCollectionsGetCollectionsParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCollectionsGetCollectionsParameters) Reset() {
	var v GetCollectionsGetCollectionsParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCollectionsGetCollectionsParameters) SetTo(v GetCollectionsGetCollectionsParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCollectionsGetCollectionsParameters) Get() (v GetCollectionsGetCollectionsParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCollectionsGetCollectionsParameters) Or(d GetCollectionsGetCollectionsParameters) GetCollectionsGetCollectionsParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImportDocumentsImportDocumentsParameters returns new OptImportDocumentsImportDocumentsParameters with value set to v.
func NewOptImportDocumentsImportDocumentsParameters(v ImportDocumentsImportDocumentsParameters) OptImportDocumentsImportDocumentsParameters {
	return OptImportDocumentsImportDocumentsParameters{
		Value: v,
		Set:   true,
	}
}

// OptImportDocumentsImportDocumentsParameters is optional ImportDocumentsImportDocumentsParameters.
type OptImportDocumentsImportDocumentsParameters struct {
	Value ImportDocumentsImportDocumentsParameters
	Set   bool
}

// IsSet returns true if OptImportDocumentsImportDocumentsParameters was set.
func (o OptImportDocumentsImportDocumentsParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImportDocumentsImportDocumentsParameters) Reset() {
	var v ImportDocumentsImportDocumentsParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImportDocumentsImportDocumentsParameters) SetTo(v ImportDocumentsImportDocumentsParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImportDocumentsImportDocumentsParameters) Get() (v ImportDocumentsImportDocumentsParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImportDocumentsImportDocumentsParameters) Or(d ImportDocumentsImportDocumentsParameters) ImportDocumentsImportDocumentsParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIndexAction returns new OptIndexAction with value set to v.
func NewOptIndexAction(v IndexAction) OptIndexAction {
	return OptIndexAction{
		Value: v,
		Set:   true,
	}
}

// OptIndexAction is optional IndexAction.
type OptIndexAction struct {
	Value IndexAction
	Set   bool
}

// IsSet returns true if OptIndexAction was set.
func (o OptIndexAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIndexAction) Reset() {
	var v IndexAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIndexAction) SetTo(v IndexAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIndexAction) Get() (v IndexAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIndexAction) Or(d IndexAction) IndexAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultiSearchSearchesParameter returns new OptMultiSearchSearchesParameter with value set to v.
func NewOptMultiSearchSearchesParameter(v MultiSearchSearchesParameter) OptMultiSearchSearchesParameter {
	return OptMultiSearchSearchesParameter{
		Value: v,
		Set:   true,
	}
}

// OptMultiSearchSearchesParameter is optional MultiSearchSearchesParameter.
type OptMultiSearchSearchesParameter struct {
	Value MultiSearchSearchesParameter
	Set   bool
}

// IsSet returns true if OptMultiSearchSearchesParameter was set.
func (o OptMultiSearchSearchesParameter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultiSearchSearchesParameter) Reset() {
	var v MultiSearchSearchesParameter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultiSearchSearchesParameter) SetTo(v MultiSearchSearchesParameter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultiSearchSearchesParameter) Get() (v MultiSearchSearchesParameter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultiSearchSearchesParameter) Or(d MultiSearchSearchesParameter) MultiSearchSearchesParameter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchOverrideRuleMatch returns new OptSearchOverrideRuleMatch with value set to v.
func NewOptSearchOverrideRuleMatch(v SearchOverrideRuleMatch) OptSearchOverrideRuleMatch {
	return OptSearchOverrideRuleMatch{
		Value: v,
		Set:   true,
	}
}

// OptSearchOverrideRuleMatch is optional SearchOverrideRuleMatch.
type OptSearchOverrideRuleMatch struct {
	Value SearchOverrideRuleMatch
	Set   bool
}

// IsSet returns true if OptSearchOverrideRuleMatch was set.
func (o OptSearchOverrideRuleMatch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchOverrideRuleMatch) Reset() {
	var v SearchOverrideRuleMatch
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchOverrideRuleMatch) SetTo(v SearchOverrideRuleMatch) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchOverrideRuleMatch) Get() (v SearchOverrideRuleMatch, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchOverrideRuleMatch) Or(d SearchOverrideRuleMatch) SearchOverrideRuleMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchRequestParams returns new OptSearchRequestParams with value set to v.
func NewOptSearchRequestParams(v SearchRequestParams) OptSearchRequestParams {
	return OptSearchRequestParams{
		Value: v,
		Set:   true,
	}
}

// OptSearchRequestParams is optional SearchRequestParams.
type OptSearchRequestParams struct {
	Value SearchRequestParams
	Set   bool
}

// IsSet returns true if OptSearchRequestParams was set.
func (o OptSearchRequestParams) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchRequestParams) Reset() {
	var v SearchRequestParams
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchRequestParams) SetTo(v SearchRequestParams) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchRequestParams) Get() (v SearchRequestParams, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchRequestParams) Or(d SearchRequestParams) SearchRequestParams {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchRequestParamsVoiceQuery returns new OptSearchRequestParamsVoiceQuery with value set to v.
func NewOptSearchRequestParamsVoiceQuery(v SearchRequestParamsVoiceQuery) OptSearchRequestParamsVoiceQuery {
	return OptSearchRequestParamsVoiceQuery{
		Value: v,
		Set:   true,
	}
}

// OptSearchRequestParamsVoiceQuery is optional SearchRequestParamsVoiceQuery.
type OptSearchRequestParamsVoiceQuery struct {
	Value SearchRequestParamsVoiceQuery
	Set   bool
}

// IsSet returns true if OptSearchRequestParamsVoiceQuery was set.
func (o OptSearchRequestParamsVoiceQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchRequestParamsVoiceQuery) Reset() {
	var v SearchRequestParamsVoiceQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchRequestParamsVoiceQuery) SetTo(v SearchRequestParamsVoiceQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchRequestParamsVoiceQuery) Get() (v SearchRequestParamsVoiceQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchRequestParamsVoiceQuery) Or(d SearchRequestParamsVoiceQuery) SearchRequestParamsVoiceQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchResultConversation returns new OptSearchResultConversation with value set to v.
func NewOptSearchResultConversation(v SearchResultConversation) OptSearchResultConversation {
	return OptSearchResultConversation{
		Value: v,
		Set:   true,
	}
}

// OptSearchResultConversation is optional SearchResultConversation.
type OptSearchResultConversation struct {
	Value SearchResultConversation
	Set   bool
}

// IsSet returns true if OptSearchResultConversation was set.
func (o OptSearchResultConversation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchResultConversation) Reset() {
	var v SearchResultConversation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchResultConversation) SetTo(v SearchResultConversation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchResultConversation) Get() (v SearchResultConversation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchResultConversation) Or(d SearchResultConversation) SearchResultConversation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchResultHitDocument returns new OptSearchResultHitDocument with value set to v.
func NewOptSearchResultHitDocument(v SearchResultHitDocument) OptSearchResultHitDocument {
	return OptSearchResultHitDocument{
		Value: v,
		Set:   true,
	}
}

// OptSearchResultHitDocument is optional SearchResultHitDocument.
type OptSearchResultHitDocument struct {
	Value SearchResultHitDocument
	Set   bool
}

// IsSet returns true if OptSearchResultHitDocument was set.
func (o OptSearchResultHitDocument) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchResultHitDocument) Reset() {
	var v SearchResultHitDocument
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchResultHitDocument) SetTo(v SearchResultHitDocument) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchResultHitDocument) Get() (v SearchResultHitDocument, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchResultHitDocument) Or(d SearchResultHitDocument) SearchResultHitDocument {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchResultHitGeoDistanceMeters returns new OptSearchResultHitGeoDistanceMeters with value set to v.
func NewOptSearchResultHitGeoDistanceMeters(v SearchResultHitGeoDistanceMeters) OptSearchResultHitGeoDistanceMeters {
	return OptSearchResultHitGeoDistanceMeters{
		Value: v,
		Set:   true,
	}
}

// OptSearchResultHitGeoDistanceMeters is optional SearchResultHitGeoDistanceMeters.
type OptSearchResultHitGeoDistanceMeters struct {
	Value SearchResultHitGeoDistanceMeters
	Set   bool
}

// IsSet returns true if OptSearchResultHitGeoDistanceMeters was set.
func (o OptSearchResultHitGeoDistanceMeters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchResultHitGeoDistanceMeters) Reset() {
	var v SearchResultHitGeoDistanceMeters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchResultHitGeoDistanceMeters) SetTo(v SearchResultHitGeoDistanceMeters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchResultHitGeoDistanceMeters) Get() (v SearchResultHitGeoDistanceMeters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchResultHitGeoDistanceMeters) Or(d SearchResultHitGeoDistanceMeters) SearchResultHitGeoDistanceMeters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchResultHitHighlight returns new OptSearchResultHitHighlight with value set to v.
func NewOptSearchResultHitHighlight(v SearchResultHitHighlight) OptSearchResultHitHighlight {
	return OptSearchResultHitHighlight{
		Value: v,
		Set:   true,
	}
}

// OptSearchResultHitHighlight is optional SearchResultHitHighlight.
type OptSearchResultHitHighlight struct {
	Value SearchResultHitHighlight
	Set   bool
}

// IsSet returns true if OptSearchResultHitHighlight was set.
func (o OptSearchResultHitHighlight) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchResultHitHighlight) Reset() {
	var v SearchResultHitHighlight
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchResultHitHighlight) SetTo(v SearchResultHitHighlight) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchResultHitHighlight) Get() (v SearchResultHitHighlight, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchResultHitHighlight) Or(d SearchResultHitHighlight) SearchResultHitHighlight {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchResultHitHybridSearchInfo returns new OptSearchResultHitHybridSearchInfo with value set to v.
func NewOptSearchResultHitHybridSearchInfo(v SearchResultHitHybridSearchInfo) OptSearchResultHitHybridSearchInfo {
	return OptSearchResultHitHybridSearchInfo{
		Value: v,
		Set:   true,
	}
}

// OptSearchResultHitHybridSearchInfo is optional SearchResultHitHybridSearchInfo.
type OptSearchResultHitHybridSearchInfo struct {
	Value SearchResultHitHybridSearchInfo
	Set   bool
}

// IsSet returns true if OptSearchResultHitHybridSearchInfo was set.
func (o OptSearchResultHitHybridSearchInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchResultHitHybridSearchInfo) Reset() {
	var v SearchResultHitHybridSearchInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchResultHitHybridSearchInfo) SetTo(v SearchResultHitHybridSearchInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchResultHitHybridSearchInfo) Get() (v SearchResultHitHybridSearchInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchResultHitHybridSearchInfo) Or(d SearchResultHitHybridSearchInfo) SearchResultHitHybridSearchInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchResultHitTextMatchInfo returns new OptSearchResultHitTextMatchInfo with value set to v.
func NewOptSearchResultHitTextMatchInfo(v SearchResultHitTextMatchInfo) OptSearchResultHitTextMatchInfo {
	return OptSearchResultHitTextMatchInfo{
		Value: v,
		Set:   true,
	}
}

// OptSearchResultHitTextMatchInfo is optional SearchResultHitTextMatchInfo.
type OptSearchResultHitTextMatchInfo struct {
	Value SearchResultHitTextMatchInfo
	Set   bool
}

// IsSet returns true if OptSearchResultHitTextMatchInfo was set.
func (o OptSearchResultHitTextMatchInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchResultHitTextMatchInfo) Reset() {
	var v SearchResultHitTextMatchInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchResultHitTextMatchInfo) SetTo(v SearchResultHitTextMatchInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchResultHitTextMatchInfo) Get() (v SearchResultHitTextMatchInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchResultHitTextMatchInfo) Or(d SearchResultHitTextMatchInfo) SearchResultHitTextMatchInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateDocumentsUpdateDocumentsParameters returns new OptUpdateDocumentsUpdateDocumentsParameters with value set to v.
func NewOptUpdateDocumentsUpdateDocumentsParameters(v UpdateDocumentsUpdateDocumentsParameters) OptUpdateDocumentsUpdateDocumentsParameters {
	return OptUpdateDocumentsUpdateDocumentsParameters{
		Value: v,
		Set:   true,
	}
}

// OptUpdateDocumentsUpdateDocumentsParameters is optional UpdateDocumentsUpdateDocumentsParameters.
type OptUpdateDocumentsUpdateDocumentsParameters struct {
	Value UpdateDocumentsUpdateDocumentsParameters
	Set   bool
}

// IsSet returns true if OptUpdateDocumentsUpdateDocumentsParameters was set.
func (o OptUpdateDocumentsUpdateDocumentsParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateDocumentsUpdateDocumentsParameters) Reset() {
	var v UpdateDocumentsUpdateDocumentsParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateDocumentsUpdateDocumentsParameters) SetTo(v UpdateDocumentsUpdateDocumentsParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateDocumentsUpdateDocumentsParameters) Get() (v UpdateDocumentsUpdateDocumentsParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateDocumentsUpdateDocumentsParameters) Or(d UpdateDocumentsUpdateDocumentsParameters) UpdateDocumentsUpdateDocumentsParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVoiceQueryModelCollectionConfig returns new OptVoiceQueryModelCollectionConfig with value set to v.
func NewOptVoiceQueryModelCollectionConfig(v VoiceQueryModelCollectionConfig) OptVoiceQueryModelCollectionConfig {
	return OptVoiceQueryModelCollectionConfig{
		Value: v,
		Set:   true,
	}
}

// OptVoiceQueryModelCollectionConfig is optional VoiceQueryModelCollectionConfig.
type OptVoiceQueryModelCollectionConfig struct {
	Value VoiceQueryModelCollectionConfig
	Set   bool
}

// IsSet returns true if OptVoiceQueryModelCollectionConfig was set.
func (o OptVoiceQueryModelCollectionConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVoiceQueryModelCollectionConfig) Reset() {
	var v VoiceQueryModelCollectionConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVoiceQueryModelCollectionConfig) SetTo(v VoiceQueryModelCollectionConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVoiceQueryModelCollectionConfig) Get() (v VoiceQueryModelCollectionConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVoiceQueryModelCollectionConfig) Or(d VoiceQueryModelCollectionConfig) VoiceQueryModelCollectionConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PresetDeleteSchema
type PresetDeleteSchema struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *PresetDeleteSchema) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *PresetDeleteSchema) SetName(val string) {
	s.Name = val
}

func (*PresetDeleteSchema) deletePresetRes() {}

// Merged schema.
// Ref: #/components/schemas/PresetSchema
type PresetSchema struct {
	Value PresetSchemaValue `json:"value"`
	Name  string            `json:"name"`
}

// GetValue returns the value of Value.
func (s *PresetSchema) GetValue() PresetSchemaValue {
	return s.Value
}

// GetName returns the value of Name.
func (s *PresetSchema) GetName() string {
	return s.Name
}

// SetValue sets the value of Value.
func (s *PresetSchema) SetValue(val PresetSchemaValue) {
	s.Value = val
}

// SetName sets the value of Name.
func (s *PresetSchema) SetName(val string) {
	s.Name = val
}

func (*PresetSchema) retrievePresetRes() {}
func (*PresetSchema) upsertPresetRes()   {}

// PresetSchemaValue represents sum type.
type PresetSchemaValue struct {
	Type                         PresetSchemaValueType // switch on this field
	SearchParameters             SearchParameters
	MultiSearchSearchesParameter MultiSearchSearchesParameter
}

// PresetSchemaValueType is oneOf type of PresetSchemaValue.
type PresetSchemaValueType string

// Possible values for PresetSchemaValueType.
const (
	SearchParametersPresetSchemaValue             PresetSchemaValueType = "SearchParameters"
	MultiSearchSearchesParameterPresetSchemaValue PresetSchemaValueType = "MultiSearchSearchesParameter"
)

// IsSearchParameters reports whether PresetSchemaValue is SearchParameters.
func (s PresetSchemaValue) IsSearchParameters() bool {
	return s.Type == SearchParametersPresetSchemaValue
}

// IsMultiSearchSearchesParameter reports whether PresetSchemaValue is MultiSearchSearchesParameter.
func (s PresetSchemaValue) IsMultiSearchSearchesParameter() bool {
	return s.Type == MultiSearchSearchesParameterPresetSchemaValue
}

// SetSearchParameters sets PresetSchemaValue to SearchParameters.
func (s *PresetSchemaValue) SetSearchParameters(v SearchParameters) {
	s.Type = SearchParametersPresetSchemaValue
	s.SearchParameters = v
}

// GetSearchParameters returns SearchParameters and true boolean if PresetSchemaValue is SearchParameters.
func (s PresetSchemaValue) GetSearchParameters() (v SearchParameters, ok bool) {
	if !s.IsSearchParameters() {
		return v, false
	}
	return s.SearchParameters, true
}

// NewSearchParametersPresetSchemaValue returns new PresetSchemaValue from SearchParameters.
func NewSearchParametersPresetSchemaValue(v SearchParameters) PresetSchemaValue {
	var s PresetSchemaValue
	s.SetSearchParameters(v)
	return s
}

// SetMultiSearchSearchesParameter sets PresetSchemaValue to MultiSearchSearchesParameter.
func (s *PresetSchemaValue) SetMultiSearchSearchesParameter(v MultiSearchSearchesParameter) {
	s.Type = MultiSearchSearchesParameterPresetSchemaValue
	s.MultiSearchSearchesParameter = v
}

// GetMultiSearchSearchesParameter returns MultiSearchSearchesParameter and true boolean if PresetSchemaValue is MultiSearchSearchesParameter.
func (s PresetSchemaValue) GetMultiSearchSearchesParameter() (v MultiSearchSearchesParameter, ok bool) {
	if !s.IsMultiSearchSearchesParameter() {
		return v, false
	}
	return s.MultiSearchSearchesParameter, true
}

// NewMultiSearchSearchesParameterPresetSchemaValue returns new PresetSchemaValue from MultiSearchSearchesParameter.
func NewMultiSearchSearchesParameterPresetSchemaValue(v MultiSearchSearchesParameter) PresetSchemaValue {
	var s PresetSchemaValue
	s.SetMultiSearchSearchesParameter(v)
	return s
}

// Ref: #/components/schemas/PresetUpsertSchema
type PresetUpsertSchema struct {
	Value PresetUpsertSchemaValue `json:"value"`
}

// GetValue returns the value of Value.
func (s *PresetUpsertSchema) GetValue() PresetUpsertSchemaValue {
	return s.Value
}

// SetValue sets the value of Value.
func (s *PresetUpsertSchema) SetValue(val PresetUpsertSchemaValue) {
	s.Value = val
}

// PresetUpsertSchemaValue represents sum type.
type PresetUpsertSchemaValue struct {
	Type                         PresetUpsertSchemaValueType // switch on this field
	SearchParameters             SearchParameters
	MultiSearchSearchesParameter MultiSearchSearchesParameter
}

// PresetUpsertSchemaValueType is oneOf type of PresetUpsertSchemaValue.
type PresetUpsertSchemaValueType string

// Possible values for PresetUpsertSchemaValueType.
const (
	SearchParametersPresetUpsertSchemaValue             PresetUpsertSchemaValueType = "SearchParameters"
	MultiSearchSearchesParameterPresetUpsertSchemaValue PresetUpsertSchemaValueType = "MultiSearchSearchesParameter"
)

// IsSearchParameters reports whether PresetUpsertSchemaValue is SearchParameters.
func (s PresetUpsertSchemaValue) IsSearchParameters() bool {
	return s.Type == SearchParametersPresetUpsertSchemaValue
}

// IsMultiSearchSearchesParameter reports whether PresetUpsertSchemaValue is MultiSearchSearchesParameter.
func (s PresetUpsertSchemaValue) IsMultiSearchSearchesParameter() bool {
	return s.Type == MultiSearchSearchesParameterPresetUpsertSchemaValue
}

// SetSearchParameters sets PresetUpsertSchemaValue to SearchParameters.
func (s *PresetUpsertSchemaValue) SetSearchParameters(v SearchParameters) {
	s.Type = SearchParametersPresetUpsertSchemaValue
	s.SearchParameters = v
}

// GetSearchParameters returns SearchParameters and true boolean if PresetUpsertSchemaValue is SearchParameters.
func (s PresetUpsertSchemaValue) GetSearchParameters() (v SearchParameters, ok bool) {
	if !s.IsSearchParameters() {
		return v, false
	}
	return s.SearchParameters, true
}

// NewSearchParametersPresetUpsertSchemaValue returns new PresetUpsertSchemaValue from SearchParameters.
func NewSearchParametersPresetUpsertSchemaValue(v SearchParameters) PresetUpsertSchemaValue {
	var s PresetUpsertSchemaValue
	s.SetSearchParameters(v)
	return s
}

// SetMultiSearchSearchesParameter sets PresetUpsertSchemaValue to MultiSearchSearchesParameter.
func (s *PresetUpsertSchemaValue) SetMultiSearchSearchesParameter(v MultiSearchSearchesParameter) {
	s.Type = MultiSearchSearchesParameterPresetUpsertSchemaValue
	s.MultiSearchSearchesParameter = v
}

// GetMultiSearchSearchesParameter returns MultiSearchSearchesParameter and true boolean if PresetUpsertSchemaValue is MultiSearchSearchesParameter.
func (s PresetUpsertSchemaValue) GetMultiSearchSearchesParameter() (v MultiSearchSearchesParameter, ok bool) {
	if !s.IsMultiSearchSearchesParameter() {
		return v, false
	}
	return s.MultiSearchSearchesParameter, true
}

// NewMultiSearchSearchesParameterPresetUpsertSchemaValue returns new PresetUpsertSchemaValue from MultiSearchSearchesParameter.
func NewMultiSearchSearchesParameterPresetUpsertSchemaValue(v MultiSearchSearchesParameter) PresetUpsertSchemaValue {
	var s PresetUpsertSchemaValue
	s.SetMultiSearchSearchesParameter(v)
	return s
}

// Ref: #/components/schemas/PresetsRetrieveSchema
type PresetsRetrieveSchema struct {
	Presets []PresetSchema `json:"presets"`
}

// GetPresets returns the value of Presets.
func (s *PresetsRetrieveSchema) GetPresets() []PresetSchema {
	return s.Presets
}

// SetPresets sets the value of Presets.
func (s *PresetsRetrieveSchema) SetPresets(val []PresetSchema) {
	s.Presets = val
}

type RetrieveMetricsOK struct{}

// Ref: #/components/schemas/SchemaChangeStatus
type SchemaChangeStatus struct {
	// Name of the collection being modified.
	Collection OptString `json:"collection"`
	// Number of documents that have been validated.
	ValidatedDocs OptInt `json:"validated_docs"`
	// Number of documents that have been altered.
	AlteredDocs OptInt `json:"altered_docs"`
}

// GetCollection returns the value of Collection.
func (s *SchemaChangeStatus) GetCollection() OptString {
	return s.Collection
}

// GetValidatedDocs returns the value of ValidatedDocs.
func (s *SchemaChangeStatus) GetValidatedDocs() OptInt {
	return s.ValidatedDocs
}

// GetAlteredDocs returns the value of AlteredDocs.
func (s *SchemaChangeStatus) GetAlteredDocs() OptInt {
	return s.AlteredDocs
}

// SetCollection sets the value of Collection.
func (s *SchemaChangeStatus) SetCollection(val OptString) {
	s.Collection = val
}

// SetValidatedDocs sets the value of ValidatedDocs.
func (s *SchemaChangeStatus) SetValidatedDocs(val OptInt) {
	s.ValidatedDocs = val
}

// SetAlteredDocs sets the value of AlteredDocs.
func (s *SchemaChangeStatus) SetAlteredDocs(val OptInt) {
	s.AlteredDocs = val
}

type SearchCollectionBadRequest ApiResponse

func (*SearchCollectionBadRequest) searchCollectionRes() {}

type SearchCollectionNotFound ApiResponse

func (*SearchCollectionNotFound) searchCollectionRes() {}

// Ref: #/components/schemas/SearchGroupedHit
type SearchGroupedHit struct {
	Found    OptInt   `json:"found"`
	GroupKey []jx.Raw `json:"group_key"`
	// The documents that matched the search query.
	Hits []SearchResultHit `json:"hits"`
}

// GetFound returns the value of Found.
func (s *SearchGroupedHit) GetFound() OptInt {
	return s.Found
}

// GetGroupKey returns the value of GroupKey.
func (s *SearchGroupedHit) GetGroupKey() []jx.Raw {
	return s.GroupKey
}

// GetHits returns the value of Hits.
func (s *SearchGroupedHit) GetHits() []SearchResultHit {
	return s.Hits
}

// SetFound sets the value of Found.
func (s *SearchGroupedHit) SetFound(val OptInt) {
	s.Found = val
}

// SetGroupKey sets the value of GroupKey.
func (s *SearchGroupedHit) SetGroupKey(val []jx.Raw) {
	s.GroupKey = val
}

// SetHits sets the value of Hits.
func (s *SearchGroupedHit) SetHits(val []SearchResultHit) {
	s.Hits = val
}

// Ref: #/components/schemas/SearchHighlight
type SearchHighlight struct {
	Field OptString `json:"field"`
	// Present only for (non-array) string fields.
	Snippet OptString `json:"snippet"`
	// Present only for (array) string[] fields.
	Snippets []string `json:"snippets"`
	// Full field value with highlighting, present only for (non-array) string fields.
	Value OptString `json:"value"`
	// Full field value with highlighting, present only for (array) string[] fields.
	Values []string `json:"values"`
	// The indices property will be present only for string[] fields and will contain the corresponding
	// indices of the snippets in the search field.
	Indices       []int                              `json:"indices"`
	MatchedTokens []SearchHighlightMatchedTokensItem `json:"matched_tokens"`
}

// GetField returns the value of Field.
func (s *SearchHighlight) GetField() OptString {
	return s.Field
}

// GetSnippet returns the value of Snippet.
func (s *SearchHighlight) GetSnippet() OptString {
	return s.Snippet
}

// GetSnippets returns the value of Snippets.
func (s *SearchHighlight) GetSnippets() []string {
	return s.Snippets
}

// GetValue returns the value of Value.
func (s *SearchHighlight) GetValue() OptString {
	return s.Value
}

// GetValues returns the value of Values.
func (s *SearchHighlight) GetValues() []string {
	return s.Values
}

// GetIndices returns the value of Indices.
func (s *SearchHighlight) GetIndices() []int {
	return s.Indices
}

// GetMatchedTokens returns the value of MatchedTokens.
func (s *SearchHighlight) GetMatchedTokens() []SearchHighlightMatchedTokensItem {
	return s.MatchedTokens
}

// SetField sets the value of Field.
func (s *SearchHighlight) SetField(val OptString) {
	s.Field = val
}

// SetSnippet sets the value of Snippet.
func (s *SearchHighlight) SetSnippet(val OptString) {
	s.Snippet = val
}

// SetSnippets sets the value of Snippets.
func (s *SearchHighlight) SetSnippets(val []string) {
	s.Snippets = val
}

// SetValue sets the value of Value.
func (s *SearchHighlight) SetValue(val OptString) {
	s.Value = val
}

// SetValues sets the value of Values.
func (s *SearchHighlight) SetValues(val []string) {
	s.Values = val
}

// SetIndices sets the value of Indices.
func (s *SearchHighlight) SetIndices(val []int) {
	s.Indices = val
}

// SetMatchedTokens sets the value of MatchedTokens.
func (s *SearchHighlight) SetMatchedTokens(val []SearchHighlightMatchedTokensItem) {
	s.MatchedTokens = val
}

type SearchHighlightMatchedTokensItem struct{}

// Merged schema.
// Ref: #/components/schemas/SearchOverride
type SearchOverride struct {
	Rule SearchOverrideRule `json:"rule"`
	// List of document `id`s that should be included in the search results with their corresponding
	// `position`s.
	Includes []SearchOverrideInclude `json:"includes"`
	// List of document `id`s that should be excluded from the search results.
	Excludes []SearchOverrideExclude `json:"excludes"`
	// A filter by clause that is applied to any search query that matches the override rule.
	FilterBy OptString `json:"filter_by"`
	// Indicates whether search query tokens that exist in the override's rule should be removed from the
	// search query.
	RemoveMatchedTokens OptBool `json:"remove_matched_tokens"`
	// Return a custom JSON object in the Search API response, when this rule is triggered. This can can
	// be used to display a pre-defined message (eg: a promotion banner) on the front-end when a
	// particular rule is triggered.
	Metadata *SearchOverrideMetadata `json:"metadata"`
	// A sort by clause that is applied to any search query that matches the override rule.
	SortBy OptString `json:"sort_by"`
	// Replaces the current search query with this value, when the search query matches the override rule.
	ReplaceQuery OptString `json:"replace_query"`
	// When set to true, the filter conditions of the query is applied to the curated records as well.
	// Default: false.
	FilterCuratedHits OptBool `json:"filter_curated_hits"`
	// A Unix timestamp that indicates the date/time from which the override will be active. You can use
	// this to create override rules that start applying from a future point in time.
	EffectiveFromTs OptInt `json:"effective_from_ts"`
	// A Unix timestamp that indicates the date/time until which the override will be active. You can use
	// this to create override rules that stop applying after a period of time.
	EffectiveToTs OptInt `json:"effective_to_ts"`
	// When set to true, override processing will stop at the first matching rule. When set to false
	// override processing will continue and multiple override actions will be triggered in sequence.
	// Overrides are processed in the lexical sort order of their id field. Default: true.
	StopProcessing OptBool `json:"stop_processing"`
	ID             string  `json:"id"`
}

// GetRule returns the value of Rule.
func (s *SearchOverride) GetRule() SearchOverrideRule {
	return s.Rule
}

// GetIncludes returns the value of Includes.
func (s *SearchOverride) GetIncludes() []SearchOverrideInclude {
	return s.Includes
}

// GetExcludes returns the value of Excludes.
func (s *SearchOverride) GetExcludes() []SearchOverrideExclude {
	return s.Excludes
}

// GetFilterBy returns the value of FilterBy.
func (s *SearchOverride) GetFilterBy() OptString {
	return s.FilterBy
}

// GetRemoveMatchedTokens returns the value of RemoveMatchedTokens.
func (s *SearchOverride) GetRemoveMatchedTokens() OptBool {
	return s.RemoveMatchedTokens
}

// GetMetadata returns the value of Metadata.
func (s *SearchOverride) GetMetadata() *SearchOverrideMetadata {
	return s.Metadata
}

// GetSortBy returns the value of SortBy.
func (s *SearchOverride) GetSortBy() OptString {
	return s.SortBy
}

// GetReplaceQuery returns the value of ReplaceQuery.
func (s *SearchOverride) GetReplaceQuery() OptString {
	return s.ReplaceQuery
}

// GetFilterCuratedHits returns the value of FilterCuratedHits.
func (s *SearchOverride) GetFilterCuratedHits() OptBool {
	return s.FilterCuratedHits
}

// GetEffectiveFromTs returns the value of EffectiveFromTs.
func (s *SearchOverride) GetEffectiveFromTs() OptInt {
	return s.EffectiveFromTs
}

// GetEffectiveToTs returns the value of EffectiveToTs.
func (s *SearchOverride) GetEffectiveToTs() OptInt {
	return s.EffectiveToTs
}

// GetStopProcessing returns the value of StopProcessing.
func (s *SearchOverride) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// GetID returns the value of ID.
func (s *SearchOverride) GetID() string {
	return s.ID
}

// SetRule sets the value of Rule.
func (s *SearchOverride) SetRule(val SearchOverrideRule) {
	s.Rule = val
}

// SetIncludes sets the value of Includes.
func (s *SearchOverride) SetIncludes(val []SearchOverrideInclude) {
	s.Includes = val
}

// SetExcludes sets the value of Excludes.
func (s *SearchOverride) SetExcludes(val []SearchOverrideExclude) {
	s.Excludes = val
}

// SetFilterBy sets the value of FilterBy.
func (s *SearchOverride) SetFilterBy(val OptString) {
	s.FilterBy = val
}

// SetRemoveMatchedTokens sets the value of RemoveMatchedTokens.
func (s *SearchOverride) SetRemoveMatchedTokens(val OptBool) {
	s.RemoveMatchedTokens = val
}

// SetMetadata sets the value of Metadata.
func (s *SearchOverride) SetMetadata(val *SearchOverrideMetadata) {
	s.Metadata = val
}

// SetSortBy sets the value of SortBy.
func (s *SearchOverride) SetSortBy(val OptString) {
	s.SortBy = val
}

// SetReplaceQuery sets the value of ReplaceQuery.
func (s *SearchOverride) SetReplaceQuery(val OptString) {
	s.ReplaceQuery = val
}

// SetFilterCuratedHits sets the value of FilterCuratedHits.
func (s *SearchOverride) SetFilterCuratedHits(val OptBool) {
	s.FilterCuratedHits = val
}

// SetEffectiveFromTs sets the value of EffectiveFromTs.
func (s *SearchOverride) SetEffectiveFromTs(val OptInt) {
	s.EffectiveFromTs = val
}

// SetEffectiveToTs sets the value of EffectiveToTs.
func (s *SearchOverride) SetEffectiveToTs(val OptInt) {
	s.EffectiveToTs = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *SearchOverride) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// SetID sets the value of ID.
func (s *SearchOverride) SetID(val string) {
	s.ID = val
}

func (*SearchOverride) upsertSearchOverrideRes() {}

// Ref: #/components/schemas/SearchOverrideDeleteResponse
type SearchOverrideDeleteResponse struct {
	// The id of the override that was deleted.
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *SearchOverrideDeleteResponse) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *SearchOverrideDeleteResponse) SetID(val string) {
	s.ID = val
}

func (*SearchOverrideDeleteResponse) deleteSearchOverrideRes() {}

// Ref: #/components/schemas/SearchOverrideExclude
type SearchOverrideExclude struct {
	// Document id that should be excluded from the search results.
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *SearchOverrideExclude) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *SearchOverrideExclude) SetID(val string) {
	s.ID = val
}

// Ref: #/components/schemas/SearchOverrideInclude
type SearchOverrideInclude struct {
	// Document id that should be included.
	ID string `json:"id"`
	// Position number where document should be included in the search results.
	Position int `json:"position"`
}

// GetID returns the value of ID.
func (s *SearchOverrideInclude) GetID() string {
	return s.ID
}

// GetPosition returns the value of Position.
func (s *SearchOverrideInclude) GetPosition() int {
	return s.Position
}

// SetID sets the value of ID.
func (s *SearchOverrideInclude) SetID(val string) {
	s.ID = val
}

// SetPosition sets the value of Position.
func (s *SearchOverrideInclude) SetPosition(val int) {
	s.Position = val
}

// Return a custom JSON object in the Search API response, when this rule is triggered. This can can
// be used to display a pre-defined message (eg: a promotion banner) on the front-end when a
// particular rule is triggered.
type SearchOverrideMetadata struct{}

// Ref: #/components/schemas/SearchOverrideRule
type SearchOverrideRule struct {
	// List of tag values to associate with this override rule.
	Tags []string `json:"tags"`
	// Indicates what search queries should be overridden.
	Query OptString `json:"query"`
	// Indicates whether the match on the query term should be `exact` or `contains`. If we want to match
	// all queries that contained the word `apple`, we will use the `contains` match instead.
	Match OptSearchOverrideRuleMatch `json:"match"`
	// Indicates that the override should apply when the filter_by parameter in a search query exactly
	// matches the string specified here (including backticks, spaces, brackets, etc).
	FilterBy OptString `json:"filter_by"`
}

// GetTags returns the value of Tags.
func (s *SearchOverrideRule) GetTags() []string {
	return s.Tags
}

// GetQuery returns the value of Query.
func (s *SearchOverrideRule) GetQuery() OptString {
	return s.Query
}

// GetMatch returns the value of Match.
func (s *SearchOverrideRule) GetMatch() OptSearchOverrideRuleMatch {
	return s.Match
}

// GetFilterBy returns the value of FilterBy.
func (s *SearchOverrideRule) GetFilterBy() OptString {
	return s.FilterBy
}

// SetTags sets the value of Tags.
func (s *SearchOverrideRule) SetTags(val []string) {
	s.Tags = val
}

// SetQuery sets the value of Query.
func (s *SearchOverrideRule) SetQuery(val OptString) {
	s.Query = val
}

// SetMatch sets the value of Match.
func (s *SearchOverrideRule) SetMatch(val OptSearchOverrideRuleMatch) {
	s.Match = val
}

// SetFilterBy sets the value of FilterBy.
func (s *SearchOverrideRule) SetFilterBy(val OptString) {
	s.FilterBy = val
}

// Indicates whether the match on the query term should be `exact` or `contains`. If we want to match
// all queries that contained the word `apple`, we will use the `contains` match instead.
type SearchOverrideRuleMatch string

const (
	SearchOverrideRuleMatchExact    SearchOverrideRuleMatch = "exact"
	SearchOverrideRuleMatchContains SearchOverrideRuleMatch = "contains"
)

// AllValues returns all SearchOverrideRuleMatch values.
func (SearchOverrideRuleMatch) AllValues() []SearchOverrideRuleMatch {
	return []SearchOverrideRuleMatch{
		SearchOverrideRuleMatchExact,
		SearchOverrideRuleMatchContains,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SearchOverrideRuleMatch) MarshalText() ([]byte, error) {
	switch s {
	case SearchOverrideRuleMatchExact:
		return []byte(s), nil
	case SearchOverrideRuleMatchContains:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchOverrideRuleMatch) UnmarshalText(data []byte) error {
	switch SearchOverrideRuleMatch(data) {
	case SearchOverrideRuleMatchExact:
		*s = SearchOverrideRuleMatchExact
		return nil
	case SearchOverrideRuleMatchContains:
		*s = SearchOverrideRuleMatchContains
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SearchOverrideSchema
type SearchOverrideSchema struct {
	Rule SearchOverrideRule `json:"rule"`
	// List of document `id`s that should be included in the search results with their corresponding
	// `position`s.
	Includes []SearchOverrideInclude `json:"includes"`
	// List of document `id`s that should be excluded from the search results.
	Excludes []SearchOverrideExclude `json:"excludes"`
	// A filter by clause that is applied to any search query that matches the override rule.
	FilterBy OptString `json:"filter_by"`
	// Indicates whether search query tokens that exist in the override's rule should be removed from the
	// search query.
	RemoveMatchedTokens OptBool `json:"remove_matched_tokens"`
	// Return a custom JSON object in the Search API response, when this rule is triggered. This can can
	// be used to display a pre-defined message (eg: a promotion banner) on the front-end when a
	// particular rule is triggered.
	Metadata *SearchOverrideSchemaMetadata `json:"metadata"`
	// A sort by clause that is applied to any search query that matches the override rule.
	SortBy OptString `json:"sort_by"`
	// Replaces the current search query with this value, when the search query matches the override rule.
	ReplaceQuery OptString `json:"replace_query"`
	// When set to true, the filter conditions of the query is applied to the curated records as well.
	// Default: false.
	FilterCuratedHits OptBool `json:"filter_curated_hits"`
	// A Unix timestamp that indicates the date/time from which the override will be active. You can use
	// this to create override rules that start applying from a future point in time.
	EffectiveFromTs OptInt `json:"effective_from_ts"`
	// A Unix timestamp that indicates the date/time until which the override will be active. You can use
	// this to create override rules that stop applying after a period of time.
	EffectiveToTs OptInt `json:"effective_to_ts"`
	// When set to true, override processing will stop at the first matching rule. When set to false
	// override processing will continue and multiple override actions will be triggered in sequence.
	// Overrides are processed in the lexical sort order of their id field. Default: true.
	StopProcessing OptBool `json:"stop_processing"`
}

// GetRule returns the value of Rule.
func (s *SearchOverrideSchema) GetRule() SearchOverrideRule {
	return s.Rule
}

// GetIncludes returns the value of Includes.
func (s *SearchOverrideSchema) GetIncludes() []SearchOverrideInclude {
	return s.Includes
}

// GetExcludes returns the value of Excludes.
func (s *SearchOverrideSchema) GetExcludes() []SearchOverrideExclude {
	return s.Excludes
}

// GetFilterBy returns the value of FilterBy.
func (s *SearchOverrideSchema) GetFilterBy() OptString {
	return s.FilterBy
}

// GetRemoveMatchedTokens returns the value of RemoveMatchedTokens.
func (s *SearchOverrideSchema) GetRemoveMatchedTokens() OptBool {
	return s.RemoveMatchedTokens
}

// GetMetadata returns the value of Metadata.
func (s *SearchOverrideSchema) GetMetadata() *SearchOverrideSchemaMetadata {
	return s.Metadata
}

// GetSortBy returns the value of SortBy.
func (s *SearchOverrideSchema) GetSortBy() OptString {
	return s.SortBy
}

// GetReplaceQuery returns the value of ReplaceQuery.
func (s *SearchOverrideSchema) GetReplaceQuery() OptString {
	return s.ReplaceQuery
}

// GetFilterCuratedHits returns the value of FilterCuratedHits.
func (s *SearchOverrideSchema) GetFilterCuratedHits() OptBool {
	return s.FilterCuratedHits
}

// GetEffectiveFromTs returns the value of EffectiveFromTs.
func (s *SearchOverrideSchema) GetEffectiveFromTs() OptInt {
	return s.EffectiveFromTs
}

// GetEffectiveToTs returns the value of EffectiveToTs.
func (s *SearchOverrideSchema) GetEffectiveToTs() OptInt {
	return s.EffectiveToTs
}

// GetStopProcessing returns the value of StopProcessing.
func (s *SearchOverrideSchema) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// SetRule sets the value of Rule.
func (s *SearchOverrideSchema) SetRule(val SearchOverrideRule) {
	s.Rule = val
}

// SetIncludes sets the value of Includes.
func (s *SearchOverrideSchema) SetIncludes(val []SearchOverrideInclude) {
	s.Includes = val
}

// SetExcludes sets the value of Excludes.
func (s *SearchOverrideSchema) SetExcludes(val []SearchOverrideExclude) {
	s.Excludes = val
}

// SetFilterBy sets the value of FilterBy.
func (s *SearchOverrideSchema) SetFilterBy(val OptString) {
	s.FilterBy = val
}

// SetRemoveMatchedTokens sets the value of RemoveMatchedTokens.
func (s *SearchOverrideSchema) SetRemoveMatchedTokens(val OptBool) {
	s.RemoveMatchedTokens = val
}

// SetMetadata sets the value of Metadata.
func (s *SearchOverrideSchema) SetMetadata(val *SearchOverrideSchemaMetadata) {
	s.Metadata = val
}

// SetSortBy sets the value of SortBy.
func (s *SearchOverrideSchema) SetSortBy(val OptString) {
	s.SortBy = val
}

// SetReplaceQuery sets the value of ReplaceQuery.
func (s *SearchOverrideSchema) SetReplaceQuery(val OptString) {
	s.ReplaceQuery = val
}

// SetFilterCuratedHits sets the value of FilterCuratedHits.
func (s *SearchOverrideSchema) SetFilterCuratedHits(val OptBool) {
	s.FilterCuratedHits = val
}

// SetEffectiveFromTs sets the value of EffectiveFromTs.
func (s *SearchOverrideSchema) SetEffectiveFromTs(val OptInt) {
	s.EffectiveFromTs = val
}

// SetEffectiveToTs sets the value of EffectiveToTs.
func (s *SearchOverrideSchema) SetEffectiveToTs(val OptInt) {
	s.EffectiveToTs = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *SearchOverrideSchema) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// Return a custom JSON object in the Search API response, when this rule is triggered. This can can
// be used to display a pre-defined message (eg: a promotion banner) on the front-end when a
// particular rule is triggered.
type SearchOverrideSchemaMetadata struct{}

// Ref: #/components/schemas/SearchOverridesResponse
type SearchOverridesResponse struct {
	Overrides []SearchOverride `json:"overrides"`
}

// GetOverrides returns the value of Overrides.
func (s *SearchOverridesResponse) GetOverrides() []SearchOverride {
	return s.Overrides
}

// SetOverrides sets the value of Overrides.
func (s *SearchOverridesResponse) SetOverrides(val []SearchOverride) {
	s.Overrides = val
}

// Ref: #/components/schemas/SearchParameters
type SearchParameters struct {
	// The query text to search for in the collection. Use * as the search string to return all documents.
	//  This is typically useful when used in conjunction with filter_by.
	Q OptString `json:"q"`
	// A list of `string` fields that should be queried against. Multiple fields are separated with a
	// comma.
	QueryBy OptString `json:"query_by"`
	// Whether to use natural language processing to parse the query.
	NlQuery OptBool `json:"nl_query"`
	// The ID of the natural language model to use.
	NlModelID OptString `json:"nl_model_id"`
	// The relative weight to give each `query_by` field when ranking results. This can be used to boost
	// fields in priority, when looking for matches. Multiple fields are separated with a comma.
	QueryByWeights OptString `json:"query_by_weights"`
	// In a multi-field matching context, this parameter determines how the representative text match
	// score of a record is calculated. Possible values are max_score (default) or max_weight.
	TextMatchType OptString `json:"text_match_type"`
	// Boolean field to indicate that the last word in the query should be treated as a prefix, and not
	// as a whole word. This is used for building autocomplete and instant search interfaces. Defaults to
	// true.
	Prefix OptString `json:"prefix"`
	// If infix index is enabled for this field, infix searching can be done on a per-field basis by
	// sending a comma separated string parameter called infix to the search query. This parameter can
	// have 3 values; `off` infix search is disabled, which is default `always` infix search is performed
	// along with regular search `fallback` infix search is performed if regular search does not produce
	// results.
	Infix OptString `json:"infix"`
	// There are also 2 parameters that allow you to control the extent of infix searching
	// max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after
	// the query that can be present in the token. For example query "K2100" has 2 extra symbols in
	// "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
	MaxExtraPrefix OptInt `json:"max_extra_prefix"`
	// There are also 2 parameters that allow you to control the extent of infix searching
	// max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after
	// the query that can be present in the token. For example query "K2100" has 2 extra symbols in
	// "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
	MaxExtraSuffix OptInt `json:"max_extra_suffix"`
	// Filter conditions for refining youropen api validator search results. Separate multiple conditions
	// with &&.
	FilterBy OptString `json:"filter_by"`
	// Controls the number of similar words that Typesense considers during fuzzy search on filter_by
	// values. Useful for controlling prefix matches like company_name:Acm*.
	MaxFilterByCandidates OptInt `json:"max_filter_by_candidates"`
	// A list of numerical fields and their corresponding sort orders that will be used for ordering your
	// results. Up to 3 sort fields can be specified. The text similarity score is exposed as a special
	// `_text_match` field that you can use in the list of sorting fields. If no `sort_by` parameter is
	// specified, results are sorted by `_text_match:desc,default_sorting_field:desc`.
	SortBy OptString `json:"sort_by"`
	// A list of fields that will be used for faceting your results on. Separate multiple fields with a
	// comma.
	FacetBy OptString `json:"facet_by"`
	// Maximum number of facet values to be returned.
	MaxFacetValues OptInt `json:"max_facet_values"`
	// Facet values that are returned can now be filtered via this parameter. The matching facet text is
	// also highlighted. For example, when faceting by `category`, you can set
	// `facet_query=category:shoe` to return only facet values that contain the prefix "shoe".
	FacetQuery OptString `json:"facet_query"`
	// The number of typographical errors (1 or 2) that would be tolerated. Default: 2.
	NumTypos OptString `json:"num_typos"`
	// Results from this specific page number would be fetched.
	Page OptInt `json:"page"`
	// Number of results to fetch per page. Default: 10.
	PerPage OptInt `json:"per_page"`
	// Number of hits to fetch. Can be used as an alternative to the per_page parameter. Default: 10.
	Limit OptInt `json:"limit"`
	// Identifies the starting point to return hits from a result set. Can be used as an alternative to
	// the page parameter.
	Offset OptInt `json:"offset"`
	// You can aggregate search results into groups or buckets by specify one or more `group_by` fields.
	// Separate multiple fields with a comma. To group on a particular field, it must be a faceted field.
	GroupBy OptString `json:"group_by"`
	// Maximum number of hits to be returned for every group. If the `group_limit` is set as `K` then
	// only the top K hits in each group are returned in the response. Default: 3.
	GroupLimit OptInt `json:"group_limit"`
	// Setting this parameter to true will place all documents that have a null value in the group_by
	// field, into a single group. Setting this parameter to false, will cause each document with a null
	// value in the group_by field to not be grouped with other documents. Default: true.
	GroupMissingValues OptBool `json:"group_missing_values"`
	// List of fields from the document to include in the search result.
	IncludeFields OptString `json:"include_fields"`
	// List of fields from the document to exclude in the search result.
	ExcludeFields OptString `json:"exclude_fields"`
	// List of fields which should be highlighted fully without snippeting.
	HighlightFullFields OptString `json:"highlight_full_fields"`
	// The number of tokens that should surround the highlighted text on each side. Default: 4.
	HighlightAffixNumTokens OptInt `json:"highlight_affix_num_tokens"`
	// The start tag used for the highlighted snippets. Default: `<mark>`.
	HighlightStartTag OptString `json:"highlight_start_tag"`
	// The end tag used for the highlighted snippets. Default: `</mark>`.
	HighlightEndTag OptString `json:"highlight_end_tag"`
	// Flag for enabling/disabling the deprecated, old highlight structure in the response. Default: true.
	EnableHighlightV1 OptBool `json:"enable_highlight_v1"`
	// Field values under this length will be fully highlighted, instead of showing a snippet of relevant
	// portion. Default: 30.
	SnippetThreshold OptInt `json:"snippet_threshold"`
	// If the number of results found for a specific query is less than this number, Typesense will
	// attempt to drop the tokens in the query until enough results are found. Tokens that have the least
	// individual hits are dropped first. Set to 0 to disable. Default: 10.
	DropTokensThreshold OptInt            `json:"drop_tokens_threshold"`
	DropTokensMode      OptDropTokensMode `json:"drop_tokens_mode"`
	// If the number of results found for a specific query is less than this number, Typesense will
	// attempt to look for tokens with more typos until enough results are found. Default: 100.
	TypoTokensThreshold OptInt `json:"typo_tokens_threshold"`
	// Set this parameter to false to disable typos on alphanumerical query tokens. Default: true.
	EnableTyposForAlphaNumericalTokens OptBool `json:"enable_typos_for_alpha_numerical_tokens"`
	// Whether the filter_by condition of the search query should be applicable to curated results
	// (override definitions, pinned hits, hidden hits, etc.). Default: false.
	FilterCuratedHits OptBool `json:"filter_curated_hits"`
	// If you have some synonyms defined but want to disable all of them for a particular search query,
	// set enable_synonyms to false. Default: true.
	EnableSynonyms OptBool `json:"enable_synonyms"`
	// Allow synonym resolution on word prefixes in the query. Default: false.
	SynonymPrefix OptBool `json:"synonym_prefix"`
	// Allow synonym resolution on typo-corrected words in the query. Default: 0.
	SynonymNumTypos OptInt `json:"synonym_num_typos"`
	// A list of records to unconditionally include in the search results at specific positions. An
	// example use case would be to feature or promote certain items on the top of search results. A list
	// of `record_id:hit_position`. Eg: to include a record with ID 123 at Position 1 and another record
	// with ID 456 at Position 5, you'd specify `123:1,456:5`.
	// You could also use the Overrides feature to override search results based on rules. Overrides are
	// applied first, followed by `pinned_hits` and finally `hidden_hits`.
	PinnedHits OptString `json:"pinned_hits"`
	// A list of records to unconditionally hide from search results. A list of `record_id`s to hide. Eg:
	// to hide records with IDs 123 and 456, you'd specify `123,456`.
	// You could also use the Overrides feature to override search results based on rules. Overrides are
	// applied first, followed by `pinned_hits` and finally `hidden_hits`.
	HiddenHits OptString `json:"hidden_hits"`
	// Comma separated list of tags to trigger the curations rules that match the tags.
	OverrideTags OptString `json:"override_tags"`
	// A list of custom fields that must be highlighted even if you don't query for them.
	HighlightFields OptString `json:"highlight_fields"`
	// Treat space as typo: search for q=basket ball if q=basketball is not found or vice-versa.
	// Splitting/joining of tokens will only be attempted if the original query produces no results. To
	// always trigger this behavior, set value to `always``. To disable, set value to `off`. Default is
	// `fallback`.
	SplitJoinTokens OptString `json:"split_join_tokens"`
	// You can index content from any logographic language into Typesense if you are able to segment /
	// split the text into space-separated words yourself before indexing and querying.
	// Set this parameter to true to do the same.
	PreSegmentedQuery OptBool `json:"pre_segmented_query"`
	// Search using a bunch of search parameters by setting this parameter to the name of the existing
	// Preset.
	Preset OptString `json:"preset"`
	// If you have some overrides defined but want to disable all of them during query time, you can do
	// that by setting this parameter to false.
	EnableOverrides OptBool `json:"enable_overrides"`
	// Set this parameter to true to ensure that an exact match is ranked above the others.
	PrioritizeExactMatch OptBool `json:"prioritize_exact_match"`
	// Control the number of words that Typesense considers for typo and prefix searching.
	MaxCandidates OptInt `json:"max_candidates"`
	// Make Typesense prioritize documents where the query words appear earlier in the text.
	PrioritizeTokenPosition OptBool `json:"prioritize_token_position"`
	// Make Typesense prioritize documents where the query words appear in more number of fields.
	PrioritizeNumMatchingFields OptBool `json:"prioritize_num_matching_fields"`
	// Make Typesense disable typos for numerical tokens.
	EnableTyposForNumericalTokens OptBool `json:"enable_typos_for_numerical_tokens"`
	// Setting this to true will make Typesense consider all prefixes and typo corrections of the words
	// in the query without stopping early when enough results are found (drop_tokens_threshold and
	// typo_tokens_threshold configurations are ignored).
	ExhaustiveSearch OptBool `json:"exhaustive_search"`
	// Typesense will attempt to return results early if the cutoff time has elapsed. This is not a
	// strict guarantee and facet computation is not bound by this parameter.
	SearchCutoffMs OptInt `json:"search_cutoff_ms"`
	// Enable server side caching of search query results. By default, caching is disabled.
	UseCache OptBool `json:"use_cache"`
	// The duration (in seconds) that determines how long the search query is cached. This value can be
	// set on a per-query basis. Default: 60.
	CacheTTL OptInt `json:"cache_ttl"`
	// Minimum word length for 1-typo correction to be applied. The value of num_typos is still treated
	// as the maximum allowed typos.
	MinLen1typo OptInt `json:"min_len_1typo"`
	// Minimum word length for 2-typo correction to be applied. The value of num_typos is still treated
	// as the maximum allowed typos.
	MinLen2typo OptInt `json:"min_len_2typo"`
	// Vector query expression for fetching documents "closest" to a given query/document vector.
	VectorQuery OptString `json:"vector_query"`
	// Timeout (in milliseconds) for fetching remote embeddings.
	RemoteEmbeddingTimeoutMs OptInt `json:"remote_embedding_timeout_ms"`
	// Number of times to retry fetching remote embeddings.
	RemoteEmbeddingNumTries OptInt `json:"remote_embedding_num_tries"`
	// Choose the underlying faceting strategy used. Comma separated string of allows values: exhaustive,
	// top_values or automatic (default).
	FacetStrategy OptString `json:"facet_strategy"`
	// Name of the stopwords set to apply for this search, the keywords present in the set will be
	// removed from the search query.
	Stopwords OptString `json:"stopwords"`
	// Comma separated string of nested facet fields whose parent object should be returned in facet
	// response.
	FacetReturnParent OptString `json:"facet_return_parent"`
	// The base64 encoded audio file in 16 khz 16-bit WAV format.
	VoiceQuery OptString `json:"voice_query"`
	// Enable conversational search.
	Conversation OptBool `json:"conversation"`
	// The Id of Conversation Model to be used.
	ConversationModelID OptString `json:"conversation_model_id"`
	// The Id of a previous conversation to continue, this tells Typesense to include prior context when
	// communicating with the LLM.
	ConversationID OptString `json:"conversation_id"`
}

// GetQ returns the value of Q.
func (s *SearchParameters) GetQ() OptString {
	return s.Q
}

// GetQueryBy returns the value of QueryBy.
func (s *SearchParameters) GetQueryBy() OptString {
	return s.QueryBy
}

// GetNlQuery returns the value of NlQuery.
func (s *SearchParameters) GetNlQuery() OptBool {
	return s.NlQuery
}

// GetNlModelID returns the value of NlModelID.
func (s *SearchParameters) GetNlModelID() OptString {
	return s.NlModelID
}

// GetQueryByWeights returns the value of QueryByWeights.
func (s *SearchParameters) GetQueryByWeights() OptString {
	return s.QueryByWeights
}

// GetTextMatchType returns the value of TextMatchType.
func (s *SearchParameters) GetTextMatchType() OptString {
	return s.TextMatchType
}

// GetPrefix returns the value of Prefix.
func (s *SearchParameters) GetPrefix() OptString {
	return s.Prefix
}

// GetInfix returns the value of Infix.
func (s *SearchParameters) GetInfix() OptString {
	return s.Infix
}

// GetMaxExtraPrefix returns the value of MaxExtraPrefix.
func (s *SearchParameters) GetMaxExtraPrefix() OptInt {
	return s.MaxExtraPrefix
}

// GetMaxExtraSuffix returns the value of MaxExtraSuffix.
func (s *SearchParameters) GetMaxExtraSuffix() OptInt {
	return s.MaxExtraSuffix
}

// GetFilterBy returns the value of FilterBy.
func (s *SearchParameters) GetFilterBy() OptString {
	return s.FilterBy
}

// GetMaxFilterByCandidates returns the value of MaxFilterByCandidates.
func (s *SearchParameters) GetMaxFilterByCandidates() OptInt {
	return s.MaxFilterByCandidates
}

// GetSortBy returns the value of SortBy.
func (s *SearchParameters) GetSortBy() OptString {
	return s.SortBy
}

// GetFacetBy returns the value of FacetBy.
func (s *SearchParameters) GetFacetBy() OptString {
	return s.FacetBy
}

// GetMaxFacetValues returns the value of MaxFacetValues.
func (s *SearchParameters) GetMaxFacetValues() OptInt {
	return s.MaxFacetValues
}

// GetFacetQuery returns the value of FacetQuery.
func (s *SearchParameters) GetFacetQuery() OptString {
	return s.FacetQuery
}

// GetNumTypos returns the value of NumTypos.
func (s *SearchParameters) GetNumTypos() OptString {
	return s.NumTypos
}

// GetPage returns the value of Page.
func (s *SearchParameters) GetPage() OptInt {
	return s.Page
}

// GetPerPage returns the value of PerPage.
func (s *SearchParameters) GetPerPage() OptInt {
	return s.PerPage
}

// GetLimit returns the value of Limit.
func (s *SearchParameters) GetLimit() OptInt {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *SearchParameters) GetOffset() OptInt {
	return s.Offset
}

// GetGroupBy returns the value of GroupBy.
func (s *SearchParameters) GetGroupBy() OptString {
	return s.GroupBy
}

// GetGroupLimit returns the value of GroupLimit.
func (s *SearchParameters) GetGroupLimit() OptInt {
	return s.GroupLimit
}

// GetGroupMissingValues returns the value of GroupMissingValues.
func (s *SearchParameters) GetGroupMissingValues() OptBool {
	return s.GroupMissingValues
}

// GetIncludeFields returns the value of IncludeFields.
func (s *SearchParameters) GetIncludeFields() OptString {
	return s.IncludeFields
}

// GetExcludeFields returns the value of ExcludeFields.
func (s *SearchParameters) GetExcludeFields() OptString {
	return s.ExcludeFields
}

// GetHighlightFullFields returns the value of HighlightFullFields.
func (s *SearchParameters) GetHighlightFullFields() OptString {
	return s.HighlightFullFields
}

// GetHighlightAffixNumTokens returns the value of HighlightAffixNumTokens.
func (s *SearchParameters) GetHighlightAffixNumTokens() OptInt {
	return s.HighlightAffixNumTokens
}

// GetHighlightStartTag returns the value of HighlightStartTag.
func (s *SearchParameters) GetHighlightStartTag() OptString {
	return s.HighlightStartTag
}

// GetHighlightEndTag returns the value of HighlightEndTag.
func (s *SearchParameters) GetHighlightEndTag() OptString {
	return s.HighlightEndTag
}

// GetEnableHighlightV1 returns the value of EnableHighlightV1.
func (s *SearchParameters) GetEnableHighlightV1() OptBool {
	return s.EnableHighlightV1
}

// GetSnippetThreshold returns the value of SnippetThreshold.
func (s *SearchParameters) GetSnippetThreshold() OptInt {
	return s.SnippetThreshold
}

// GetDropTokensThreshold returns the value of DropTokensThreshold.
func (s *SearchParameters) GetDropTokensThreshold() OptInt {
	return s.DropTokensThreshold
}

// GetDropTokensMode returns the value of DropTokensMode.
func (s *SearchParameters) GetDropTokensMode() OptDropTokensMode {
	return s.DropTokensMode
}

// GetTypoTokensThreshold returns the value of TypoTokensThreshold.
func (s *SearchParameters) GetTypoTokensThreshold() OptInt {
	return s.TypoTokensThreshold
}

// GetEnableTyposForAlphaNumericalTokens returns the value of EnableTyposForAlphaNumericalTokens.
func (s *SearchParameters) GetEnableTyposForAlphaNumericalTokens() OptBool {
	return s.EnableTyposForAlphaNumericalTokens
}

// GetFilterCuratedHits returns the value of FilterCuratedHits.
func (s *SearchParameters) GetFilterCuratedHits() OptBool {
	return s.FilterCuratedHits
}

// GetEnableSynonyms returns the value of EnableSynonyms.
func (s *SearchParameters) GetEnableSynonyms() OptBool {
	return s.EnableSynonyms
}

// GetSynonymPrefix returns the value of SynonymPrefix.
func (s *SearchParameters) GetSynonymPrefix() OptBool {
	return s.SynonymPrefix
}

// GetSynonymNumTypos returns the value of SynonymNumTypos.
func (s *SearchParameters) GetSynonymNumTypos() OptInt {
	return s.SynonymNumTypos
}

// GetPinnedHits returns the value of PinnedHits.
func (s *SearchParameters) GetPinnedHits() OptString {
	return s.PinnedHits
}

// GetHiddenHits returns the value of HiddenHits.
func (s *SearchParameters) GetHiddenHits() OptString {
	return s.HiddenHits
}

// GetOverrideTags returns the value of OverrideTags.
func (s *SearchParameters) GetOverrideTags() OptString {
	return s.OverrideTags
}

// GetHighlightFields returns the value of HighlightFields.
func (s *SearchParameters) GetHighlightFields() OptString {
	return s.HighlightFields
}

// GetSplitJoinTokens returns the value of SplitJoinTokens.
func (s *SearchParameters) GetSplitJoinTokens() OptString {
	return s.SplitJoinTokens
}

// GetPreSegmentedQuery returns the value of PreSegmentedQuery.
func (s *SearchParameters) GetPreSegmentedQuery() OptBool {
	return s.PreSegmentedQuery
}

// GetPreset returns the value of Preset.
func (s *SearchParameters) GetPreset() OptString {
	return s.Preset
}

// GetEnableOverrides returns the value of EnableOverrides.
func (s *SearchParameters) GetEnableOverrides() OptBool {
	return s.EnableOverrides
}

// GetPrioritizeExactMatch returns the value of PrioritizeExactMatch.
func (s *SearchParameters) GetPrioritizeExactMatch() OptBool {
	return s.PrioritizeExactMatch
}

// GetMaxCandidates returns the value of MaxCandidates.
func (s *SearchParameters) GetMaxCandidates() OptInt {
	return s.MaxCandidates
}

// GetPrioritizeTokenPosition returns the value of PrioritizeTokenPosition.
func (s *SearchParameters) GetPrioritizeTokenPosition() OptBool {
	return s.PrioritizeTokenPosition
}

// GetPrioritizeNumMatchingFields returns the value of PrioritizeNumMatchingFields.
func (s *SearchParameters) GetPrioritizeNumMatchingFields() OptBool {
	return s.PrioritizeNumMatchingFields
}

// GetEnableTyposForNumericalTokens returns the value of EnableTyposForNumericalTokens.
func (s *SearchParameters) GetEnableTyposForNumericalTokens() OptBool {
	return s.EnableTyposForNumericalTokens
}

// GetExhaustiveSearch returns the value of ExhaustiveSearch.
func (s *SearchParameters) GetExhaustiveSearch() OptBool {
	return s.ExhaustiveSearch
}

// GetSearchCutoffMs returns the value of SearchCutoffMs.
func (s *SearchParameters) GetSearchCutoffMs() OptInt {
	return s.SearchCutoffMs
}

// GetUseCache returns the value of UseCache.
func (s *SearchParameters) GetUseCache() OptBool {
	return s.UseCache
}

// GetCacheTTL returns the value of CacheTTL.
func (s *SearchParameters) GetCacheTTL() OptInt {
	return s.CacheTTL
}

// GetMinLen1typo returns the value of MinLen1typo.
func (s *SearchParameters) GetMinLen1typo() OptInt {
	return s.MinLen1typo
}

// GetMinLen2typo returns the value of MinLen2typo.
func (s *SearchParameters) GetMinLen2typo() OptInt {
	return s.MinLen2typo
}

// GetVectorQuery returns the value of VectorQuery.
func (s *SearchParameters) GetVectorQuery() OptString {
	return s.VectorQuery
}

// GetRemoteEmbeddingTimeoutMs returns the value of RemoteEmbeddingTimeoutMs.
func (s *SearchParameters) GetRemoteEmbeddingTimeoutMs() OptInt {
	return s.RemoteEmbeddingTimeoutMs
}

// GetRemoteEmbeddingNumTries returns the value of RemoteEmbeddingNumTries.
func (s *SearchParameters) GetRemoteEmbeddingNumTries() OptInt {
	return s.RemoteEmbeddingNumTries
}

// GetFacetStrategy returns the value of FacetStrategy.
func (s *SearchParameters) GetFacetStrategy() OptString {
	return s.FacetStrategy
}

// GetStopwords returns the value of Stopwords.
func (s *SearchParameters) GetStopwords() OptString {
	return s.Stopwords
}

// GetFacetReturnParent returns the value of FacetReturnParent.
func (s *SearchParameters) GetFacetReturnParent() OptString {
	return s.FacetReturnParent
}

// GetVoiceQuery returns the value of VoiceQuery.
func (s *SearchParameters) GetVoiceQuery() OptString {
	return s.VoiceQuery
}

// GetConversation returns the value of Conversation.
func (s *SearchParameters) GetConversation() OptBool {
	return s.Conversation
}

// GetConversationModelID returns the value of ConversationModelID.
func (s *SearchParameters) GetConversationModelID() OptString {
	return s.ConversationModelID
}

// GetConversationID returns the value of ConversationID.
func (s *SearchParameters) GetConversationID() OptString {
	return s.ConversationID
}

// SetQ sets the value of Q.
func (s *SearchParameters) SetQ(val OptString) {
	s.Q = val
}

// SetQueryBy sets the value of QueryBy.
func (s *SearchParameters) SetQueryBy(val OptString) {
	s.QueryBy = val
}

// SetNlQuery sets the value of NlQuery.
func (s *SearchParameters) SetNlQuery(val OptBool) {
	s.NlQuery = val
}

// SetNlModelID sets the value of NlModelID.
func (s *SearchParameters) SetNlModelID(val OptString) {
	s.NlModelID = val
}

// SetQueryByWeights sets the value of QueryByWeights.
func (s *SearchParameters) SetQueryByWeights(val OptString) {
	s.QueryByWeights = val
}

// SetTextMatchType sets the value of TextMatchType.
func (s *SearchParameters) SetTextMatchType(val OptString) {
	s.TextMatchType = val
}

// SetPrefix sets the value of Prefix.
func (s *SearchParameters) SetPrefix(val OptString) {
	s.Prefix = val
}

// SetInfix sets the value of Infix.
func (s *SearchParameters) SetInfix(val OptString) {
	s.Infix = val
}

// SetMaxExtraPrefix sets the value of MaxExtraPrefix.
func (s *SearchParameters) SetMaxExtraPrefix(val OptInt) {
	s.MaxExtraPrefix = val
}

// SetMaxExtraSuffix sets the value of MaxExtraSuffix.
func (s *SearchParameters) SetMaxExtraSuffix(val OptInt) {
	s.MaxExtraSuffix = val
}

// SetFilterBy sets the value of FilterBy.
func (s *SearchParameters) SetFilterBy(val OptString) {
	s.FilterBy = val
}

// SetMaxFilterByCandidates sets the value of MaxFilterByCandidates.
func (s *SearchParameters) SetMaxFilterByCandidates(val OptInt) {
	s.MaxFilterByCandidates = val
}

// SetSortBy sets the value of SortBy.
func (s *SearchParameters) SetSortBy(val OptString) {
	s.SortBy = val
}

// SetFacetBy sets the value of FacetBy.
func (s *SearchParameters) SetFacetBy(val OptString) {
	s.FacetBy = val
}

// SetMaxFacetValues sets the value of MaxFacetValues.
func (s *SearchParameters) SetMaxFacetValues(val OptInt) {
	s.MaxFacetValues = val
}

// SetFacetQuery sets the value of FacetQuery.
func (s *SearchParameters) SetFacetQuery(val OptString) {
	s.FacetQuery = val
}

// SetNumTypos sets the value of NumTypos.
func (s *SearchParameters) SetNumTypos(val OptString) {
	s.NumTypos = val
}

// SetPage sets the value of Page.
func (s *SearchParameters) SetPage(val OptInt) {
	s.Page = val
}

// SetPerPage sets the value of PerPage.
func (s *SearchParameters) SetPerPage(val OptInt) {
	s.PerPage = val
}

// SetLimit sets the value of Limit.
func (s *SearchParameters) SetLimit(val OptInt) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *SearchParameters) SetOffset(val OptInt) {
	s.Offset = val
}

// SetGroupBy sets the value of GroupBy.
func (s *SearchParameters) SetGroupBy(val OptString) {
	s.GroupBy = val
}

// SetGroupLimit sets the value of GroupLimit.
func (s *SearchParameters) SetGroupLimit(val OptInt) {
	s.GroupLimit = val
}

// SetGroupMissingValues sets the value of GroupMissingValues.
func (s *SearchParameters) SetGroupMissingValues(val OptBool) {
	s.GroupMissingValues = val
}

// SetIncludeFields sets the value of IncludeFields.
func (s *SearchParameters) SetIncludeFields(val OptString) {
	s.IncludeFields = val
}

// SetExcludeFields sets the value of ExcludeFields.
func (s *SearchParameters) SetExcludeFields(val OptString) {
	s.ExcludeFields = val
}

// SetHighlightFullFields sets the value of HighlightFullFields.
func (s *SearchParameters) SetHighlightFullFields(val OptString) {
	s.HighlightFullFields = val
}

// SetHighlightAffixNumTokens sets the value of HighlightAffixNumTokens.
func (s *SearchParameters) SetHighlightAffixNumTokens(val OptInt) {
	s.HighlightAffixNumTokens = val
}

// SetHighlightStartTag sets the value of HighlightStartTag.
func (s *SearchParameters) SetHighlightStartTag(val OptString) {
	s.HighlightStartTag = val
}

// SetHighlightEndTag sets the value of HighlightEndTag.
func (s *SearchParameters) SetHighlightEndTag(val OptString) {
	s.HighlightEndTag = val
}

// SetEnableHighlightV1 sets the value of EnableHighlightV1.
func (s *SearchParameters) SetEnableHighlightV1(val OptBool) {
	s.EnableHighlightV1 = val
}

// SetSnippetThreshold sets the value of SnippetThreshold.
func (s *SearchParameters) SetSnippetThreshold(val OptInt) {
	s.SnippetThreshold = val
}

// SetDropTokensThreshold sets the value of DropTokensThreshold.
func (s *SearchParameters) SetDropTokensThreshold(val OptInt) {
	s.DropTokensThreshold = val
}

// SetDropTokensMode sets the value of DropTokensMode.
func (s *SearchParameters) SetDropTokensMode(val OptDropTokensMode) {
	s.DropTokensMode = val
}

// SetTypoTokensThreshold sets the value of TypoTokensThreshold.
func (s *SearchParameters) SetTypoTokensThreshold(val OptInt) {
	s.TypoTokensThreshold = val
}

// SetEnableTyposForAlphaNumericalTokens sets the value of EnableTyposForAlphaNumericalTokens.
func (s *SearchParameters) SetEnableTyposForAlphaNumericalTokens(val OptBool) {
	s.EnableTyposForAlphaNumericalTokens = val
}

// SetFilterCuratedHits sets the value of FilterCuratedHits.
func (s *SearchParameters) SetFilterCuratedHits(val OptBool) {
	s.FilterCuratedHits = val
}

// SetEnableSynonyms sets the value of EnableSynonyms.
func (s *SearchParameters) SetEnableSynonyms(val OptBool) {
	s.EnableSynonyms = val
}

// SetSynonymPrefix sets the value of SynonymPrefix.
func (s *SearchParameters) SetSynonymPrefix(val OptBool) {
	s.SynonymPrefix = val
}

// SetSynonymNumTypos sets the value of SynonymNumTypos.
func (s *SearchParameters) SetSynonymNumTypos(val OptInt) {
	s.SynonymNumTypos = val
}

// SetPinnedHits sets the value of PinnedHits.
func (s *SearchParameters) SetPinnedHits(val OptString) {
	s.PinnedHits = val
}

// SetHiddenHits sets the value of HiddenHits.
func (s *SearchParameters) SetHiddenHits(val OptString) {
	s.HiddenHits = val
}

// SetOverrideTags sets the value of OverrideTags.
func (s *SearchParameters) SetOverrideTags(val OptString) {
	s.OverrideTags = val
}

// SetHighlightFields sets the value of HighlightFields.
func (s *SearchParameters) SetHighlightFields(val OptString) {
	s.HighlightFields = val
}

// SetSplitJoinTokens sets the value of SplitJoinTokens.
func (s *SearchParameters) SetSplitJoinTokens(val OptString) {
	s.SplitJoinTokens = val
}

// SetPreSegmentedQuery sets the value of PreSegmentedQuery.
func (s *SearchParameters) SetPreSegmentedQuery(val OptBool) {
	s.PreSegmentedQuery = val
}

// SetPreset sets the value of Preset.
func (s *SearchParameters) SetPreset(val OptString) {
	s.Preset = val
}

// SetEnableOverrides sets the value of EnableOverrides.
func (s *SearchParameters) SetEnableOverrides(val OptBool) {
	s.EnableOverrides = val
}

// SetPrioritizeExactMatch sets the value of PrioritizeExactMatch.
func (s *SearchParameters) SetPrioritizeExactMatch(val OptBool) {
	s.PrioritizeExactMatch = val
}

// SetMaxCandidates sets the value of MaxCandidates.
func (s *SearchParameters) SetMaxCandidates(val OptInt) {
	s.MaxCandidates = val
}

// SetPrioritizeTokenPosition sets the value of PrioritizeTokenPosition.
func (s *SearchParameters) SetPrioritizeTokenPosition(val OptBool) {
	s.PrioritizeTokenPosition = val
}

// SetPrioritizeNumMatchingFields sets the value of PrioritizeNumMatchingFields.
func (s *SearchParameters) SetPrioritizeNumMatchingFields(val OptBool) {
	s.PrioritizeNumMatchingFields = val
}

// SetEnableTyposForNumericalTokens sets the value of EnableTyposForNumericalTokens.
func (s *SearchParameters) SetEnableTyposForNumericalTokens(val OptBool) {
	s.EnableTyposForNumericalTokens = val
}

// SetExhaustiveSearch sets the value of ExhaustiveSearch.
func (s *SearchParameters) SetExhaustiveSearch(val OptBool) {
	s.ExhaustiveSearch = val
}

// SetSearchCutoffMs sets the value of SearchCutoffMs.
func (s *SearchParameters) SetSearchCutoffMs(val OptInt) {
	s.SearchCutoffMs = val
}

// SetUseCache sets the value of UseCache.
func (s *SearchParameters) SetUseCache(val OptBool) {
	s.UseCache = val
}

// SetCacheTTL sets the value of CacheTTL.
func (s *SearchParameters) SetCacheTTL(val OptInt) {
	s.CacheTTL = val
}

// SetMinLen1typo sets the value of MinLen1typo.
func (s *SearchParameters) SetMinLen1typo(val OptInt) {
	s.MinLen1typo = val
}

// SetMinLen2typo sets the value of MinLen2typo.
func (s *SearchParameters) SetMinLen2typo(val OptInt) {
	s.MinLen2typo = val
}

// SetVectorQuery sets the value of VectorQuery.
func (s *SearchParameters) SetVectorQuery(val OptString) {
	s.VectorQuery = val
}

// SetRemoteEmbeddingTimeoutMs sets the value of RemoteEmbeddingTimeoutMs.
func (s *SearchParameters) SetRemoteEmbeddingTimeoutMs(val OptInt) {
	s.RemoteEmbeddingTimeoutMs = val
}

// SetRemoteEmbeddingNumTries sets the value of RemoteEmbeddingNumTries.
func (s *SearchParameters) SetRemoteEmbeddingNumTries(val OptInt) {
	s.RemoteEmbeddingNumTries = val
}

// SetFacetStrategy sets the value of FacetStrategy.
func (s *SearchParameters) SetFacetStrategy(val OptString) {
	s.FacetStrategy = val
}

// SetStopwords sets the value of Stopwords.
func (s *SearchParameters) SetStopwords(val OptString) {
	s.Stopwords = val
}

// SetFacetReturnParent sets the value of FacetReturnParent.
func (s *SearchParameters) SetFacetReturnParent(val OptString) {
	s.FacetReturnParent = val
}

// SetVoiceQuery sets the value of VoiceQuery.
func (s *SearchParameters) SetVoiceQuery(val OptString) {
	s.VoiceQuery = val
}

// SetConversation sets the value of Conversation.
func (s *SearchParameters) SetConversation(val OptBool) {
	s.Conversation = val
}

// SetConversationModelID sets the value of ConversationModelID.
func (s *SearchParameters) SetConversationModelID(val OptString) {
	s.ConversationModelID = val
}

// SetConversationID sets the value of ConversationID.
func (s *SearchParameters) SetConversationID(val OptString) {
	s.ConversationID = val
}

// Ref: #/components/schemas/SearchRequestParams
type SearchRequestParams struct {
	CollectionName string                           `json:"collection_name"`
	Q              string                           `json:"q"`
	PerPage        int                              `json:"per_page"`
	VoiceQuery     OptSearchRequestParamsVoiceQuery `json:"voice_query"`
}

// GetCollectionName returns the value of CollectionName.
func (s *SearchRequestParams) GetCollectionName() string {
	return s.CollectionName
}

// GetQ returns the value of Q.
func (s *SearchRequestParams) GetQ() string {
	return s.Q
}

// GetPerPage returns the value of PerPage.
func (s *SearchRequestParams) GetPerPage() int {
	return s.PerPage
}

// GetVoiceQuery returns the value of VoiceQuery.
func (s *SearchRequestParams) GetVoiceQuery() OptSearchRequestParamsVoiceQuery {
	return s.VoiceQuery
}

// SetCollectionName sets the value of CollectionName.
func (s *SearchRequestParams) SetCollectionName(val string) {
	s.CollectionName = val
}

// SetQ sets the value of Q.
func (s *SearchRequestParams) SetQ(val string) {
	s.Q = val
}

// SetPerPage sets the value of PerPage.
func (s *SearchRequestParams) SetPerPage(val int) {
	s.PerPage = val
}

// SetVoiceQuery sets the value of VoiceQuery.
func (s *SearchRequestParams) SetVoiceQuery(val OptSearchRequestParamsVoiceQuery) {
	s.VoiceQuery = val
}

type SearchRequestParamsVoiceQuery struct {
	TranscribedQuery OptString `json:"transcribed_query"`
}

// GetTranscribedQuery returns the value of TranscribedQuery.
func (s *SearchRequestParamsVoiceQuery) GetTranscribedQuery() OptString {
	return s.TranscribedQuery
}

// SetTranscribedQuery sets the value of TranscribedQuery.
func (s *SearchRequestParamsVoiceQuery) SetTranscribedQuery(val OptString) {
	s.TranscribedQuery = val
}

// Ref: #/components/schemas/SearchResult
type SearchResult struct {
	FacetCounts []FacetCounts `json:"facet_counts"`
	// The number of documents found.
	Found     OptInt `json:"found"`
	FoundDocs OptInt `json:"found_docs"`
	// The number of milliseconds the search took.
	SearchTimeMs OptInt `json:"search_time_ms"`
	// The total number of documents in the collection.
	OutOf OptInt `json:"out_of"`
	// Whether the search was cut off.
	SearchCutoff OptBool `json:"search_cutoff"`
	// The search result page number.
	Page        OptInt             `json:"page"`
	GroupedHits []SearchGroupedHit `json:"grouped_hits"`
	// The documents that matched the search query.
	Hits          []SearchResultHit           `json:"hits"`
	RequestParams OptSearchRequestParams      `json:"request_params"`
	Conversation  OptSearchResultConversation `json:"conversation"`
	// Returned only for union query response.
	UnionRequestParams []SearchRequestParams `json:"union_request_params"`
}

// GetFacetCounts returns the value of FacetCounts.
func (s *SearchResult) GetFacetCounts() []FacetCounts {
	return s.FacetCounts
}

// GetFound returns the value of Found.
func (s *SearchResult) GetFound() OptInt {
	return s.Found
}

// GetFoundDocs returns the value of FoundDocs.
func (s *SearchResult) GetFoundDocs() OptInt {
	return s.FoundDocs
}

// GetSearchTimeMs returns the value of SearchTimeMs.
func (s *SearchResult) GetSearchTimeMs() OptInt {
	return s.SearchTimeMs
}

// GetOutOf returns the value of OutOf.
func (s *SearchResult) GetOutOf() OptInt {
	return s.OutOf
}

// GetSearchCutoff returns the value of SearchCutoff.
func (s *SearchResult) GetSearchCutoff() OptBool {
	return s.SearchCutoff
}

// GetPage returns the value of Page.
func (s *SearchResult) GetPage() OptInt {
	return s.Page
}

// GetGroupedHits returns the value of GroupedHits.
func (s *SearchResult) GetGroupedHits() []SearchGroupedHit {
	return s.GroupedHits
}

// GetHits returns the value of Hits.
func (s *SearchResult) GetHits() []SearchResultHit {
	return s.Hits
}

// GetRequestParams returns the value of RequestParams.
func (s *SearchResult) GetRequestParams() OptSearchRequestParams {
	return s.RequestParams
}

// GetConversation returns the value of Conversation.
func (s *SearchResult) GetConversation() OptSearchResultConversation {
	return s.Conversation
}

// GetUnionRequestParams returns the value of UnionRequestParams.
func (s *SearchResult) GetUnionRequestParams() []SearchRequestParams {
	return s.UnionRequestParams
}

// SetFacetCounts sets the value of FacetCounts.
func (s *SearchResult) SetFacetCounts(val []FacetCounts) {
	s.FacetCounts = val
}

// SetFound sets the value of Found.
func (s *SearchResult) SetFound(val OptInt) {
	s.Found = val
}

// SetFoundDocs sets the value of FoundDocs.
func (s *SearchResult) SetFoundDocs(val OptInt) {
	s.FoundDocs = val
}

// SetSearchTimeMs sets the value of SearchTimeMs.
func (s *SearchResult) SetSearchTimeMs(val OptInt) {
	s.SearchTimeMs = val
}

// SetOutOf sets the value of OutOf.
func (s *SearchResult) SetOutOf(val OptInt) {
	s.OutOf = val
}

// SetSearchCutoff sets the value of SearchCutoff.
func (s *SearchResult) SetSearchCutoff(val OptBool) {
	s.SearchCutoff = val
}

// SetPage sets the value of Page.
func (s *SearchResult) SetPage(val OptInt) {
	s.Page = val
}

// SetGroupedHits sets the value of GroupedHits.
func (s *SearchResult) SetGroupedHits(val []SearchGroupedHit) {
	s.GroupedHits = val
}

// SetHits sets the value of Hits.
func (s *SearchResult) SetHits(val []SearchResultHit) {
	s.Hits = val
}

// SetRequestParams sets the value of RequestParams.
func (s *SearchResult) SetRequestParams(val OptSearchRequestParams) {
	s.RequestParams = val
}

// SetConversation sets the value of Conversation.
func (s *SearchResult) SetConversation(val OptSearchResultConversation) {
	s.Conversation = val
}

// SetUnionRequestParams sets the value of UnionRequestParams.
func (s *SearchResult) SetUnionRequestParams(val []SearchRequestParams) {
	s.UnionRequestParams = val
}

func (*SearchResult) searchCollectionRes() {}

// Ref: #/components/schemas/SearchResultConversation
type SearchResultConversation struct {
	Answer              string                                            `json:"answer"`
	ConversationHistory []SearchResultConversationConversationHistoryItem `json:"conversation_history"`
	ConversationID      string                                            `json:"conversation_id"`
	Query               string                                            `json:"query"`
}

// GetAnswer returns the value of Answer.
func (s *SearchResultConversation) GetAnswer() string {
	return s.Answer
}

// GetConversationHistory returns the value of ConversationHistory.
func (s *SearchResultConversation) GetConversationHistory() []SearchResultConversationConversationHistoryItem {
	return s.ConversationHistory
}

// GetConversationID returns the value of ConversationID.
func (s *SearchResultConversation) GetConversationID() string {
	return s.ConversationID
}

// GetQuery returns the value of Query.
func (s *SearchResultConversation) GetQuery() string {
	return s.Query
}

// SetAnswer sets the value of Answer.
func (s *SearchResultConversation) SetAnswer(val string) {
	s.Answer = val
}

// SetConversationHistory sets the value of ConversationHistory.
func (s *SearchResultConversation) SetConversationHistory(val []SearchResultConversationConversationHistoryItem) {
	s.ConversationHistory = val
}

// SetConversationID sets the value of ConversationID.
func (s *SearchResultConversation) SetConversationID(val string) {
	s.ConversationID = val
}

// SetQuery sets the value of Query.
func (s *SearchResultConversation) SetQuery(val string) {
	s.Query = val
}

type SearchResultConversationConversationHistoryItem struct{}

// Ref: #/components/schemas/SearchResultHit
type SearchResultHit struct {
	// (Deprecated) Contains highlighted portions of the search fields.
	Highlights []SearchHighlight `json:"highlights"`
	// Highlighted version of the matching document.
	Highlight OptSearchResultHitHighlight `json:"highlight"`
	// Can be any key-value pair.
	Document      OptSearchResultHitDocument      `json:"document"`
	TextMatch     OptInt64                        `json:"text_match"`
	TextMatchInfo OptSearchResultHitTextMatchInfo `json:"text_match_info"`
	// Can be any key-value pair.
	GeoDistanceMeters OptSearchResultHitGeoDistanceMeters `json:"geo_distance_meters"`
	// Distance between the query vector and matching document's vector value.
	VectorDistance OptFloat32 `json:"vector_distance"`
	// Information about hybrid search scoring.
	HybridSearchInfo OptSearchResultHitHybridSearchInfo `json:"hybrid_search_info"`
	// Returned only for union query response. Indicates the index of the query which this document
	// matched to.
	SearchIndex OptInt `json:"search_index"`
}

// GetHighlights returns the value of Highlights.
func (s *SearchResultHit) GetHighlights() []SearchHighlight {
	return s.Highlights
}

// GetHighlight returns the value of Highlight.
func (s *SearchResultHit) GetHighlight() OptSearchResultHitHighlight {
	return s.Highlight
}

// GetDocument returns the value of Document.
func (s *SearchResultHit) GetDocument() OptSearchResultHitDocument {
	return s.Document
}

// GetTextMatch returns the value of TextMatch.
func (s *SearchResultHit) GetTextMatch() OptInt64 {
	return s.TextMatch
}

// GetTextMatchInfo returns the value of TextMatchInfo.
func (s *SearchResultHit) GetTextMatchInfo() OptSearchResultHitTextMatchInfo {
	return s.TextMatchInfo
}

// GetGeoDistanceMeters returns the value of GeoDistanceMeters.
func (s *SearchResultHit) GetGeoDistanceMeters() OptSearchResultHitGeoDistanceMeters {
	return s.GeoDistanceMeters
}

// GetVectorDistance returns the value of VectorDistance.
func (s *SearchResultHit) GetVectorDistance() OptFloat32 {
	return s.VectorDistance
}

// GetHybridSearchInfo returns the value of HybridSearchInfo.
func (s *SearchResultHit) GetHybridSearchInfo() OptSearchResultHitHybridSearchInfo {
	return s.HybridSearchInfo
}

// GetSearchIndex returns the value of SearchIndex.
func (s *SearchResultHit) GetSearchIndex() OptInt {
	return s.SearchIndex
}

// SetHighlights sets the value of Highlights.
func (s *SearchResultHit) SetHighlights(val []SearchHighlight) {
	s.Highlights = val
}

// SetHighlight sets the value of Highlight.
func (s *SearchResultHit) SetHighlight(val OptSearchResultHitHighlight) {
	s.Highlight = val
}

// SetDocument sets the value of Document.
func (s *SearchResultHit) SetDocument(val OptSearchResultHitDocument) {
	s.Document = val
}

// SetTextMatch sets the value of TextMatch.
func (s *SearchResultHit) SetTextMatch(val OptInt64) {
	s.TextMatch = val
}

// SetTextMatchInfo sets the value of TextMatchInfo.
func (s *SearchResultHit) SetTextMatchInfo(val OptSearchResultHitTextMatchInfo) {
	s.TextMatchInfo = val
}

// SetGeoDistanceMeters sets the value of GeoDistanceMeters.
func (s *SearchResultHit) SetGeoDistanceMeters(val OptSearchResultHitGeoDistanceMeters) {
	s.GeoDistanceMeters = val
}

// SetVectorDistance sets the value of VectorDistance.
func (s *SearchResultHit) SetVectorDistance(val OptFloat32) {
	s.VectorDistance = val
}

// SetHybridSearchInfo sets the value of HybridSearchInfo.
func (s *SearchResultHit) SetHybridSearchInfo(val OptSearchResultHitHybridSearchInfo) {
	s.HybridSearchInfo = val
}

// SetSearchIndex sets the value of SearchIndex.
func (s *SearchResultHit) SetSearchIndex(val OptInt) {
	s.SearchIndex = val
}

// Can be any key-value pair.
type SearchResultHitDocument map[string]SearchResultHitDocumentItem

func (s *SearchResultHitDocument) init() SearchResultHitDocument {
	m := *s
	if m == nil {
		m = map[string]SearchResultHitDocumentItem{}
		*s = m
	}
	return m
}

type SearchResultHitDocumentItem struct{}

// Can be any key-value pair.
type SearchResultHitGeoDistanceMeters map[string]int

func (s *SearchResultHitGeoDistanceMeters) init() SearchResultHitGeoDistanceMeters {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Highlighted version of the matching document.
type SearchResultHitHighlight map[string]jx.Raw

func (s *SearchResultHitHighlight) init() SearchResultHitHighlight {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Information about hybrid search scoring.
type SearchResultHitHybridSearchInfo struct {
	// Combined score from rank fusion of text and vector search.
	RankFusionScore OptFloat32 `json:"rank_fusion_score"`
}

// GetRankFusionScore returns the value of RankFusionScore.
func (s *SearchResultHitHybridSearchInfo) GetRankFusionScore() OptFloat32 {
	return s.RankFusionScore
}

// SetRankFusionScore sets the value of RankFusionScore.
func (s *SearchResultHitHybridSearchInfo) SetRankFusionScore(val OptFloat32) {
	s.RankFusionScore = val
}

type SearchResultHitTextMatchInfo struct {
	BestFieldScore   OptString `json:"best_field_score"`
	BestFieldWeight  OptInt    `json:"best_field_weight"`
	FieldsMatched    OptInt    `json:"fields_matched"`
	NumTokensDropped OptInt64  `json:"num_tokens_dropped"`
	Score            OptString `json:"score"`
	TokensMatched    OptInt    `json:"tokens_matched"`
	TypoPrefixScore  OptInt    `json:"typo_prefix_score"`
}

// GetBestFieldScore returns the value of BestFieldScore.
func (s *SearchResultHitTextMatchInfo) GetBestFieldScore() OptString {
	return s.BestFieldScore
}

// GetBestFieldWeight returns the value of BestFieldWeight.
func (s *SearchResultHitTextMatchInfo) GetBestFieldWeight() OptInt {
	return s.BestFieldWeight
}

// GetFieldsMatched returns the value of FieldsMatched.
func (s *SearchResultHitTextMatchInfo) GetFieldsMatched() OptInt {
	return s.FieldsMatched
}

// GetNumTokensDropped returns the value of NumTokensDropped.
func (s *SearchResultHitTextMatchInfo) GetNumTokensDropped() OptInt64 {
	return s.NumTokensDropped
}

// GetScore returns the value of Score.
func (s *SearchResultHitTextMatchInfo) GetScore() OptString {
	return s.Score
}

// GetTokensMatched returns the value of TokensMatched.
func (s *SearchResultHitTextMatchInfo) GetTokensMatched() OptInt {
	return s.TokensMatched
}

// GetTypoPrefixScore returns the value of TypoPrefixScore.
func (s *SearchResultHitTextMatchInfo) GetTypoPrefixScore() OptInt {
	return s.TypoPrefixScore
}

// SetBestFieldScore sets the value of BestFieldScore.
func (s *SearchResultHitTextMatchInfo) SetBestFieldScore(val OptString) {
	s.BestFieldScore = val
}

// SetBestFieldWeight sets the value of BestFieldWeight.
func (s *SearchResultHitTextMatchInfo) SetBestFieldWeight(val OptInt) {
	s.BestFieldWeight = val
}

// SetFieldsMatched sets the value of FieldsMatched.
func (s *SearchResultHitTextMatchInfo) SetFieldsMatched(val OptInt) {
	s.FieldsMatched = val
}

// SetNumTokensDropped sets the value of NumTokensDropped.
func (s *SearchResultHitTextMatchInfo) SetNumTokensDropped(val OptInt64) {
	s.NumTokensDropped = val
}

// SetScore sets the value of Score.
func (s *SearchResultHitTextMatchInfo) SetScore(val OptString) {
	s.Score = val
}

// SetTokensMatched sets the value of TokensMatched.
func (s *SearchResultHitTextMatchInfo) SetTokensMatched(val OptInt) {
	s.TokensMatched = val
}

// SetTypoPrefixScore sets the value of TypoPrefixScore.
func (s *SearchResultHitTextMatchInfo) SetTypoPrefixScore(val OptInt) {
	s.TypoPrefixScore = val
}

// Merged schema.
// Ref: #/components/schemas/SearchSynonym
type SearchSynonym struct {
	// For 1-way synonyms, indicates the root word that words in the `synonyms` parameter map to.
	Root OptString `json:"root"`
	// Array of words that should be considered as synonyms.
	Synonyms []string `json:"synonyms"`
	// Locale for the synonym, leave blank to use the standard tokenizer.
	Locale OptString `json:"locale"`
	// By default, special characters are dropped from synonyms. Use this attribute to specify which
	// special characters should be indexed as is.
	SymbolsToIndex []string `json:"symbols_to_index"`
	ID             string   `json:"id"`
}

// GetRoot returns the value of Root.
func (s *SearchSynonym) GetRoot() OptString {
	return s.Root
}

// GetSynonyms returns the value of Synonyms.
func (s *SearchSynonym) GetSynonyms() []string {
	return s.Synonyms
}

// GetLocale returns the value of Locale.
func (s *SearchSynonym) GetLocale() OptString {
	return s.Locale
}

// GetSymbolsToIndex returns the value of SymbolsToIndex.
func (s *SearchSynonym) GetSymbolsToIndex() []string {
	return s.SymbolsToIndex
}

// GetID returns the value of ID.
func (s *SearchSynonym) GetID() string {
	return s.ID
}

// SetRoot sets the value of Root.
func (s *SearchSynonym) SetRoot(val OptString) {
	s.Root = val
}

// SetSynonyms sets the value of Synonyms.
func (s *SearchSynonym) SetSynonyms(val []string) {
	s.Synonyms = val
}

// SetLocale sets the value of Locale.
func (s *SearchSynonym) SetLocale(val OptString) {
	s.Locale = val
}

// SetSymbolsToIndex sets the value of SymbolsToIndex.
func (s *SearchSynonym) SetSymbolsToIndex(val []string) {
	s.SymbolsToIndex = val
}

// SetID sets the value of ID.
func (s *SearchSynonym) SetID(val string) {
	s.ID = val
}

func (*SearchSynonym) getSearchSynonymRes()    {}
func (*SearchSynonym) upsertSearchSynonymRes() {}

// Ref: #/components/schemas/SearchSynonymDeleteResponse
type SearchSynonymDeleteResponse struct {
	// The id of the synonym that was deleted.
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *SearchSynonymDeleteResponse) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *SearchSynonymDeleteResponse) SetID(val string) {
	s.ID = val
}

func (*SearchSynonymDeleteResponse) deleteSearchSynonymRes() {}

// Ref: #/components/schemas/SearchSynonymSchema
type SearchSynonymSchema struct {
	// For 1-way synonyms, indicates the root word that words in the `synonyms` parameter map to.
	Root OptString `json:"root"`
	// Array of words that should be considered as synonyms.
	Synonyms []string `json:"synonyms"`
	// Locale for the synonym, leave blank to use the standard tokenizer.
	Locale OptString `json:"locale"`
	// By default, special characters are dropped from synonyms. Use this attribute to specify which
	// special characters should be indexed as is.
	SymbolsToIndex []string `json:"symbols_to_index"`
}

// GetRoot returns the value of Root.
func (s *SearchSynonymSchema) GetRoot() OptString {
	return s.Root
}

// GetSynonyms returns the value of Synonyms.
func (s *SearchSynonymSchema) GetSynonyms() []string {
	return s.Synonyms
}

// GetLocale returns the value of Locale.
func (s *SearchSynonymSchema) GetLocale() OptString {
	return s.Locale
}

// GetSymbolsToIndex returns the value of SymbolsToIndex.
func (s *SearchSynonymSchema) GetSymbolsToIndex() []string {
	return s.SymbolsToIndex
}

// SetRoot sets the value of Root.
func (s *SearchSynonymSchema) SetRoot(val OptString) {
	s.Root = val
}

// SetSynonyms sets the value of Synonyms.
func (s *SearchSynonymSchema) SetSynonyms(val []string) {
	s.Synonyms = val
}

// SetLocale sets the value of Locale.
func (s *SearchSynonymSchema) SetLocale(val OptString) {
	s.Locale = val
}

// SetSymbolsToIndex sets the value of SymbolsToIndex.
func (s *SearchSynonymSchema) SetSymbolsToIndex(val []string) {
	s.SymbolsToIndex = val
}

// Ref: #/components/schemas/SearchSynonymsResponse
type SearchSynonymsResponse struct {
	Synonyms []SearchSynonym `json:"synonyms"`
}

// GetSynonyms returns the value of Synonyms.
func (s *SearchSynonymsResponse) GetSynonyms() []SearchSynonym {
	return s.Synonyms
}

// SetSynonyms sets the value of Synonyms.
func (s *SearchSynonymsResponse) SetSynonyms(val []SearchSynonym) {
	s.Synonyms = val
}

func (*SearchSynonymsResponse) getSearchSynonymsRes() {}

// Ref: #/components/schemas/StemmingDictionary
type StemmingDictionary struct {
	// Unique identifier for the dictionary.
	ID string `json:"id"`
	// List of word mappings in the dictionary.
	Words []StemmingDictionaryWordsItem `json:"words"`
}

// GetID returns the value of ID.
func (s *StemmingDictionary) GetID() string {
	return s.ID
}

// GetWords returns the value of Words.
func (s *StemmingDictionary) GetWords() []StemmingDictionaryWordsItem {
	return s.Words
}

// SetID sets the value of ID.
func (s *StemmingDictionary) SetID(val string) {
	s.ID = val
}

// SetWords sets the value of Words.
func (s *StemmingDictionary) SetWords(val []StemmingDictionaryWordsItem) {
	s.Words = val
}

func (*StemmingDictionary) getStemmingDictionaryRes() {}

type StemmingDictionaryWordsItem struct {
	// The word form to be stemmed.
	Word string `json:"word"`
	// The root form of the word.
	Root string `json:"root"`
}

// GetWord returns the value of Word.
func (s *StemmingDictionaryWordsItem) GetWord() string {
	return s.Word
}

// GetRoot returns the value of Root.
func (s *StemmingDictionaryWordsItem) GetRoot() string {
	return s.Root
}

// SetWord sets the value of Word.
func (s *StemmingDictionaryWordsItem) SetWord(val string) {
	s.Word = val
}

// SetRoot sets the value of Root.
func (s *StemmingDictionaryWordsItem) SetRoot(val string) {
	s.Root = val
}

// Ref: #/components/schemas/StopwordsSetRetrieveSchema
type StopwordsSetRetrieveSchema struct {
	Stopwords StopwordsSetSchema `json:"stopwords"`
}

// GetStopwords returns the value of Stopwords.
func (s *StopwordsSetRetrieveSchema) GetStopwords() StopwordsSetSchema {
	return s.Stopwords
}

// SetStopwords sets the value of Stopwords.
func (s *StopwordsSetRetrieveSchema) SetStopwords(val StopwordsSetSchema) {
	s.Stopwords = val
}

func (*StopwordsSetRetrieveSchema) retrieveStopwordsSetRes() {}

// Ref: #/components/schemas/StopwordsSetSchema
type StopwordsSetSchema struct {
	ID        string    `json:"id"`
	Stopwords []string  `json:"stopwords"`
	Locale    OptString `json:"locale"`
}

// GetID returns the value of ID.
func (s *StopwordsSetSchema) GetID() string {
	return s.ID
}

// GetStopwords returns the value of Stopwords.
func (s *StopwordsSetSchema) GetStopwords() []string {
	return s.Stopwords
}

// GetLocale returns the value of Locale.
func (s *StopwordsSetSchema) GetLocale() OptString {
	return s.Locale
}

// SetID sets the value of ID.
func (s *StopwordsSetSchema) SetID(val string) {
	s.ID = val
}

// SetStopwords sets the value of Stopwords.
func (s *StopwordsSetSchema) SetStopwords(val []string) {
	s.Stopwords = val
}

// SetLocale sets the value of Locale.
func (s *StopwordsSetSchema) SetLocale(val OptString) {
	s.Locale = val
}

func (*StopwordsSetSchema) upsertStopwordsSetRes() {}

// Ref: #/components/schemas/StopwordsSetUpsertSchema
type StopwordsSetUpsertSchema struct {
	Stopwords []string  `json:"stopwords"`
	Locale    OptString `json:"locale"`
}

// GetStopwords returns the value of Stopwords.
func (s *StopwordsSetUpsertSchema) GetStopwords() []string {
	return s.Stopwords
}

// GetLocale returns the value of Locale.
func (s *StopwordsSetUpsertSchema) GetLocale() OptString {
	return s.Locale
}

// SetStopwords sets the value of Stopwords.
func (s *StopwordsSetUpsertSchema) SetStopwords(val []string) {
	s.Stopwords = val
}

// SetLocale sets the value of Locale.
func (s *StopwordsSetUpsertSchema) SetLocale(val OptString) {
	s.Locale = val
}

// Ref: #/components/schemas/StopwordsSetsRetrieveAllSchema
type StopwordsSetsRetrieveAllSchema struct {
	Stopwords []StopwordsSetSchema `json:"stopwords"`
}

// GetStopwords returns the value of Stopwords.
func (s *StopwordsSetsRetrieveAllSchema) GetStopwords() []StopwordsSetSchema {
	return s.Stopwords
}

// SetStopwords sets the value of Stopwords.
func (s *StopwordsSetsRetrieveAllSchema) SetStopwords(val []StopwordsSetSchema) {
	s.Stopwords = val
}

// Ref: #/components/schemas/SuccessStatus
type SuccessStatus struct {
	Success bool `json:"success"`
}

// GetSuccess returns the value of Success.
func (s *SuccessStatus) GetSuccess() bool {
	return s.Success
}

// SetSuccess sets the value of Success.
func (s *SuccessStatus) SetSuccess(val bool) {
	s.Success = val
}

type UpdateCollectionBadRequest ApiResponse

func (*UpdateCollectionBadRequest) updateCollectionRes() {}

type UpdateCollectionNotFound ApiResponse

func (*UpdateCollectionNotFound) updateCollectionRes() {}

// Can be any key-value pair.
type UpdateDocumentOK struct{}

func (*UpdateDocumentOK) updateDocumentRes() {}

// Can be any key-value pair.
type UpdateDocumentReq struct{}

type UpdateDocumentsBadRequest ApiResponse

func (*UpdateDocumentsBadRequest) updateDocumentsRes() {}

type UpdateDocumentsNotFound ApiResponse

func (*UpdateDocumentsNotFound) updateDocumentsRes() {}

type UpdateDocumentsOK struct {
	// The number of documents that have been updated.
	NumUpdated int `json:"num_updated"`
}

// GetNumUpdated returns the value of NumUpdated.
func (s *UpdateDocumentsOK) GetNumUpdated() int {
	return s.NumUpdated
}

// SetNumUpdated sets the value of NumUpdated.
func (s *UpdateDocumentsOK) SetNumUpdated(val int) {
	s.NumUpdated = val
}

func (*UpdateDocumentsOK) updateDocumentsRes() {}

// Can be any key-value pair.
type UpdateDocumentsReq struct{}

type UpdateDocumentsUpdateDocumentsParameters struct {
	FilterBy OptString `json:"filter_by"`
}

// GetFilterBy returns the value of FilterBy.
func (s *UpdateDocumentsUpdateDocumentsParameters) GetFilterBy() OptString {
	return s.FilterBy
}

// SetFilterBy sets the value of FilterBy.
func (s *UpdateDocumentsUpdateDocumentsParameters) SetFilterBy(val OptString) {
	s.FilterBy = val
}

type UpdateNLSearchModelBadRequest ApiResponse

func (*UpdateNLSearchModelBadRequest) updateNLSearchModelRes() {}

type UpdateNLSearchModelNotFound ApiResponse

func (*UpdateNLSearchModelNotFound) updateNLSearchModelRes() {}

type UpsertAliasBadRequest ApiResponse

func (*UpsertAliasBadRequest) upsertAliasRes() {}

type UpsertAliasNotFound ApiResponse

func (*UpsertAliasNotFound) upsertAliasRes() {}

// Configuration for the voice query model.
// Ref: #/components/schemas/VoiceQueryModelCollectionConfig
type VoiceQueryModelCollectionConfig struct {
	ModelName OptString `json:"model_name"`
}

// GetModelName returns the value of ModelName.
func (s *VoiceQueryModelCollectionConfig) GetModelName() OptString {
	return s.ModelName
}

// SetModelName sets the value of ModelName.
func (s *VoiceQueryModelCollectionConfig) SetModelName(val OptString) {
	s.ModelName = val
}
