// Code generated by ogen, DO NOT EDIT.

package typesense

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "liases"

					if l := len("liases"); len(elem) >= l && elem[0:l] == "liases" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAliasesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "aliasName"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteAliasRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetAliasRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpsertAliasRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				case 'n': // Prefix: "nalytics/"

					if l := len("nalytics/"); len(elem) >= l && elem[0:l] == "nalytics/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "events"

						if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleCreateAnalyticsEventRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'r': // Prefix: "rules"

						if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleRetrieveAnalyticsRulesRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateAnalyticsRuleRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "ruleName"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteAnalyticsRuleRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleRetrieveAnalyticsRuleRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpsertAnalyticsRuleRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

						}

					}

				}

			case 'c': // Prefix: "co"

				if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "llections"

					if l := len("llections"); len(elem) >= l && elem[0:l] == "llections" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetCollectionsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateCollectionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "collectionName"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteCollectionRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetCollectionRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateCollectionRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "documents"

								if l := len("documents"); len(elem) >= l && elem[0:l] == "documents" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleDeleteDocumentsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PATCH":
										s.handleUpdateDocumentsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleIndexDocumentRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,PATCH,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "export"
										origElem := elem
										if l := len("export"); len(elem) >= l && elem[0:l] == "export" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleExportDocumentsRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									case 'i': // Prefix: "import"
										origElem := elem
										if l := len("import"); len(elem) >= l && elem[0:l] == "import" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleImportDocumentsRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									case 's': // Prefix: "search"
										origElem := elem
										if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleSearchCollectionRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}
									// Param: "documentId"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteDocumentRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetDocumentRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PATCH":
											s.handleUpdateDocumentRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PATCH")
										}

										return
									}

								}

							case 'o': // Prefix: "overrides"

								if l := len("overrides"); len(elem) >= l && elem[0:l] == "overrides" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetSearchOverridesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "overrideId"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteSearchOverrideRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetSearchOverrideRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleUpsertSearchOverrideRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PUT")
										}

										return
									}

								}

							case 's': // Prefix: "synonyms"

								if l := len("synonyms"); len(elem) >= l && elem[0:l] == "synonyms" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetSearchSynonymsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "synonymId"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteSearchSynonymRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetSearchSynonymRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleUpsertSearchSynonymRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PUT")
										}

										return
									}

								}

							}

						}

					}

				case 'n': // Prefix: "nversations/models"

					if l := len("nversations/models"); len(elem) >= l && elem[0:l] == "nversations/models" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleRetrieveAllConversationModelsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateConversationModelRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "modelId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteConversationModelRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleRetrieveConversationModelRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateConversationModelRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				}

			case 'd': // Prefix: "debug"

				if l := len("debug"); len(elem) >= l && elem[0:l] == "debug" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleDebugRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'h': // Prefix: "health"

				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleHealthRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'k': // Prefix: "keys"

				if l := len("keys"); len(elem) >= l && elem[0:l] == "keys" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetKeysRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateKeyRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "keyId"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteKeyRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetKeyRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET")
						}

						return
					}

				}

			case 'm': // Prefix: "m"

				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "etrics.json"

					if l := len("etrics.json"); len(elem) >= l && elem[0:l] == "etrics.json" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleRetrieveMetricsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'u': // Prefix: "ulti_search"

					if l := len("ulti_search"); len(elem) >= l && elem[0:l] == "ulti_search" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleMultiSearchRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'n': // Prefix: "nl_search_models"

				if l := len("nl_search_models"); len(elem) >= l && elem[0:l] == "nl_search_models" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleRetrieveAllNLSearchModelsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateNLSearchModelRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "modelId"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteNLSearchModelRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleRetrieveNLSearchModelRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateNLSearchModelRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

				}

			case 'o': // Prefix: "operations/"

				if l := len("operations/"); len(elem) >= l && elem[0:l] == "operations/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "chema_changes"

						if l := len("chema_changes"); len(elem) >= l && elem[0:l] == "chema_changes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetSchemaChangesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'n': // Prefix: "napshot"

						if l := len("napshot"); len(elem) >= l && elem[0:l] == "napshot" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTakeSnapshotRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 'v': // Prefix: "vote"

					if l := len("vote"); len(elem) >= l && elem[0:l] == "vote" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleVoteRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'p': // Prefix: "presets"

				if l := len("presets"); len(elem) >= l && elem[0:l] == "presets" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleRetrieveAllPresetsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "presetId"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeletePresetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleRetrievePresetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpsertPresetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

				}

			case 's': // Prefix: "st"

				if l := len("st"); len(elem) >= l && elem[0:l] == "st" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ats.json"

					if l := len("ats.json"); len(elem) >= l && elem[0:l] == "ats.json" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleRetrieveAPIStatsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'e': // Prefix: "emming/dictionaries"

					if l := len("emming/dictionaries"); len(elem) >= l && elem[0:l] == "emming/dictionaries" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListStemmingDictionariesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "import"
							origElem := elem
							if l := len("import"); len(elem) >= l && elem[0:l] == "import" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleImportStemmingDictionaryRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}
						// Param: "dictionaryId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetStemmingDictionaryRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				case 'o': // Prefix: "opwords"

					if l := len("opwords"); len(elem) >= l && elem[0:l] == "opwords" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleRetrieveStopwordsSetsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "setId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteStopwordsSetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleRetrieveStopwordsSetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpsertStopwordsSetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "liases"

					if l := len("liases"); len(elem) >= l && elem[0:l] == "liases" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetAliasesOperation
							r.summary = "List all aliases"
							r.operationID = "getAliases"
							r.pathPattern = "/aliases"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "aliasName"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeleteAliasOperation
								r.summary = "Delete an alias"
								r.operationID = "deleteAlias"
								r.pathPattern = "/aliases/{aliasName}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = GetAliasOperation
								r.summary = "Retrieve an alias"
								r.operationID = "getAlias"
								r.pathPattern = "/aliases/{aliasName}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = UpsertAliasOperation
								r.summary = "Create or update a collection alias"
								r.operationID = "upsertAlias"
								r.pathPattern = "/aliases/{aliasName}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'n': // Prefix: "nalytics/"

					if l := len("nalytics/"); len(elem) >= l && elem[0:l] == "nalytics/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "events"

						if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = CreateAnalyticsEventOperation
								r.summary = "Create an analytics event"
								r.operationID = "createAnalyticsEvent"
								r.pathPattern = "/analytics/events"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'r': // Prefix: "rules"

						if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = RetrieveAnalyticsRulesOperation
								r.summary = "Retrieves all analytics rules"
								r.operationID = "retrieveAnalyticsRules"
								r.pathPattern = "/analytics/rules"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = CreateAnalyticsRuleOperation
								r.summary = "Creates an analytics rule"
								r.operationID = "createAnalyticsRule"
								r.pathPattern = "/analytics/rules"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "ruleName"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteAnalyticsRuleOperation
									r.summary = "Delete an analytics rule"
									r.operationID = "deleteAnalyticsRule"
									r.pathPattern = "/analytics/rules/{ruleName}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = RetrieveAnalyticsRuleOperation
									r.summary = "Retrieves an analytics rule"
									r.operationID = "retrieveAnalyticsRule"
									r.pathPattern = "/analytics/rules/{ruleName}"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = UpsertAnalyticsRuleOperation
									r.summary = "Upserts an analytics rule"
									r.operationID = "upsertAnalyticsRule"
									r.pathPattern = "/analytics/rules/{ruleName}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'c': // Prefix: "co"

				if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "llections"

					if l := len("llections"); len(elem) >= l && elem[0:l] == "llections" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetCollectionsOperation
							r.summary = "List all collections"
							r.operationID = "getCollections"
							r.pathPattern = "/collections"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = CreateCollectionOperation
							r.summary = "Create a new collection"
							r.operationID = "createCollection"
							r.pathPattern = "/collections"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "collectionName"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = DeleteCollectionOperation
								r.summary = "Delete a collection"
								r.operationID = "deleteCollection"
								r.pathPattern = "/collections/{collectionName}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = GetCollectionOperation
								r.summary = "Retrieve a single collection"
								r.operationID = "getCollection"
								r.pathPattern = "/collections/{collectionName}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = UpdateCollectionOperation
								r.summary = "Update a collection"
								r.operationID = "updateCollection"
								r.pathPattern = "/collections/{collectionName}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "documents"

								if l := len("documents"); len(elem) >= l && elem[0:l] == "documents" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = DeleteDocumentsOperation
										r.summary = "Delete a bunch of documents"
										r.operationID = "deleteDocuments"
										r.pathPattern = "/collections/{collectionName}/documents"
										r.args = args
										r.count = 1
										return r, true
									case "PATCH":
										r.name = UpdateDocumentsOperation
										r.summary = "Update documents with conditional query"
										r.operationID = "updateDocuments"
										r.pathPattern = "/collections/{collectionName}/documents"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = IndexDocumentOperation
										r.summary = "Index a document"
										r.operationID = "indexDocument"
										r.pathPattern = "/collections/{collectionName}/documents"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "export"
										origElem := elem
										if l := len("export"); len(elem) >= l && elem[0:l] == "export" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = ExportDocumentsOperation
												r.summary = "Export all documents in a collection"
												r.operationID = "exportDocuments"
												r.pathPattern = "/collections/{collectionName}/documents/export"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'i': // Prefix: "import"
										origElem := elem
										if l := len("import"); len(elem) >= l && elem[0:l] == "import" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = ImportDocumentsOperation
												r.summary = "Import documents into a collection"
												r.operationID = "importDocuments"
												r.pathPattern = "/collections/{collectionName}/documents/import"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 's': // Prefix: "search"
										origElem := elem
										if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = SearchCollectionOperation
												r.summary = "Search for documents in a collection"
												r.operationID = "searchCollection"
												r.pathPattern = "/collections/{collectionName}/documents/search"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}
									// Param: "documentId"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = DeleteDocumentOperation
											r.summary = "Delete a document"
											r.operationID = "deleteDocument"
											r.pathPattern = "/collections/{collectionName}/documents/{documentId}"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = GetDocumentOperation
											r.summary = "Retreive a document"
											r.operationID = "getDocument"
											r.pathPattern = "/collections/{collectionName}/documents/{documentId}"
											r.args = args
											r.count = 2
											return r, true
										case "PATCH":
											r.name = UpdateDocumentOperation
											r.summary = "Update a document"
											r.operationID = "updateDocument"
											r.pathPattern = "/collections/{collectionName}/documents/{documentId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

								}

							case 'o': // Prefix: "overrides"

								if l := len("overrides"); len(elem) >= l && elem[0:l] == "overrides" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GetSearchOverridesOperation
										r.summary = "List all collection overrides"
										r.operationID = "getSearchOverrides"
										r.pathPattern = "/collections/{collectionName}/overrides"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "overrideId"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = DeleteSearchOverrideOperation
											r.summary = "Delete an override associated with a collection"
											r.operationID = "deleteSearchOverride"
											r.pathPattern = "/collections/{collectionName}/overrides/{overrideId}"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = GetSearchOverrideOperation
											r.summary = "Retrieve a single search override"
											r.operationID = "getSearchOverride"
											r.pathPattern = "/collections/{collectionName}/overrides/{overrideId}"
											r.args = args
											r.count = 2
											return r, true
										case "PUT":
											r.name = UpsertSearchOverrideOperation
											r.summary = "Create or update an override to promote certain documents over others"
											r.operationID = "upsertSearchOverride"
											r.pathPattern = "/collections/{collectionName}/overrides/{overrideId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

								}

							case 's': // Prefix: "synonyms"

								if l := len("synonyms"); len(elem) >= l && elem[0:l] == "synonyms" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GetSearchSynonymsOperation
										r.summary = "List all collection synonyms"
										r.operationID = "getSearchSynonyms"
										r.pathPattern = "/collections/{collectionName}/synonyms"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "synonymId"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = DeleteSearchSynonymOperation
											r.summary = "Delete a synonym associated with a collection"
											r.operationID = "deleteSearchSynonym"
											r.pathPattern = "/collections/{collectionName}/synonyms/{synonymId}"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = GetSearchSynonymOperation
											r.summary = "Retrieve a single search synonym"
											r.operationID = "getSearchSynonym"
											r.pathPattern = "/collections/{collectionName}/synonyms/{synonymId}"
											r.args = args
											r.count = 2
											return r, true
										case "PUT":
											r.name = UpsertSearchSynonymOperation
											r.summary = "Create or update a synonym"
											r.operationID = "upsertSearchSynonym"
											r.pathPattern = "/collections/{collectionName}/synonyms/{synonymId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					}

				case 'n': // Prefix: "nversations/models"

					if l := len("nversations/models"); len(elem) >= l && elem[0:l] == "nversations/models" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = RetrieveAllConversationModelsOperation
							r.summary = "List all conversation models"
							r.operationID = "retrieveAllConversationModels"
							r.pathPattern = "/conversations/models"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = CreateConversationModelOperation
							r.summary = "Create a conversation model"
							r.operationID = "createConversationModel"
							r.pathPattern = "/conversations/models"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "modelId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeleteConversationModelOperation
								r.summary = "Delete a conversation model"
								r.operationID = "deleteConversationModel"
								r.pathPattern = "/conversations/models/{modelId}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = RetrieveConversationModelOperation
								r.summary = "Retrieve a conversation model"
								r.operationID = "retrieveConversationModel"
								r.pathPattern = "/conversations/models/{modelId}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = UpdateConversationModelOperation
								r.summary = "Update a conversation model"
								r.operationID = "updateConversationModel"
								r.pathPattern = "/conversations/models/{modelId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'd': // Prefix: "debug"

				if l := len("debug"); len(elem) >= l && elem[0:l] == "debug" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = DebugOperation
						r.summary = "Print debugging information"
						r.operationID = "debug"
						r.pathPattern = "/debug"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'h': // Prefix: "health"

				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = HealthOperation
						r.summary = "Checks if Typesense server is ready to accept requests."
						r.operationID = "health"
						r.pathPattern = "/health"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'k': // Prefix: "keys"

				if l := len("keys"); len(elem) >= l && elem[0:l] == "keys" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetKeysOperation
						r.summary = "Retrieve (metadata about) all keys."
						r.operationID = "getKeys"
						r.pathPattern = "/keys"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateKeyOperation
						r.summary = "Create an API Key"
						r.operationID = "createKey"
						r.pathPattern = "/keys"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "keyId"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteKeyOperation
							r.summary = "Delete an API key given its ID."
							r.operationID = "deleteKey"
							r.pathPattern = "/keys/{keyId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetKeyOperation
							r.summary = "Retrieve (metadata about) a key"
							r.operationID = "getKey"
							r.pathPattern = "/keys/{keyId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'm': // Prefix: "m"

				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "etrics.json"

					if l := len("etrics.json"); len(elem) >= l && elem[0:l] == "etrics.json" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = RetrieveMetricsOperation
							r.summary = "Get current RAM, CPU, Disk & Network usage metrics."
							r.operationID = "retrieveMetrics"
							r.pathPattern = "/metrics.json"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'u': // Prefix: "ulti_search"

					if l := len("ulti_search"); len(elem) >= l && elem[0:l] == "ulti_search" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = MultiSearchOperation
							r.summary = "send multiple search requests in a single HTTP request"
							r.operationID = "multiSearch"
							r.pathPattern = "/multi_search"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'n': // Prefix: "nl_search_models"

				if l := len("nl_search_models"); len(elem) >= l && elem[0:l] == "nl_search_models" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = RetrieveAllNLSearchModelsOperation
						r.summary = "List all NL search models"
						r.operationID = "retrieveAllNLSearchModels"
						r.pathPattern = "/nl_search_models"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateNLSearchModelOperation
						r.summary = "Create a NL search model"
						r.operationID = "createNLSearchModel"
						r.pathPattern = "/nl_search_models"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "modelId"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteNLSearchModelOperation
							r.summary = "Delete a NL search model"
							r.operationID = "deleteNLSearchModel"
							r.pathPattern = "/nl_search_models/{modelId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = RetrieveNLSearchModelOperation
							r.summary = "Retrieve a NL search model"
							r.operationID = "retrieveNLSearchModel"
							r.pathPattern = "/nl_search_models/{modelId}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateNLSearchModelOperation
							r.summary = "Update a NL search model"
							r.operationID = "updateNLSearchModel"
							r.pathPattern = "/nl_search_models/{modelId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'o': // Prefix: "operations/"

				if l := len("operations/"); len(elem) >= l && elem[0:l] == "operations/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "chema_changes"

						if l := len("chema_changes"); len(elem) >= l && elem[0:l] == "chema_changes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetSchemaChangesOperation
								r.summary = "Get the status of in-progress schema change operations"
								r.operationID = "getSchemaChanges"
								r.pathPattern = "/operations/schema_changes"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'n': // Prefix: "napshot"

						if l := len("napshot"); len(elem) >= l && elem[0:l] == "napshot" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TakeSnapshotOperation
								r.summary = "Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory."
								r.operationID = "takeSnapshot"
								r.pathPattern = "/operations/snapshot"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 'v': // Prefix: "vote"

					if l := len("vote"); len(elem) >= l && elem[0:l] == "vote" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = VoteOperation
							r.summary = "Triggers a follower node to initiate the raft voting process, which triggers leader re-election."
							r.operationID = "vote"
							r.pathPattern = "/operations/vote"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'p': // Prefix: "presets"

				if l := len("presets"); len(elem) >= l && elem[0:l] == "presets" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = RetrieveAllPresetsOperation
						r.summary = "Retrieves all presets."
						r.operationID = "retrieveAllPresets"
						r.pathPattern = "/presets"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "presetId"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeletePresetOperation
							r.summary = "Delete a preset."
							r.operationID = "deletePreset"
							r.pathPattern = "/presets/{presetId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = RetrievePresetOperation
							r.summary = "Retrieves a preset."
							r.operationID = "retrievePreset"
							r.pathPattern = "/presets/{presetId}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpsertPresetOperation
							r.summary = "Upserts a preset."
							r.operationID = "upsertPreset"
							r.pathPattern = "/presets/{presetId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 's': // Prefix: "st"

				if l := len("st"); len(elem) >= l && elem[0:l] == "st" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ats.json"

					if l := len("ats.json"); len(elem) >= l && elem[0:l] == "ats.json" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = RetrieveAPIStatsOperation
							r.summary = "Get stats about API endpoints."
							r.operationID = "retrieveAPIStats"
							r.pathPattern = "/stats.json"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'e': // Prefix: "emming/dictionaries"

					if l := len("emming/dictionaries"); len(elem) >= l && elem[0:l] == "emming/dictionaries" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = ListStemmingDictionariesOperation
							r.summary = "List all stemming dictionaries"
							r.operationID = "listStemmingDictionaries"
							r.pathPattern = "/stemming/dictionaries"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "import"
							origElem := elem
							if l := len("import"); len(elem) >= l && elem[0:l] == "import" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = ImportStemmingDictionaryOperation
									r.summary = "Import a stemming dictionary"
									r.operationID = "importStemmingDictionary"
									r.pathPattern = "/stemming/dictionaries/import"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "dictionaryId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetStemmingDictionaryOperation
								r.summary = "Retrieve a stemming dictionary"
								r.operationID = "getStemmingDictionary"
								r.pathPattern = "/stemming/dictionaries/{dictionaryId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'o': // Prefix: "opwords"

					if l := len("opwords"); len(elem) >= l && elem[0:l] == "opwords" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = RetrieveStopwordsSetsOperation
							r.summary = "Retrieves all stopwords sets."
							r.operationID = "retrieveStopwordsSets"
							r.pathPattern = "/stopwords"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "setId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeleteStopwordsSetOperation
								r.summary = "Delete a stopwords set."
								r.operationID = "deleteStopwordsSet"
								r.pathPattern = "/stopwords/{setId}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = RetrieveStopwordsSetOperation
								r.summary = "Retrieves a stopwords set."
								r.operationID = "retrieveStopwordsSet"
								r.pathPattern = "/stopwords/{setId}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = UpsertStopwordsSetOperation
								r.summary = "Upserts a stopwords set."
								r.operationID = "upsertStopwordsSet"
								r.pathPattern = "/stopwords/{setId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			}

		}
	}
	return r, false
}
