// Code generated by ogen, DO NOT EDIT.

package typesense

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateKey implements createKey operation.
	//
	// Create an API Key with fine-grain access control. You can restrict access on both a per-collection
	// and per-action level. The generated key is returned only during creation. You want to store this
	// key carefully in a secure place.
	//
	// POST /keys
	CreateKey(ctx context.Context, req OptApiKeySchema) (CreateKeyRes, error)
	// DeleteKey implements deleteKey operation.
	//
	// Delete an API key given its ID.
	//
	// DELETE /keys/{keyId}
	DeleteKey(ctx context.Context, params DeleteKeyParams) (DeleteKeyRes, error)
	// GetKey implements getKey operation.
	//
	// Retrieve (metadata about) a key. Only the key prefix is returned when you retrieve a key. Due to
	// security reasons, only the create endpoint returns the full API key.
	//
	// GET /keys/{keyId}
	GetKey(ctx context.Context, params GetKeyParams) (GetKeyRes, error)
	// GetKeys implements getKeys operation.
	//
	// Retrieve (metadata about) all keys.
	//
	// GET /keys
	GetKeys(ctx context.Context) (*ApiKeysResponse, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
