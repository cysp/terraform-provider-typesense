// Code generated by ogen, DO NOT EDIT.

package typesense

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateAnalyticsEvent implements createAnalyticsEvent operation.
	//
	// Sending events for analytics e.g rank search results based on popularity.
	//
	// POST /analytics/events
	CreateAnalyticsEvent(ctx context.Context, req *AnalyticsEventCreateSchema) (CreateAnalyticsEventRes, error)
	// CreateAnalyticsRule implements createAnalyticsRule operation.
	//
	// When an analytics rule is created, we give it a name and describe the type, the source collections
	// and the destination collection.
	//
	// POST /analytics/rules
	CreateAnalyticsRule(ctx context.Context, req *AnalyticsRuleSchema) (CreateAnalyticsRuleRes, error)
	// CreateCollection implements createCollection operation.
	//
	// When a collection is created, we give it a name and describe the fields that will be indexed from
	// the documents added to the collection.
	//
	// POST /collections
	CreateCollection(ctx context.Context, req *CollectionSchema) (CreateCollectionRes, error)
	// CreateConversationModel implements createConversationModel operation.
	//
	// Create a Conversation Model.
	//
	// POST /conversations/models
	CreateConversationModel(ctx context.Context, req *ConversationModelCreateSchema) (CreateConversationModelRes, error)
	// CreateKey implements createKey operation.
	//
	// Create an API Key with fine-grain access control. You can restrict access on both a per-collection
	// and per-action level. The generated key is returned only during creation. You want to store this
	// key carefully in a secure place.
	//
	// POST /keys
	CreateKey(ctx context.Context, req OptApiKeySchema) (CreateKeyRes, error)
	// CreateNLSearchModel implements createNLSearchModel operation.
	//
	// Create a new NL search model.
	//
	// POST /nl_search_models
	CreateNLSearchModel(ctx context.Context, req *NLSearchModelCreateSchema) (CreateNLSearchModelRes, error)
	// Debug implements debug operation.
	//
	// Print debugging information.
	//
	// GET /debug
	Debug(ctx context.Context) (*DebugOK, error)
	// DeleteAlias implements deleteAlias operation.
	//
	// Delete an alias.
	//
	// DELETE /aliases/{aliasName}
	DeleteAlias(ctx context.Context, params DeleteAliasParams) (DeleteAliasRes, error)
	// DeleteAnalyticsRule implements deleteAnalyticsRule operation.
	//
	// Permanently deletes an analytics rule, given it's name.
	//
	// DELETE /analytics/rules/{ruleName}
	DeleteAnalyticsRule(ctx context.Context, params DeleteAnalyticsRuleParams) (DeleteAnalyticsRuleRes, error)
	// DeleteCollection implements deleteCollection operation.
	//
	// Permanently drops a collection. This action cannot be undone. For large collections, this might
	// have an impact on read latencies.
	//
	// DELETE /collections/{collectionName}
	DeleteCollection(ctx context.Context, params DeleteCollectionParams) (DeleteCollectionRes, error)
	// DeleteConversationModel implements deleteConversationModel operation.
	//
	// Delete a conversation model.
	//
	// DELETE /conversations/models/{modelId}
	DeleteConversationModel(ctx context.Context, params DeleteConversationModelParams) (*ConversationModelSchema, error)
	// DeleteDocument implements deleteDocument operation.
	//
	// Delete an individual document from a collection by using its ID.
	//
	// DELETE /collections/{collectionName}/documents/{documentId}
	DeleteDocument(ctx context.Context, params DeleteDocumentParams) (DeleteDocumentRes, error)
	// DeleteDocuments implements deleteDocuments operation.
	//
	// Delete a bunch of documents that match a specific filter condition. Use the `batch_size` parameter
	// to control the number of documents that should deleted at a time. A larger value will speed up
	// deletions, but will impact performance of other operations running on the server.
	//
	// DELETE /collections/{collectionName}/documents
	DeleteDocuments(ctx context.Context, params DeleteDocumentsParams) (DeleteDocumentsRes, error)
	// DeleteKey implements deleteKey operation.
	//
	// Delete an API key given its ID.
	//
	// DELETE /keys/{keyId}
	DeleteKey(ctx context.Context, params DeleteKeyParams) (DeleteKeyRes, error)
	// DeleteNLSearchModel implements deleteNLSearchModel operation.
	//
	// Delete a specific NL search model by its ID.
	//
	// DELETE /nl_search_models/{modelId}
	DeleteNLSearchModel(ctx context.Context, params DeleteNLSearchModelParams) (DeleteNLSearchModelRes, error)
	// DeletePreset implements deletePreset operation.
	//
	// Permanently deletes a preset, given it's name.
	//
	// DELETE /presets/{presetId}
	DeletePreset(ctx context.Context, params DeletePresetParams) (DeletePresetRes, error)
	// DeleteSearchOverride implements deleteSearchOverride operation.
	//
	// Delete an override associated with a collection.
	//
	// DELETE /collections/{collectionName}/overrides/{overrideId}
	DeleteSearchOverride(ctx context.Context, params DeleteSearchOverrideParams) (DeleteSearchOverrideRes, error)
	// DeleteSearchSynonym implements deleteSearchSynonym operation.
	//
	// Delete a synonym associated with a collection.
	//
	// DELETE /collections/{collectionName}/synonyms/{synonymId}
	DeleteSearchSynonym(ctx context.Context, params DeleteSearchSynonymParams) (DeleteSearchSynonymRes, error)
	// DeleteStopwordsSet implements deleteStopwordsSet operation.
	//
	// Permanently deletes a stopwords set, given it's name.
	//
	// DELETE /stopwords/{setId}
	DeleteStopwordsSet(ctx context.Context, params DeleteStopwordsSetParams) (DeleteStopwordsSetRes, error)
	// ExportDocuments implements exportDocuments operation.
	//
	// Export all documents in a collection in JSON lines format.
	//
	// GET /collections/{collectionName}/documents/export
	ExportDocuments(ctx context.Context, params ExportDocumentsParams) (ExportDocumentsRes, error)
	// GetAlias implements getAlias operation.
	//
	// Find out which collection an alias points to by fetching it.
	//
	// GET /aliases/{aliasName}
	GetAlias(ctx context.Context, params GetAliasParams) (GetAliasRes, error)
	// GetAliases implements getAliases operation.
	//
	// List all aliases and the corresponding collections that they map to.
	//
	// GET /aliases
	GetAliases(ctx context.Context) (*CollectionAliasesResponse, error)
	// GetCollection implements getCollection operation.
	//
	// Retrieve the details of a collection, given its name.
	//
	// GET /collections/{collectionName}
	GetCollection(ctx context.Context, params GetCollectionParams) (GetCollectionRes, error)
	// GetCollections implements getCollections operation.
	//
	// Returns a summary of all your collections. The collections are returned sorted by creation date,
	// with the most recent collections appearing first.
	//
	// GET /collections
	GetCollections(ctx context.Context, params GetCollectionsParams) ([]CollectionResponse, error)
	// GetDocument implements getDocument operation.
	//
	// Fetch an individual document from a collection by using its ID.
	//
	// GET /collections/{collectionName}/documents/{documentId}
	GetDocument(ctx context.Context, params GetDocumentParams) (GetDocumentRes, error)
	// GetKey implements getKey operation.
	//
	// Retrieve (metadata about) a key. Only the key prefix is returned when you retrieve a key. Due to
	// security reasons, only the create endpoint returns the full API key.
	//
	// GET /keys/{keyId}
	GetKey(ctx context.Context, params GetKeyParams) (GetKeyRes, error)
	// GetKeys implements getKeys operation.
	//
	// Retrieve (metadata about) all keys.
	//
	// GET /keys
	GetKeys(ctx context.Context) (*ApiKeysResponse, error)
	// GetSchemaChanges implements getSchemaChanges operation.
	//
	// Returns the status of any ongoing schema change operations. If no schema changes are in progress,
	// returns an empty response.
	//
	// GET /operations/schema_changes
	GetSchemaChanges(ctx context.Context) ([]SchemaChangeStatus, error)
	// GetSearchOverride implements getSearchOverride operation.
	//
	// Retrieve the details of a search override, given its id.
	//
	// GET /collections/{collectionName}/overrides/{overrideId}
	GetSearchOverride(ctx context.Context, params GetSearchOverrideParams) (*SearchOverride, error)
	// GetSearchOverrides implements getSearchOverrides operation.
	//
	// List all collection overrides.
	//
	// GET /collections/{collectionName}/overrides
	GetSearchOverrides(ctx context.Context, params GetSearchOverridesParams) (*SearchOverridesResponse, error)
	// GetSearchSynonym implements getSearchSynonym operation.
	//
	// Retrieve the details of a search synonym, given its id.
	//
	// GET /collections/{collectionName}/synonyms/{synonymId}
	GetSearchSynonym(ctx context.Context, params GetSearchSynonymParams) (GetSearchSynonymRes, error)
	// GetSearchSynonyms implements getSearchSynonyms operation.
	//
	// List all collection synonyms.
	//
	// GET /collections/{collectionName}/synonyms
	GetSearchSynonyms(ctx context.Context, params GetSearchSynonymsParams) (GetSearchSynonymsRes, error)
	// GetStemmingDictionary implements getStemmingDictionary operation.
	//
	// Fetch details of a specific stemming dictionary.
	//
	// GET /stemming/dictionaries/{dictionaryId}
	GetStemmingDictionary(ctx context.Context, params GetStemmingDictionaryParams) (GetStemmingDictionaryRes, error)
	// Health implements health operation.
	//
	// Checks if Typesense server is ready to accept requests.
	//
	// GET /health
	Health(ctx context.Context) (*HealthStatus, error)
	// ImportDocuments implements importDocuments operation.
	//
	// The documents to be imported must be formatted in a newline delimited JSON structure. You can feed
	// the output file from a Typesense export operation directly as import.
	//
	// POST /collections/{collectionName}/documents/import
	ImportDocuments(ctx context.Context, req ImportDocumentsReq, params ImportDocumentsParams) (ImportDocumentsRes, error)
	// ImportStemmingDictionary implements importStemmingDictionary operation.
	//
	// Upload a JSONL file containing word mappings to create or update a stemming dictionary.
	//
	// POST /stemming/dictionaries/import
	ImportStemmingDictionary(ctx context.Context, req string, params ImportStemmingDictionaryParams) (ImportStemmingDictionaryRes, error)
	// IndexDocument implements indexDocument operation.
	//
	// A document to be indexed in a given collection must conform to the schema of the collection.
	//
	// POST /collections/{collectionName}/documents
	IndexDocument(ctx context.Context, req *IndexDocumentReq, params IndexDocumentParams) (IndexDocumentRes, error)
	// ListStemmingDictionaries implements listStemmingDictionaries operation.
	//
	// Retrieve a list of all available stemming dictionaries.
	//
	// GET /stemming/dictionaries
	ListStemmingDictionaries(ctx context.Context) (*ListStemmingDictionariesOK, error)
	// MultiSearch implements multiSearch operation.
	//
	// This is especially useful to avoid round-trip network latencies incurred otherwise if each of
	// these requests are sent in separate HTTP requests. You can also use this feature to do a federated
	// search across multiple collections in a single HTTP request.
	//
	// POST /multi_search
	MultiSearch(ctx context.Context, req OptMultiSearchSearchesParameter, params MultiSearchParams) (MultiSearchRes, error)
	// RetrieveAPIStats implements retrieveAPIStats operation.
	//
	// Retrieve the stats about API endpoints.
	//
	// GET /stats.json
	RetrieveAPIStats(ctx context.Context) (*APIStatsResponse, error)
	// RetrieveAllConversationModels implements retrieveAllConversationModels operation.
	//
	// Retrieve all conversation models.
	//
	// GET /conversations/models
	RetrieveAllConversationModels(ctx context.Context) ([]ConversationModelSchema, error)
	// RetrieveAllNLSearchModels implements retrieveAllNLSearchModels operation.
	//
	// Retrieve all NL search models.
	//
	// GET /nl_search_models
	RetrieveAllNLSearchModels(ctx context.Context) ([]NLSearchModelSchema, error)
	// RetrieveAllPresets implements retrieveAllPresets operation.
	//
	// Retrieve the details of all presets.
	//
	// GET /presets
	RetrieveAllPresets(ctx context.Context) (*PresetsRetrieveSchema, error)
	// RetrieveAnalyticsRule implements retrieveAnalyticsRule operation.
	//
	// Retrieve the details of an analytics rule, given it's name.
	//
	// GET /analytics/rules/{ruleName}
	RetrieveAnalyticsRule(ctx context.Context, params RetrieveAnalyticsRuleParams) (RetrieveAnalyticsRuleRes, error)
	// RetrieveAnalyticsRules implements retrieveAnalyticsRules operation.
	//
	// Retrieve the details of all analytics rules.
	//
	// GET /analytics/rules
	RetrieveAnalyticsRules(ctx context.Context) (*AnalyticsRulesRetrieveSchema, error)
	// RetrieveConversationModel implements retrieveConversationModel operation.
	//
	// Retrieve a conversation model.
	//
	// GET /conversations/models/{modelId}
	RetrieveConversationModel(ctx context.Context, params RetrieveConversationModelParams) (*ConversationModelSchema, error)
	// RetrieveMetrics implements retrieveMetrics operation.
	//
	// Retrieve the metrics.
	//
	// GET /metrics.json
	RetrieveMetrics(ctx context.Context) error
	// RetrieveNLSearchModel implements retrieveNLSearchModel operation.
	//
	// Retrieve a specific NL search model by its ID.
	//
	// GET /nl_search_models/{modelId}
	RetrieveNLSearchModel(ctx context.Context, params RetrieveNLSearchModelParams) (RetrieveNLSearchModelRes, error)
	// RetrievePreset implements retrievePreset operation.
	//
	// Retrieve the details of a preset, given it's name.
	//
	// GET /presets/{presetId}
	RetrievePreset(ctx context.Context, params RetrievePresetParams) (RetrievePresetRes, error)
	// RetrieveStopwordsSet implements retrieveStopwordsSet operation.
	//
	// Retrieve the details of a stopwords set, given it's name.
	//
	// GET /stopwords/{setId}
	RetrieveStopwordsSet(ctx context.Context, params RetrieveStopwordsSetParams) (RetrieveStopwordsSetRes, error)
	// RetrieveStopwordsSets implements retrieveStopwordsSets operation.
	//
	// Retrieve the details of all stopwords sets.
	//
	// GET /stopwords
	RetrieveStopwordsSets(ctx context.Context) (*StopwordsSetsRetrieveAllSchema, error)
	// SearchCollection implements searchCollection operation.
	//
	// Search for documents in a collection that match the search criteria.
	//
	// GET /collections/{collectionName}/documents/search
	SearchCollection(ctx context.Context, params SearchCollectionParams) (SearchCollectionRes, error)
	// TakeSnapshot implements takeSnapshot operation.
	//
	// Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory.
	// You can then backup the snapshot directory that gets created and later restore it as a data
	// directory, as needed.
	//
	// POST /operations/snapshot
	TakeSnapshot(ctx context.Context, params TakeSnapshotParams) (*SuccessStatus, error)
	// UpdateCollection implements updateCollection operation.
	//
	// Update a collection's schema to modify the fields and their types.
	//
	// PATCH /collections/{collectionName}
	UpdateCollection(ctx context.Context, req *CollectionUpdateSchema, params UpdateCollectionParams) (UpdateCollectionRes, error)
	// UpdateConversationModel implements updateConversationModel operation.
	//
	// Update a conversation model.
	//
	// PUT /conversations/models/{modelId}
	UpdateConversationModel(ctx context.Context, req *ConversationModelUpdateSchema, params UpdateConversationModelParams) (*ConversationModelSchema, error)
	// UpdateDocument implements updateDocument operation.
	//
	// Update an individual document from a collection by using its ID. The update can be partial.
	//
	// PATCH /collections/{collectionName}/documents/{documentId}
	UpdateDocument(ctx context.Context, req *UpdateDocumentReq, params UpdateDocumentParams) (UpdateDocumentRes, error)
	// UpdateDocuments implements updateDocuments operation.
	//
	// The filter_by query parameter is used to filter to specify a condition against which the documents
	// are matched. The request body contains the fields that should be updated for any documents that
	// match the filter condition. This endpoint is only available if the Typesense server is version `0.
	// 25.0.rc12` or later.
	//
	// PATCH /collections/{collectionName}/documents
	UpdateDocuments(ctx context.Context, req *UpdateDocumentsReq, params UpdateDocumentsParams) (UpdateDocumentsRes, error)
	// UpdateNLSearchModel implements updateNLSearchModel operation.
	//
	// Update an existing NL search model.
	//
	// PUT /nl_search_models/{modelId}
	UpdateNLSearchModel(ctx context.Context, req *NLSearchModelCreateSchema, params UpdateNLSearchModelParams) (UpdateNLSearchModelRes, error)
	// UpsertAlias implements upsertAlias operation.
	//
	// Create or update a collection alias. An alias is a virtual collection name that points to a real
	// collection. If you're familiar with symbolic links on Linux, it's very similar to that. Aliases
	// are useful when you want to reindex your data in the background on a new collection and switch
	// your application to it without any changes to your code.
	//
	// PUT /aliases/{aliasName}
	UpsertAlias(ctx context.Context, req OptCollectionAliasSchema, params UpsertAliasParams) (UpsertAliasRes, error)
	// UpsertAnalyticsRule implements upsertAnalyticsRule operation.
	//
	// Upserts an analytics rule with the given name.
	//
	// PUT /analytics/rules/{ruleName}
	UpsertAnalyticsRule(ctx context.Context, req *AnalyticsRuleUpsertSchema, params UpsertAnalyticsRuleParams) (UpsertAnalyticsRuleRes, error)
	// UpsertPreset implements upsertPreset operation.
	//
	// Create or update an existing preset.
	//
	// PUT /presets/{presetId}
	UpsertPreset(ctx context.Context, req *PresetUpsertSchema, params UpsertPresetParams) (UpsertPresetRes, error)
	// UpsertSearchOverride implements upsertSearchOverride operation.
	//
	// Create or update an override to promote certain documents over others. Using overrides, you can
	// include or exclude specific documents for a given query.
	//
	// PUT /collections/{collectionName}/overrides/{overrideId}
	UpsertSearchOverride(ctx context.Context, req *SearchOverrideSchema, params UpsertSearchOverrideParams) (UpsertSearchOverrideRes, error)
	// UpsertSearchSynonym implements upsertSearchSynonym operation.
	//
	// Create or update a synonym  to define search terms that should be considered equivalent.
	//
	// PUT /collections/{collectionName}/synonyms/{synonymId}
	UpsertSearchSynonym(ctx context.Context, req *SearchSynonymSchema, params UpsertSearchSynonymParams) (UpsertSearchSynonymRes, error)
	// UpsertStopwordsSet implements upsertStopwordsSet operation.
	//
	// When an analytics rule is created, we give it a name and describe the type, the source collections
	// and the destination collection.
	//
	// PUT /stopwords/{setId}
	UpsertStopwordsSet(ctx context.Context, req *StopwordsSetUpsertSchema, params UpsertStopwordsSetParams) (UpsertStopwordsSetRes, error)
	// Vote implements vote operation.
	//
	// Triggers a follower node to initiate the raft voting process, which triggers leader re-election.
	// The follower node that you run this operation against will become the new leader, once this
	// command succeeds.
	//
	// POST /operations/vote
	Vote(ctx context.Context) (*SuccessStatus, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
